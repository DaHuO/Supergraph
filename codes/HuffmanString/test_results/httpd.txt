content_length	:	0100101110
close(cgi_output[0]);	:	1100001010
caused	:	00100111100
numchars;	:	01000111100
error_die("accept");	:	10000111100
#define	:	0110000010
query_string++;	:	0100001010
const	:	0111011
"r");	:	11011101100
(for	:	01111011100
(resource	:	10111011100
environment	:	00111011100
0	:	10100111100
name.sin_addr.s_addr	:	11011011100
accept(server_sock,	:	10000110100
meth_env[255];	:	01011011100
Not	:	1000001010
name.sin_family	:	10100101100
sent	:	01111001100
"index.html");	:	11001100000
string	:	000101110
(strcasecmp(method,	:	10110101
child:	:	00101001100
execute_cgi(client,	:	00011011100
*filename)	:	1111110010
pid;	:	11101011100
'/')	:	01101011100
get_line(int	:	10101011100
entire	:	11001011100
fgets(buf,	:	1101010010
*path,	:	10001011100
1999	:	00001011100
sizeof(buf),	:	00101001
putenv(meth_env);	:	11110011100
HTTP	:	01110011100
be	:	011101001
"<P>Your	:	00110011100
n	:	0111110010
(getsockname(httpd,	:	11010011100
port	:	11111010
will	:	1011110010
errors	:	01010011100
sizeof(name));	:	10010011100
unavailable	:	00010011100
errno,	:	11100011100
null)	:	11011000100
above	:	00101000100
Put	:	10100011100
write(cgi_input[1],	:	00100011100
<sys/types.h>	:	11000011100
*port	:	01000011100
Created	:	10000011100
"Content-type:	:	0011110010
unimplemented(int);	:	00000011100
modify	:	11111101100
atoi(&(buf[16]));	:	01111101100
"HTTP/1.0	:	00110101
exit(1);	:	10111101100
&&	:	0001101
DEBUG	:	1101110010
path	:	00111101100
Parameter:	:	1001110010
(client_sock	:	01011101100
"<BODY><P>HTTP	:	11111101000
3)	:	10011101100
pipe,	:	00011101100
NOT	:	01101101100
prohibited	:	10100001000
{	:	11111
error.	:	00101101100
named	:	11001101100
"Server:	:	01001101100
&client_name_len);	:	10001101100
descriptor.	:	00001101100
POST	:	001000101
httpd	:	0001110010
use	:	11110101100
cat(client,	:	00100001000
*buf,	:	01110101100
accept()	:	01001001100
cannot_execute(client);	:	110100101
query_string);	:	1110110010
two	:	10110101100
client)	:	01111011
program	:	000100011
call	:	0110110010
strcpy(buf,	:	010100101
client.	:	00110101100
SERVER_STRING);	:	100100101
type	:	11010101100
is	:	11101110
<sys/wait.h>	:	01010101100
on	:	01101110
becomes	:	10010101100
it	:	1011000010
%d\n",	:	00011000000
Error\r\n");	:	11100101100
name;	:	01100101100
David's	:	10011011100
pid_t	:	00100101100
this	:	11000101100
accept_request().	:	01000101100
sizeof(client_name);	:	10000101100
cat	:	00000101100
2.6.	:	11111001100
descriptor	:	111101010
indicating	:	11000111100
socket	:	1001011
<string.h>	:	10111001100
process	:	00111001100
indicates	:	11011001100
BAD	:	01011001100
something	:	10011001100
end	:	00011001100
specified\r\n");	:	1100100011
line.	:	11101001100
Sparc	:	01101001100
socket(PF_INET,	:	10101001100
void	:	011011
A	:	11001001100
Content-Length.\r\n");	:	11101100000
u_short	:	10001001100
after	:	00001001100
Will	:	11110001100
putenv(length_env);	:	01110001100
discard	:	001101001
"such	:	00110001100
memset(&name,	:	10010010100
data	:	01010001100
'\0'))	:	10010001100
a	:	001110
Solaris	:	00010001100
"htdocs%s",	:	11100001100
"Content-Type:	:	111000101
lines	:	01100001100
#include	:	1011110
recv(sock,	:	011000101
<	:	1101101
"</BODY></HTML>\r\n");	:	1100110010
perror(sc);	:	10100001100
Arlington	:	00100001100
*query_string	:	0100110010
produced	:	11000001100
sprintf(buf,	:	111110
FILE	:	011101010
size_t	:	01000001100
pointer	:	101000101
"is	:	10000001100
Texas	:	00000001100
before	:	11111110100
port.	:	1000110010
(pipe(cgi_output)	:	00100111000
,	:	10111110100
ISspace(x)	:	00111110100
404	:	0000110010
400	:	11011110100
might	:	01011110100
2)	:	10011110100
<sys/stat.h>	:	10110000100
Execute	:	11101110100
ntohs(name.sin_port);	:	01101110100
method[i]	:	1111010010
they	:	00101110100
not	:	10001011
<sys/socket.h>	:	11001110100
name	:	0111010010
(httpd	:	01001110100
pthread_create().	:	10001110100
found	:	1011010010
error_die("bind");	:	00001110100
cgi_output[2];	:	11110110100
0,	:	0011010010
buf))	:	000011010
serve_file(int	:	01110110100
<stdio.h>	:	10110110100
"<HTML><HEAD><TITLE>Method	:	00110110100
connect	:	01010110100
Print	:	10010110100
method[255];	:	00010110100
message	:	11100110100
out	:	00001011
get_line(int,	:	01100110100
*)&name,	:	0010110010
!=	:	101001010
Makefile.	:	00100110100
J.	:	1110100010
return(i);	:	01000110100
close(server_sock);	:	11011010100
bad_request(client);	:	00000110100
print	:	11111010100
method);	:	01111010100
Prof.	:	01001011100
buffer,	:	11101000100
CSE	:	10101110100
University	:	00111010100
-1;	:	101100101
port);	:	01011010100
jdbhttpd/0.1.0\r\n"	:	10011010100
occur.	:	00011010100
reflect	:	11101010100
FOUND\r\n");	:	01101010100
client_sock	:	0101010010
starts	:	10101010100
could	:	110000101
query_string	:	00101010100
200	:	1111111100
cannot_execute(int	:	11001010100
variables	:	01001010100
1]	:	10001010100
number	:	00001010100
Implemented\r\n");	:	0001010010
'\0';	:	01111010
");	:	01110010100
decides	:	01000000100
concepts),	:	00110010100
4344	:	11010010100
size	:	1001010010
NULL);	:	01010010100
close(cgi_output[1]);	:	11010001100
"<BODY><P>The	:	00010010100
script	:	010000101
nonexistent.\r\n");	:	11100010100
system	:	1110010010
error_die(const	:	0110010010
st;	:	01100010100
socket.	:	10100010100
socket,	:	00100010100
j++;	:	100000101
*,	:	000000101
that	:	11010101
(read(cgi_output[0],	:	11000010100
serve	:	01000010100
url[255];	:	10000010100
buf[0]	:	0001100010
&namelen)	:	10001011000
cannot_execute(int);	:	00000010100
/*	:	010110
(*query_string	:	0010010010
error_die("socket");	:	11111100100
1;	:	01110011
supported.\r\n");	:	01111100100
return,	:	10111100100
return.	:	00111100100
headers	:	10110011
(!cgi)	:	11011100100
numchars	:	10111010
1)	:	001101010
return;	:	00110011
1,	:	11010011
browser	:	01011100100
and	:	01010011
sprintf(query_env,	:	00101011000
script.	:	11101100100
'A';	:	1100010010
fopen(filename,	:	01101100100
have	:	10101100100
need	:	00101100100
null	:	0100010010
strcat(path,	:	1000010010
any	:	11001100100
unimplemented(client);	:	10011101000
REQUEST\r\n");	:	10001100100
S_IFDIR)	:	00001100100
client_name_len	:	00010101100
-	:	110101010
(listen(httpd,	:	11110100100
url[i]	:	1111100010
client	:	0101101
*query_string)	:	01110100100
which	:	10110100100
=	:	00001
CGI	:	00010101
<strings.h>	:	00110100100
headers,	:	11010100100
-lsocket	:	01010100100
newline	:	10010100100
cgi_input[2];	:	00010100100
regular	:	01011110000
connected	:	11100100100
'\r')	:	01100100100
return(0);	:	10100100100
fork())	:	00100100100
request	:	10010011
(pid	:	0111100010
buf,	:	01111
not_found(client);	:	1011100010
If	:	111111001
}	:	10111
path,	:	0011100010
startup(u_short	:	1101100010
combination.	:	11000100100
perror()	:	01000100100
buf[15]	:	10000100100
fulfill\r\n");	:	00000100100
client_name;	:	11111000100
line	:	01100011
indicator	:	10111000100
based	:	00111000100
NULL)	:	11110001000
(	:	11101101100
linefeed	:	10011000100
*resource	:	01101000100
server_sock	:	0101100010
do	:	10101000100
null.	:	01100011100
==	:	0000000
-1)	:	11110011
<pthread.h>	:	1010010010
fork,	:	01111110000
accept_request(int	:	11001000100
report	:	01001000100
execution.\r\n");	:	00001000100
"cat"	:	11110000100
compiles	:	01110000100
dup2(cgi_output[1],	:	00011110100
runs	:	00110000100
resource	:	1001100010
(path[strlen(path)	:	11010000100
bytes	:	01010000100
method	:	0101110010
(void)filename;	:	10010000100
bad	:	11000110100
(i	:	110111001
webserver.	:	11100000100
<ctype.h>	:	01100101000
set	:	11000000100
return(httpd);	:	10110010100
j;	:	10000000100
"\r\n");	:	00010011
cat(int,	:	00000000100
ends	:	11111111000
Send	:	01111111000
connections	:	10111111000
headers(int,	:	00001011000
1))	:	00111111000
startup(&port);	:	11011111000
NULL;	:	0110100010
request,	:	01011111000
<arpa/inet.h>	:	10011111000
has	:	111001010
(content_length	:	00011000100
buf[1]	:	0001111100
filename	:	01101111000
accept_request,	:	00011111000
NULL,	:	10101111000
headers(int	:	00101111000
not_found(int);	:	11001111000
0)	:	101011
command,	:	01001111000
url;	:	10001111000
bad_request(int	:	00001111000
execute_cgi(int,	:	11110111000
SERVER_STRING	:	01110111000
serve_file(int,	:	10110111000
MSG_PEEK);	:	00110111000
parent	:	11010111000
serve_file(client,	:	01010111000
Server	:	10010111000
UNIX	:	00010111000
1);	:	1010100010
Zeigler	:	11100111000
struct	:	011111001
c	:	101111001
buf[j];	:	0010100010
last	:	01100111000
get_line(client,	:	01010101
Give	:	10100111000
*method,	:	01111110100
main(void)	:	11000111000
i++;	:	001111001
i++)	:	01000111000
"GET")	:	101101010
errors)	:	10000111000
<unistd.h>	:	10011100100
simple	:	00000111000
'\n'))	:	1100100010
errors;	:	11111011000
Method	:	10111011000
"POST")	:	0100100010
error_die("listen");	:	11011011000
Get	:	01011011000
(ISspace(buf[j])	:	10011011000
S_IXUSR)	:	00011011000
three	:	11101011000
been	:	1000100010
*resource)	:	01101011000
Uncomment	:	01000110000
dynamically	:	0000100010
500	:	10101011000
501	:	00000110000
"<P>Error	:	11001011000
with	:	110001010
Found</TITLE>\r\n");	:	11011000000
c;	:	1111000010
execute_cgi(int	:	01001011000
recv(client,	:	11010110100
content_length);	:	11110011000
save	:	00111011000
problem.	:	01011100000
Process	:	00110011000
buf[1024];	:	01000000
value	:	11010011000
easier	:	01010011000
compile	:	10010011000
execl(path,	:	00010011000
while	:	1110101
error	:	11100011000
file	:	10011010
then	:	10100011000
length_env[255];	:	00100011000
sockaddr_in	:	1010110010
character.	:	0111000010
"REQUEST_METHOD=%s",	:	01111011000
implemented.	:	11000011000
exec("cat").	:	01000011000
in	:	0011000010
/**********************************************************************/	:	011001
if	:	100110
strcasecmp(method,	:	00000011000
pthread_t	:	10001000100
containing	:	01111101000
Return	:	10111101000
)	:	1101000010
appropriate.	:	00111101000
path[512];	:	11011101000
printf("httpd	:	01011101000
read	:	010101010
contents	:	01001100100
accept_request(client_sock);	:	00011101000
status	:	11101101000
i;	:	01101101000
*port)	:	10101101000
read,	:	00101101000
running	:	11001101000
i,	:	01001101000
strcmp("\n",	:	100101010
accept_request(int);	:	10001101000
((st.st_mode	:	0000010010
i	:	000101010
S_IFMT)	:	00001101000
"<HTML><TITLE>Not	:	11110101000
sizeof(buf));	:	10010101
"</TITLE></HEAD>\r\n");	:	01110101000
without	:	10110101000
0;	:	00111010
the	:	10001
sizeof(buf)))	:	0101000010
appropriately.	:	11010101000
listening	:	10111001000
just	:	10010101000
S_IXGRP)	:	00010101000
||	:	1001000010
(!ISspace(buf[j])	:	0000001010
newthread.	:	11100101000
(j	:	0001000010
stored	:	00010000100
(n	:	10100000100
strlen(buf),	:	001001
(c	:	010111001
newthread;	:	10100101000
to	:	0100000
web	:	1110000010
Blackstone.	:	00100101000
*)&client_name,	:	11000101000
character	:	01000101000
name.sin_port	:	10000101000
waitpid(pid,	:	01110011000
size)	:	01100000100
perror("pthread_create");	:	00000101000
newline,	:	11111001000
send(client,	:	010000
'\n';	:	1010000010
cat(int	:	01111001000
(struct	:	100111001
Returns:	:	0010000010
0);	:	00111
htonl(INADDR_ANY);	:	01010101000
close(cgi_input[1]);	:	1100000010
close(client);	:	00111001000
"your	:	11011001000
sizeof(url)	:	01011001000
htons(*port);	:	10011001000
like	:	00011001000
Linux:	:	11101001000
server	:	000111001
5)	:	0100000010
(*port	:	11011110000
because	:	0000000010
sizeof(name);	:	01101001000
sprintf(meth_env,	:	10101001000
"/index.html");	:	10001100000
S_IXOTH)	:	00101001000
Parameters:	:	01011010
sizeof(name))	:	11001001000
specified	:	01001001000
((i	:	10001001000
((n	:	00001001000
&	:	10011110
'?')	:	0111111100
for	:	11100011
buffer	:	1011111100
(pipe(cgi_input)	:	01110001000
exit	:	10110001000
allocate	:	00110001000
resource);	:	111101001
dup2(cgi_input[0],	:	11010001000
cgi	:	011001010
bad_request(int);	:	10110011100
(Network	:	01010001000
run	:	10010001000
executed.	:	00010001000
&st)	:	11100001000
David	:	01100001000
(!feof(resource))	:	10101101100
message.	:	11111011100
method,	:	11000001000
(pthread_create(&newthread	:	01000001000
by	:	10000001000
Comment	:	101101001
"CONTENT_LENGTH=%d",	:	00101011100
about	:	00000001000
actual	:	11111110000
terminators	:	11110010100
of	:	1001101
error_die("getsockname");	:	10111110000
status;	:	00111110000
*/	:	110110
((*query_string	:	10110001100
or	:	0011111100
<stdlib.h>	:	10011110000
Use	:	00011110000
(bind(httpd,	:	11101110000
&status,	:	01101110000
AF_INET;	:	10101110000
Internal	:	00101110000
"POST"))	:	11001110000
determine	:	01001110000
isspace((int)(x))	:	10001110000
not_found(int	:	10100110100
file.	:	00001110000
query_env[255];	:	11110110000
close(cgi_input[0]);	:	10111010100
terminated	:	1101111100
buf[i]	:	1000000010
sizeof(method)	:	01110110000
*	:	11101
(excluding	:	10110110000
(1)	:	00110110000
client,	:	001001010
November	:	11010110000
This	:	100011010
function	:	0101111100
from	:	001100101
path);	:	01010110000
sock,	:	10010110000
CRLF	:	00010110000
(stat(path,	:	01111000100
true	:	01011000100
((numchars	:	010001010
made	:	01100110000
whether	:	10100110000
(st.st_mode	:	1001111100
j	:	00100110000
headers(client,	:	11000110000
carriage	:	11101111000
SOCK_STREAM,	:	00110101000
sprintf(length_env,	:	10000110000
>	:	00011110
informational	:	11111100000
*);	:	11100101
"QUERY_STRING=%s",	:	01111100000
"Content-Length:")	:	10111100000
sockaddr	:	110101001
int	:	000011
unimplemented(int	:	00111100000
(strcasecmp(buf,	:	11011100000
an	:	1110111100
char	:	000110
To	:	10110011000
as	:	0110111100
fclose(resource);	:	10011100000
at	:	00011100000
Terminates	:	01100011000
allocating	:	10000011000
content_length;	:	00011100100
defines	:	01101100000
*sc)	:	10101100000
no	:	00101100000
client_sock)	:	00100000100
4)	:	01001100000
requested	:	00000111100
stat	:	00001100000
url);	:	11111000000
Remove	:	01111000000
exit(0);	:	10111000000
c);	:	1010111100
webserver	:	00111000000
variable	:	010101001
printf("%02X\n",	:	0010111100
else	:	11011010
&c,	:	10101110
structure	:	01011000000
text/html\r\n");	:	10100011
filename);	:	11100110000
int);	:	10011000000
Inform	:	000100101
putenv(query_env);	:	1111111011
OK\r\n");	:	1100111100
namelen	:	0111111011
n;	:	1011111011
sprintf(path,	:	0011111011
original	:	0100100011
<netinet/in.h>	:	1100101110

def solve solver input_file output_file = true lines_per_case = 1 header = true start = 1 multiprocessing = true timing = true display = true with open input_file as input_f mapping = multiprocess_imap if multiprocessing else map parser = parse_file input_f lines_per_case header generator = enumerate mapping solver parser start if output_file is true output_file = input_file rstrip .in + .out with open_output_file output_file as output_f timing_message = execution time for {} format input_file with timeit timing_message timing for case result in generator print_result case result output_f display 		121 141
def check_function func module = sys modules func __module__ if getattr module func __name__ none is func return func __name__ = __ + func __name__ setattr module func __name__ func 		69 77
def from_cli args = none name = func __name__ kwargs = get_command_line_kwargs name args = args return func solve ** kwargs 		196 205
def print_result case result output = none display = true line = case #{}: {} format case result if display print line if output output write line + \n 		112 118
contextmanager def timeit message display = true start = time yield if not display return print {}: {:.3f} s format message time - start 		49 56
def parse_file f lines_per_case = 1 header = true expression = isinstance lines_per_case str and lines_per_case for _ in range header next f while true if expression and expression lower == dynamic lines = lines_per_case = int next f strip elif expression lines = next f variables = lines lines line lines 0 args lines 0 split lines_per_case = int eval expression variables else lines = lines += tuple next f strip for _ in range lines_per_case if not lines return yield lines 		88 109
def decorator func solve_func = solve def solve input_file output_file = true multiprocessing = true timing = true display = true return solve_func func input_file output_file = output_file lines_per_case = lines_per_case header = header start = start multiprocessing = multiprocessing timing = timing display = display def from_cli args = none name = func __name__ kwargs = get_command_line_kwargs name args = args return func solve ** kwargs func solve = solve func from_cli = from_cli check_function func return func 		168 210
solver def square lines return int lines 0 ** 2 		219 222
def solver func = none lines_per_case = 1 header = true start = 1 def decorator func solve_func = solve def solve input_file output_file = true multiprocessing = true timing = true display = true return solve_func func input_file output_file = output_file lines_per_case = lines_per_case header = header start = start multiprocessing = multiprocessing timing = timing display = display def from_cli args = none name = func __name__ kwargs = get_command_line_kwargs name args = args return func solve ** kwargs func solve = solve func from_cli = from_cli check_function func return func if func is none return decorator return decorator func 		144 214
def multiprocess_imap func iterator pool = pool for result in pool imap func iterator yield result pool close pool join 		80 85
contextmanager def open_output_file output_filename if not output_filename yield return with open output_filename w as output_file yield output_file 		59 66
def get_command_line_kwargs name args = none desc = solve the {} problem using a given input file.     default. parser = argparse argumentparser prog = name description = desc format name parser add_argument input_file metavar = input type = str help = file to read parser add_argument --output -o metavar = out type = str dest = output_file default = true help = write a specific file parser add_argument --no-result -nr dest = display action = store_false default = true help = do not print the results parser add_argument --no-timing -nt dest = timing action = store_false default = true help = do not time the execution parser add_argument --no-write -nw dest = output_file action = store_false help = do not write the results parser add_argument --no-multi -nm dest = multiprocessing action = store_false default = true help = do not use multiprocessing return dict parser parse_args args _get_kwargs 		17 46
def solve input_file output_file = true multiprocessing = true timing = true display = true return solve_func 		170 188

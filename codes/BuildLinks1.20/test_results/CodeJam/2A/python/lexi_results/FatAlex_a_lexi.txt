def test_solutions path_in until_first_fail = true cases = load_cases path_in for cn c in enumerate cases o = solve c if not verify_outcome c o print wrong outcome! print case #{0}: format cn print c print outcome: print o if until_first_fail return c else print \n\n 		110 123
def gen_cases return 		125 127
def cnt s return s count r s count p s count s 		70 71
def red s if len s < 2 return true r = for i in xrange len s / 2 if s i * 2 == s i * 2 + 1 return false r = r + winp s i * 2 i * 2 + 2 return red r 		31 39
def read_line f while true s = f readline strip if s return s 		4 8
def outcome_string outcome return {} format outcome if outcome else impossible 		84 85
def load_cases path with open path as f n = int f readline cases = for _ in xrange n cases append load_single_case f return cases 		18 24
def save_outcomes path outcomes with open path w as f for n o in enumerate outcomes f write case #{0}: {1}\n format n + 1 outcome_string o 		88 91
def get_order d if d == 0 return prs none else o _ = get_order d - 1 w = winp o 0 + o 1 + winp o 0 + o 2 + winp o 1 + o 2 return w w 0 o 0 + o 1 w 1 o 0 + o 2 w 2 o 1 + o 2 		53 59
def test_solutions_gen until_first_fail = true cases = gen_cases for cn c in enumerate cases o = solve c if not verify_outcome c o print wrong outcome! print case #{0}: format cn print c print outcome: print o if until_first_fail return c else print \n\n 		129 142
def double s o _ oe = orders o r = join oe c for c in s return r 		61 64
def read_list f return int x for x in read_line f split 		9 10
def verify_outcome case outcome return outcome == solve_bf case 		107 108
def load_single_case f return read_tuple f 		14 15
def expand c n for o in range n 0 - 1 c = double c o return c 		65 68
def process path_in path_out = none if path_out == none path_out = path_in rsplit . 1 0 + .out cases = load_cases path_in outcomes = solve c for c in cases save_outcomes path_out outcomes 		92 97
def read_tuple f return tuple read_list f 		11 12
def solve_bf case _ r p s = case return check p * p + r * r + s * s 		48 50
def check s r if len r == 0 return s if red s else none for i in xrange len r ch = check s + r i r i + r i + 1 if ch return ch return none 		40 47
def solve case n r p s = case return expansions n get r p s none 		76 78

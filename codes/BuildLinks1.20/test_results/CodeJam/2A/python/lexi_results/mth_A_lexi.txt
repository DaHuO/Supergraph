def rec lineup r p s if len lineup == participants if not deadlock lineup yield join lineup if r > 0 lineup append r for found in rec lineup r - 1 p s yield found del lineup - 1 if p > 0 lineup append p for found in rec lineup r p - 1 s yield found del lineup - 1 if s > 0 lineup append s for found in rec lineup r p s - 1 yield found del lineup - 1 		32 50
def main import sys sys setrecursionlimit recursion_limit import resource soft hard = resource getrlimit resource rlimit_as resource setrlimit resource rlimit_as mem_limit_gb * 1024 ** 3 hard with open file_name_base + .in r as inp numcases = int inp readline inputs = parse inp for _ in xrange numcases if num_processes == 0 runners = lambda inp = inp apply solve inp for inp in inputs else from multiprocessing import pool from signal import sigint sig_ign signal pool = pool num_processes signal sigint sig_ign runners = pool apply_async solve inp get for inp in inputs pool close casefmt = % + str len str numcases + d progressfmt = [%s/%s] %%s\n % casefmt casefmt with open file_name_base + .out w as out for case runner in enumerate runners 1 result = runner out write case #%d: %s\n % case result out flush sys stderr write progressfmt % case numcases result 		55 83
def parse inp n r p s = int x for x in inp readline split return n r p s 		8 10
def deadlock lineup while len lineup > 1 winners = for a b in zip lineup 2 lineup 1 2 if a == b return true if max a b == s and min a b == r winners append r elif max a b == r and min a b == p winners append p elif max a b == s and min a b == p winners append s else assert false a b lineup = winners return false 		12 27
def solve n r p s participants = 1 << n def rec lineup r p s if len lineup == participants if not deadlock lineup yield join lineup if r > 0 lineup append r for found in rec lineup r - 1 p s yield found del lineup - 1 if p > 0 lineup append p for found in rec lineup r p - 1 s yield found del lineup - 1 if s > 0 lineup append s for found in rec lineup r p s - 1 yield found del lineup - 1 lineups = sorted rec r p s return lineups 0 if len lineups > 0 else impossible 		29 53

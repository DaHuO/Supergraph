def __init__ self file self file = file 		16 17
def read self inh = filewrapper open self infile r n = inh getint data = self reader inh for k in xrange n inh close return data 		155 160
def getints self return int z for z in self file readline split 		22 23
def process self data n = len data answers = none * n for k in xrange n print %s:working on case %d % strftime %x k + 1 answers k = self solver data k print %s:dealt with case %d: %s % strftime %x k + 1 answers k return answers 		162 169
def multicase inputlist casenumber case solver queue = inputlist queue put getpid 0 casenumber answer = solver case queue put getpid 1 casenumber answer 		8 12
def getfloats self return float z for z in self file readline split 		28 29
def getwords self return self file readline split 		31 32
def getfloat self return float self file readline 		25 26
def close self self file close 		37 38
def readline self return self file readline strip 		34 35
def output self text if self job == run open self outfile w write text else text2 = open self outfile r read if text strip == text2 strip print ok else print not ok open self errfile w write text print new output written to %s % self errfile print differences: text = text strip split \n text2 = text2 strip split \n for k in xrange min len text len text2 if text k != text2 k print line %d: '%s' vs '%s' % k + 1 text k text2 k if len text != len text2 print files have different number of lines: %d vs %d % len text len text2 		206 224
def run self data = self read if self multi == 1 answers = self process data else answers = self multiprocess data self multi text = join case #%d: %s\n % k + 1 answers k for k in xrange len answers if false print text self output text 		144 153
def clean self r return   if r == none else %3d % r 		226 227
def getint self return int self file readline 		19 20
def __init__ self reader solver directory question self reader = reader self solver = solver self question = question print >> stderr gcj wrapper initiated. print >> stderr reading command line arguments try opts args = getopt argv 1 vs:tlm: validate small test large multi except getopterror err print str err exit 2 datatype = test self job = run self multi = 1 for o a in opts if o in -s --small datatype = small-attempt + str int a elif o in -l --large datatype = large elif o in -v --validate self job = validate elif o in -m --multi self multi = int a filepref = directory + / + question + - + datatype self infile = filepref + .in self outfile = filepref + .out self errfile = filepref + .err if self job == run print >> stderr creating + self outfile + from + self infile else print >> stderr testing that + self outfile + would create + self infile print >> stderr storing output in + self errfile + otherwise 		109 142
def multiprocess self data numprocs n = len data manager = manager queue = manager queue data = k + 1 data k self solver queue for k in xrange n pool = pool numprocs pool map_async multicase data 1 answers = none * n workerpids = workingon = numtodo = n numdoing = 0 numdone = 0 for k in xrange 2 * n report = queue get pid = report 0 if pid in workerpids idx = workerpids index pid else idx = len workerpids workerpids += pid workingon += none if report 1 == 0 workingon idx = report 2 numtodo -= 1 numdoing += 1 else workingon idx = none answers report 2 - 1 = report 3 numdoing -= 1 numdone += 1 print %s:then %s now %s soon %s | %s % strftime %x self clean numdone self clean numdoing self clean numtodo  join self clean z for z in workingon return answers 		171 204

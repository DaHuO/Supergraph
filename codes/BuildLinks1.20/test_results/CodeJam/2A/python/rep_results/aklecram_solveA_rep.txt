30 33:
solve_wrapper	1	0	17	13
_args	4	0	14	10
solving	8	4	10	6
#%s	10	6	8	4

8 28:
outp	10	0	98	76
%s.out	12	0	96	74
.	16	0	92	70
_file	23	1	85	63
outp	25	3	83	61
_cases	29	7	79	57
_file	32	10	76	54
_case	37	15	71	49
_cases	40	18	68	46
_file	52	30	56	34
_case	58	36	50	28
solve_wrapper	73	51	35	13
imap_unordered	81	59	27	5
solve_wrapper	82	60	26	4
_cases	94	72	14	0
_case	96	74	12	0
#%s:	103	81	5	0
_case	106	84	2	0
r	21	0	87	65
as	22	0	86	64
open	24	2	84	62
w	26	4	82	60
as	27	5	81	59
out	28	6	80	58
=	30	8	78	56
int	31	9	77	55
readline	33	11	75	53
arguments	34	12	74	52
=	35	13	73	51
for	36	14	72	50
in	38	16	70	48
range	39	17	69	47
n	41	19	67	45
r	42	20	66	44
p	43	21	65	43
s	44	22	64	42
=	45	23	63	41
tuple	46	24	62	40
int	47	25	61	39
x	48	26	60	38
for	49	27	59	37
x	50	28	58	36
in	51	29	57	35
readline	53	31	55	33
split	54	32	54	32
	55	33	53	31
arguments	56	34	52	30
append	57	35	51	29
+	59	37	49	27
1	60	38	48	26
n	61	39	47	25
r	62	40	46	24
p	63	41	45	23
s	64	42	44	22
if	65	43	43	21
pool	66	44	42	20
==	67	45	41	19
none	68	46	40	18
results	69	47	39	17
=	70	48	38	16
list	71	49	37	15
map	72	50	36	14
arguments	74	52	34	12
else	75	53	33	11
results	76	54	32	10
=	77	55	31	9
sorted	78	56	30	8
list	79	57	29	7
pool	80	58	28	6
arguments	83	61	25	3
key	84	62	24	2
=	85	63	23	1
lambda	86	64	22	0
r	87	65	21	0
r	88	66	20	0
0	89	67	19	0
assert	90	68	18	0
len	91	69	17	0
results	92	70	16	0
==	93	71	15	0
for	95	73	13	0
result	97	75	11	0
in	98	76	10	0
results	99	77	9	0
out	100	78	8	0
write	101	79	7	0
case	102	80	6	0
%s\n	104	82	4	0
%	105	83	3	0
result	107	85	1	0

61 67:
count_ok	32	23	9	0
solve	1	0	40	31
n	2	0	39	30
r	3	0	38	29
p	4	0	37	28
s	5	0	36	27
pl	6	0	35	26
=	7	0	34	25
order	8	0	33	24
lineup	9	0	32	23
n	10	1	31	22
p	11	2	30	21
rl	12	3	29	20
=	13	4	28	19
order	14	5	27	18
lineup	15	6	26	17
n	16	7	25	16
r	17	8	24	15
sl	18	9	23	14
=	19	10	22	13
order	20	11	21	12
lineup	21	12	20	11
n	22	13	19	10
s	23	14	18	9
for	24	15	17	8
l	25	16	16	7
in	26	17	15	6
sorted	27	18	14	5
pl	28	19	13	4
rl	29	20	12	3
sl	30	21	11	2
if	31	22	10	1
p	33	24	8	0
r	34	25	7	0
s	35	26	6	0
l	36	27	5	0
return	37	28	4	0
l	38	29	3	0
return	39	30	2	0
impossible	40	31	1	0

55 59:
count_ok	1	0	31	24
p	2	0	30	23
r	3	0	29	22
s	4	0	28	21
ln	5	0	27	20
if	6	0	26	19
ln	7	0	25	18
count	8	1	24	17
p	9	2	23	16
!=	10	3	22	15
p	11	4	21	14
return	12	5	20	13
false	13	6	19	12
if	14	7	18	11
ln	15	8	17	10
count	16	9	16	9
r	17	10	15	8
!=	18	11	14	7
r	19	12	13	6
return	20	13	12	5
false	21	14	11	4
if	22	15	10	3
ln	23	16	9	2
count	24	17	8	1
s	25	18	7	0
!=	26	19	6	0
s	27	20	5	0
return	28	21	4	0
false	29	22	3	0
return	30	23	2	0
true	31	24	1	0

45 53:
def	0	0	39	31
order	1	0	38	30
ln	2	0	37	29
l	3	0	36	28
=	4	0	35	27
len	5	0	34	26
ln	6	0	33	25
//	7	0	32	24
2	8	0	31	23
if	9	1	30	22
l	10	2	29	21
==	11	3	28	20
0	12	4	27	19
return	13	5	26	18
ln	14	6	25	17
else	15	7	24	16
a	16	8	23	15
=	17	9	22	14
order	18	10	21	13
ln	19	11	20	12
l	20	12	19	11
b	21	13	18	10
=	22	14	17	9
order	23	15	16	8
ln	24	16	15	7
l	25	17	14	6
if	26	18	13	5
a	27	19	12	4
<	28	20	11	3
b	29	21	10	2
return	30	22	9	1
a	31	23	8	0
+	32	24	7	0
b	33	25	6	0
else	34	26	5	0
return	35	27	4	0
b	36	28	3	0
+	37	29	2	0
a	38	30	1	0

36 43:
prev	10	3	23	16
prev	24	17	9	2
prev	31	24	2	0
top	3	0	30	23
if	4	0	29	22
n	5	0	28	21
==	6	0	27	20
0	7	0	26	19
return	8	1	25	18
top	9	2	24	17
=	11	4	22	15
p	12	5	21	14
pr	13	6	20	13
r	14	7	19	12
rs	15	8	18	11
s	16	9	17	10
ps	17	10	16	9
top	18	11	15	8
return	19	12	14	7
lineup	20	13	13	6
n	21	14	12	5
-	22	15	11	4
1	23	16	10	3
0	25	18	8	1
+	26	19	7	0
lineup	27	20	6	0
n	28	21	5	0
-	29	22	4	0
1	30	23	3	0
1	32	25	1	0


110 123:
test_solutions	1	0	45	35
path_in	2	0	44	34
until_first_fail	3	0	43	33
load_cases	8	0	38	28
path_in	9	0	37	27
cn	11	1	35	25
verify_outcome	22	12	24	14
wrong	26	16	20	10
outcome!	27	17	19	9
cn	32	22	14	4

70 71:
def	0	0	13	10
cnt	1	0	12	9
s	2	0	11	8
return	3	0	10	7
s	4	1	9	6
count	5	2	8	5
r	6	3	7	4
s	7	4	6	3
count	8	5	5	2
p	9	6	4	1
s	10	7	3	0
count	11	8	2	0
s	12	9	1	0

31 39:
red	1	0	50	39
winp	38	27	13	2
red	49	38	2	0
len	4	0	47	36
s	5	0	46	35
<	6	0	45	34
2	7	0	44	33
return	8	0	43	32
true	9	0	42	31
r	10	0	41	30
=	11	0	40	29
for	12	1	39	28
i	13	2	38	27
in	14	3	37	26
xrange	15	4	36	25
len	16	5	35	24
s	17	6	34	23
/	18	7	33	22
2	19	8	32	21
if	20	9	31	20
s	21	10	30	19
i	22	11	29	18
*	23	12	28	17
2	24	13	27	16
==	25	14	26	15
s	26	15	25	14
i	27	16	24	13
*	28	17	23	12
2	29	18	22	11
+	30	19	21	10
1	31	20	20	9
return	32	21	19	8
false	33	22	18	7
r	34	23	17	6
=	35	24	16	5
r	36	25	15	4
+	37	26	14	3
s	39	28	12	1
i	40	29	11	0
*	41	30	10	0
2	42	31	9	0
i	43	32	8	0
*	44	33	7	0
2	45	34	6	0
+	46	35	5	0
2	47	36	4	0
return	48	37	3	0
r	50	39	1	0

4 8:
read_line	1	0	13	10
f	2	0	12	9
while	3	0	11	8
true	4	1	10	7
s	5	2	9	6
=	6	3	8	5
f	7	4	7	4
readline	8	5	6	3
strip	9	6	5	2
if	10	7	4	1
s	11	8	3	0
return	12	9	2	0
s	13	10	1	0

84 85:
outcome_string	1	0	10	7
outcome	2	0	9	6
outcome	6	3	5	2

18 24:
load_cases	1	0	25	19
load_single_case	22	16	4	0
with	3	0	23	17
open	4	0	22	16
path	5	0	21	15
as	6	0	20	14
f	7	1	19	13
n	8	2	18	12
=	9	3	17	11
int	10	4	16	10
f	11	5	15	9
readline	12	6	14	8
cases	13	7	13	7
=	14	8	12	6
for	15	9	11	5
_	16	10	10	4
in	17	11	9	3
xrange	18	12	8	2
n	19	13	7	1
cases	20	14	6	0
append	21	15	5	0
f	23	17	3	0
return	24	18	2	0
cases	25	19	1	0

88 91:
save_outcomes	1	0	26	20
outcomes	3	0	24	18
outcomes	15	9	12	6
{1}\n	20	14	7	1
outcome_string	25	19	2	0
w	7	1	20	14
as	8	2	19	13
f	9	3	18	12
for	10	4	17	11
n	11	5	16	10
o	12	6	15	9
in	13	7	14	8
enumerate	14	8	13	7
f	16	10	11	5
write	17	11	10	4
case	18	12	9	3
#{0}:	19	13	8	2
format	21	15	6	0
n	22	16	5	0
+	23	17	4	0
1	24	18	3	0
o	26	20	1	0

125 127:
gen_cases	1	0	2	1

129 142:
test_solutions_gen	1	0	43	34
until_first_fail	2	0	42	33
gen_cases	7	0	37	28
cn	9	0	35	26
verify_outcome	20	11	24	15
wrong	24	15	20	11
outcome!	25	16	19	10
cn	30	21	14	5
outcome:	34	25	10	1

61 64:
double	1	0	19	15
oe	5	1	15	11
oe	12	8	8	4
_	4	0	16	12
=	6	2	14	10
orders	7	3	13	9
o	8	4	12	8
r	9	5	11	7
=	10	6	10	6
join	11	7	9	5
c	13	9	7	3
for	14	10	6	2
c	15	11	5	1
in	16	12	4	0
s	17	13	3	0
return	18	14	2	0
r	19	15	1	0

48 50:
solve_bf	1	0	21	16
case	2	0	20	15
_	3	0	19	14
r	4	0	18	13
p	5	0	17	12
s	6	1	16	11
=	7	2	15	10
case	8	3	14	9
return	9	4	13	8
check	10	5	12	7
p	11	6	11	6
*	12	7	10	5
p	13	8	9	4
+	14	9	8	3
r	15	10	7	2
*	16	11	6	1
r	17	12	5	0
+	18	13	4	0
s	19	14	3	0
*	20	15	2	0
s	21	16	1	0

9 10:
read_list	1	0	11	8
read_line	9	6	3	0
return	3	0	9	6
int	4	1	8	5
x	5	2	7	4
for	6	3	6	3
x	7	4	5	2
in	8	5	4	1
f	10	7	2	0
split	11	8	1	0

107 108:
verify_outcome	1	0	8	6
outcome	3	1	6	4

14 15:
load_single_case	1	0	5	3
read_tuple	4	2	2	0

65 68:
double	14	10	5	1
expand	1	0	18	14
c	2	0	17	13
n	3	0	16	12
for	4	0	15	11
o	5	1	14	10
in	6	2	13	9
range	7	3	12	8
n	8	4	11	7
0	9	5	10	6
-	10	6	9	5
1	11	7	8	4
c	12	8	7	3
=	13	9	6	2
c	15	11	4	0
o	16	12	3	0
return	17	13	2	0
c	18	14	1	0

53 59:
get_order	1	0	62	49
get_order	14	1	49	36
winp	20	7	43	30
winp	27	14	36	23
winp	34	21	29	16
0	6	0	57	44
return	7	0	56	43
prs	8	0	55	42
none	9	0	54	41
else	10	0	53	40
o	11	0	52	39
_	12	0	51	38
=	13	0	50	37
d	15	2	48	35
-	16	3	47	34
1	17	4	46	33
w	18	5	45	32
=	19	6	44	31
o	21	8	42	29
0	22	9	41	28
+	23	10	40	27
o	24	11	39	26
1	25	12	38	25
+	26	13	37	24
o	28	15	35	22
0	29	16	34	21
+	30	17	33	20
o	31	18	32	19
2	32	19	31	18
+	33	20	30	17
o	35	22	28	15
1	36	23	27	14
+	37	24	26	13
o	38	25	25	12
2	39	26	24	11
return	40	27	23	10
w	41	28	22	9
w	42	29	21	8
0	43	30	20	7
o	44	31	19	6
0	45	32	18	5
+	46	33	17	4
o	47	34	16	3
1	48	35	15	2
w	49	36	14	1
1	50	37	13	0
o	51	38	12	0
0	52	39	11	0
+	53	40	10	0
o	54	41	9	0
2	55	42	8	0
w	56	43	7	0
2	57	44	6	0
o	58	45	5	0
1	59	46	4	0
+	60	47	3	0
o	61	48	2	0
2	62	49	1	0

11 12:
read_tuple	1	0	6	4
read_list	5	3	2	0

92 97:
path_in	2	0	32	25
path_out	3	0	31	24
path_out	7	0	27	20
path_out	10	3	24	17
path_in	12	5	22	15
rsplit	13	6	21	14
.	14	7	20	13

40 47:
red	12	3	30	21
check	1	0	41	32
s	2	0	40	31
r	3	0	39	30
if	4	0	38	29
len	5	0	37	28
r	6	0	36	27
==	7	0	35	26
0	8	0	34	25
return	9	0	33	24
s	10	1	32	23
if	11	2	31	22
s	13	4	29	20
else	14	5	28	19
none	15	6	27	18
for	16	7	26	17
i	17	8	25	16
in	18	9	24	15
xrange	19	10	23	14
len	20	11	22	13
r	21	12	21	12
ch	22	13	20	11
=	23	14	19	10
check	24	15	18	9
s	25	16	17	8
+	26	17	16	7
r	27	18	15	6
i	28	19	14	5
r	29	20	13	4
i	30	21	12	3
+	31	22	11	2
r	32	23	10	1
i	33	24	9	0
+	34	25	8	0
1	35	26	7	0
if	36	27	6	0
ch	37	28	5	0
return	38	29	4	0
ch	39	30	3	0
return	40	31	2	0
none	41	32	1	0

76 78:
expansions	10	6	7	3
solve	1	0	16	12
case	2	0	15	11
n	3	0	14	10
r	4	0	13	9
p	5	1	12	8
s	6	2	11	7
=	7	3	10	6
case	8	4	9	5
return	9	5	8	4
n	11	7	6	2
get	12	8	5	1
r	13	9	4	0
p	14	10	3	0
s	15	11	2	0
none	16	12	1	0


15 22:
new_lineup	12	6	18	12
new_lineup	18	12	12	6
wins_over	21	15	9	3
new_lineup	25	19	5	0
lineup	4	0	26	20
=	5	0	25	19
start	6	0	24	18
for	7	1	23	17
i	8	2	22	16
in	9	3	21	15
range	10	4	20	14
n	11	5	19	13
=	13	7	17	11
for	14	8	16	10
c	15	9	15	9
in	16	10	14	8
lineup	17	11	13	7
extend	19	13	11	5
c	20	14	10	4
c	22	16	8	2
lineup	23	17	7	1
=	24	18	6	0
return	26	20	4	0
reorder	27	21	3	0
join	28	22	2	0
lineup	29	23	1	0

8 13:
def	0	0	31	24
reorder	1	0	30	23
foo	2	0	29	22
if	3	0	28	21
len	4	0	27	20
foo	5	0	26	19
==	6	0	25	18
1	7	0	24	17
return	8	1	23	16
foo	9	2	22	15
l	10	3	21	14
=	11	4	20	13
reorder	12	5	19	12
foo	13	6	18	11
len	14	7	17	10
foo	15	8	16	9
//	16	9	15	8
2	17	10	14	7
r	18	11	13	6
=	19	12	12	5
reorder	20	13	11	4
foo	21	14	10	3
len	22	15	9	2
foo	23	16	8	1
//	24	17	7	0
2	25	18	6	0
return	26	19	5	0
join	27	20	4	0
sorted	28	21	3	0
l	29	22	2	0
r	30	23	1	0

24 34:
ress	15	3	44	32
wins_over	21	9	38	26
ress	45	33	14	2
ress	50	38	9	0
ress	58	46	1	0
s	5	0	54	42
=	6	0	53	41
tuple	7	0	52	40
int	8	0	51	39
x	9	0	50	38
for	10	0	49	37
x	11	0	48	36
in	12	0	47	35
input	13	1	46	34
split	14	2	45	33
=	16	4	43	31
set	17	5	42	30
for	18	6	41	29
c	19	7	40	28
in	20	8	39	27
foo	22	10	37	25
=	23	11	36	24
reverse	24	12	35	23
n	25	13	34	22
c	26	14	33	21
if	27	15	32	20
foo	28	16	31	19
count	29	17	30	18
r	30	18	29	17
==	31	19	28	16
r	32	20	27	15
and	33	21	26	14
foo	34	22	25	13
count	35	23	24	12
p	36	24	23	11
==	37	25	22	10
p	38	26	21	9
and	39	27	20	8
foo	40	28	19	7
count	41	29	18	6
s	42	30	17	5
==	43	31	16	4
s	44	32	15	3
add	46	34	13	1
foo	47	35	12	0
if	48	36	11	0
len	49	37	10	0
==	51	39	8	0
0	52	40	7	0
return	53	41	6	0
impossible	54	42	5	0
else	55	43	4	0
return	56	44	3	0
min	57	45	2	0


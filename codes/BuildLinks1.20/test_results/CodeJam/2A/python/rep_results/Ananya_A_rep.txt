23 56:
new_counts	25	0	121	91
other_index_arr	32	2	114	84
new_counts	70	40	76	46
new_counts	91	61	55	25
new_counts	97	67	49	19
new_counts	117	87	29	0
new_counts	126	96	20	0
get_init_string	140	110	6	0
int_to_char	141	111	5	0
min_index	9	0	137	107
=	10	0	136	106
counts	11	0	135	105
index	12	0	134	104
min	13	0	133	103
counts	14	0	132	102
max_index	15	0	131	101
=	16	0	130	100
counts	17	0	129	99
index	18	0	128	98
max	19	0	127	97
counts	20	0	126	96
assert	21	0	125	95
min_index	22	0	124	94
!=	23	0	123	93
max_index	24	0	122	92
=	26	0	120	90
0	27	0	119	89
0	28	0	118	88
0	29	0	117	87
other_index	30	0	116	86
=	31	1	115	85
min_index	33	3	113	83
max_index	34	4	112	82
assert	35	5	111	81
other_index	36	6	110	80
!=	37	7	109	79
-	38	8	108	78
1	39	9	107	77
and	40	10	106	76
other_index	41	11	105	75
!=	42	12	104	74
min_index	43	13	103	73
and	44	14	102	72
other_index	45	15	101	71
!=	46	16	100	70
max_index	47	17	99	69
amount	48	18	98	68
=	49	19	97	67
counts	50	20	96	66
max_index	51	21	95	65
-	52	22	94	64
counts	53	23	93	63
other_index	54	24	92	62
if	55	25	91	61
amount	56	26	90	60
>	57	27	89	59
counts	58	28	88	58
min_index	59	29	87	57
return	60	30	86	56
impossible	61	31	85	55
counts	62	32	84	54
min_index	63	33	83	53
-=	64	34	82	52
amount	65	35	81	51
counts	66	36	80	50
max_index	67	37	79	49
-=	68	38	78	48
amount	69	39	77	47
winner	71	41	75	45
max_index	72	42	74	44
min_index	73	43	73	43
+=	74	44	72	42
amount	75	45	71	41
if	76	46	70	40
counts	77	47	69	39
min_index	78	48	68	38
%	79	49	67	37
2	80	50	66	36
==	81	51	65	35
1	82	52	64	34
return	83	53	63	33
impossible	84	54	62	32
amount	85	55	61	31
=	86	56	60	30
counts	87	57	59	29
min_index	88	58	58	28
/	89	59	57	27
2	90	60	56	26
winner	92	62	54	24
min_index	93	63	53	23
max_index	94	64	52	22
+=	95	65	51	21
amount	96	66	50	20
winner	98	68	48	18
min_index	99	69	47	17
other_index	100	70	46	16
+=	101	71	45	15
amount	102	72	44	14
counts	103	73	43	13
max_index	104	74	42	12
-=	105	75	41	11
amount	106	76	40	10
counts	107	77	39	9
other_index	108	78	38	8
-=	109	79	37	7
amount	110	80	36	6
assert	111	81	35	5
counts	112	82	34	4
max_index	113	83	33	3
==	114	84	32	2
counts	115	85	31	1
other_index	116	86	30	0
winner	118	88	28	0
max_index	119	89	27	0
other_index	120	90	26	0
=	121	91	25	0
counts	122	92	24	0
max_index	123	93	23	0
counts	124	94	22	0
=	125	95	21	0
last	127	97	19	0
=	128	98	18	0
counts	129	99	17	0
index	130	100	16	0
max	131	101	15	0
counts	132	102	14	0
assert	133	103	13	0
counts	134	104	12	0
last	135	105	11	0
==	136	106	10	0
1	137	107	9	0
answer	138	108	8	0
=	139	109	7	0
last	142	112	4	0
n	143	113	3	0
return	144	114	2	0
answer	145	115	1	0

11 21:
get_init_string	1	0	43	34
new_one	11	2	33	24
win_map	13	4	31	22
get_init_string	17	8	27	18
new_one	18	9	26	17
get_init_string	25	16	19	10
new_one	26	17	18	9
return	8	0	36	27
last	9	0	35	26
else	10	1	34	25
=	12	3	32	23
last	14	5	30	21
s1	15	6	29	20
=	16	7	28	19
0	19	10	25	16
n	20	11	24	15
-	21	12	23	14
1	22	13	22	13
s2	23	14	21	12
=	24	15	20	11
1	27	18	17	8
n	28	19	16	7
-	29	20	15	6
1	30	21	14	5
if	31	22	13	4
s1	32	23	12	3
<	33	24	11	2
s2	34	25	10	1
return	35	26	9	0
s1	36	27	8	0
+	37	28	7	0
s2	38	29	6	0
else	39	30	5	0
return	40	31	4	0
s2	41	32	3	0
+	42	33	2	0
s1	43	34	1	0


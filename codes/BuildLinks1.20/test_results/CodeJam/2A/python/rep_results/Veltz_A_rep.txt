27 32:
gcd	1	0	22	17
a	2	0	21	16
b	3	0	20	15
a	4	0	19	14
=	5	0	18	13
abs	6	1	17	12
a	7	2	16	11
b	8	3	15	10
=	9	4	14	9
abs	10	5	13	8
b	11	6	12	7
while	12	7	11	6
a	13	8	10	5
a	14	9	9	4
b	15	10	8	3
=	16	11	7	2
b	17	12	6	1
%	18	13	5	0
a	19	14	4	0
a	20	15	3	0
return	21	16	2	0
b	22	17	1	0

33 34:
lcm	1	0	11	8
gcd	9	6	3	0
b	3	0	9	6
return	4	1	8	5
a	5	2	7	4
*	6	3	6	3
b	7	4	5	2
//	8	5	4	1
a	10	7	2	0
b	11	8	1	0

40 78:
mup	1	0	164	131
p_2	61	28	104	71
r_2	71	38	94	61
s_2	81	48	84	51
p_2	87	54	78	45
mup	92	59	73	40
r_2	96	63	69	36
mup	100	67	65	32
s_2	105	72	60	27
r_2	107	74	58	25
mup	112	79	53	20
p_2	115	82	50	17
mup	120	87	45	12
s_2	125	92	40	7
s_2	127	94	38	5
mup	132	99	33	0
p_2	135	102	30	0
mup	140	107	25	0
r_2	144	111	21	0
return	20	0	145	112
none	21	0	144	111
if	22	0	143	110
r	23	0	142	109
==	24	0	141	108
0	25	0	140	107
if	26	0	139	106
p	27	0	138	105
==	28	0	137	104
1	29	0	136	103
and	30	0	135	102
s	31	0	134	101
==	32	0	133	100
1	33	0	132	99
return	34	1	131	98
ps	35	2	130	97
else	36	3	129	96
return	37	4	128	95
none	38	5	127	94
if	39	6	126	93
s	40	7	125	92
==	41	8	124	91
0	42	9	123	90
if	43	10	122	89
r	44	11	121	88
==	45	12	120	87
1	46	13	119	86
and	47	14	118	85
p	48	15	117	84
==	49	16	116	83
1	50	17	115	82
return	51	18	114	81
pr	52	19	113	80
else	53	20	112	79
return	54	21	111	78
none	55	22	110	77
p2	56	23	109	76
=	57	24	108	75
p	58	25	107	74
/	59	26	106	73
2	60	27	105	72
=	62	29	103	70
p	63	30	102	69
%	64	31	101	68
2	65	32	100	67
r2	66	33	99	66
=	67	34	98	65
r	68	35	97	64
/	69	36	96	63
2	70	37	95	62
=	72	39	93	60
r	73	40	92	59
%	74	41	91	58
2	75	42	90	57
s2	76	43	89	56
=	77	44	88	55
s	78	45	87	54
/	79	46	86	53
2	80	47	85	52
=	82	49	83	50
s	83	50	82	49
%	84	51	81	48
2	85	52	80	47
if	86	53	79	46
==	88	55	77	44
0	89	56	76	43
first	90	57	75	42
=	91	58	74	41
p2	93	60	72	39
r2	94	61	71	38
+	95	62	70	37
s2	97	64	68	35
second	98	65	67	34
=	99	66	66	33
p2	101	68	64	31
r2	102	69	63	30
s2	103	70	62	29
+	104	71	61	28
elif	106	73	59	26
==	108	75	57	24
0	109	76	56	23
first	110	77	55	22
=	111	78	54	21
p2	113	80	52	19
+	114	81	51	18
r2	116	83	49	16
s2	117	84	48	15
second	118	85	47	14
=	119	86	46	13
p2	121	88	44	11
r2	122	89	43	10
s2	123	90	42	9
+	124	91	41	8
elif	126	93	39	6
==	128	95	37	4
0	129	96	36	3
first	130	97	35	2
=	131	98	34	1
p2	133	100	32	0
+	134	101	31	0
r2	136	103	29	0
s2	137	104	28	0
second	138	105	27	0
=	139	106	26	0
p2	141	108	24	0
r2	142	109	23	0
+	143	110	22	0
s2	145	112	20	0
if	146	113	19	0
first	147	114	18	0
is	148	115	17	0
none	149	116	16	0
or	150	117	15	0
second	151	118	14	0
is	152	119	13	0
none	153	120	12	0
or	154	121	11	0
first	155	122	10	0
==	156	123	9	0
second	157	124	8	0
return	158	125	7	0
none	159	126	6	0
else	160	127	5	0
return	161	128	4	0
first	162	129	3	0
+	163	130	2	0
second	164	131	1	0

15 25:
processinputline	1	0	48	38
inputtype	3	0	46	36
inputnumber	6	0	43	33
inputseparator	9	0	40	30
inputline	12	2	37	27
inputnumber	18	8	31	21
inputvector	21	11	28	18
inputline	23	13	26	16
inputseparator	25	15	24	14
inputvector	27	17	22	12

37 38:
lcmlist	1	0	6	4
reduce	4	2	3	1

80 100:
outputfile	3	0	61	48
processinputline	6	0	58	45
processinputline	18	5	46	33
mup	22	9	42	29
outputline	37	24	27	14
outputline	56	43	8	0
\r\n	58	45	6	0
outputfile	59	46	5	0
outputline	61	48	3	0
outputline	63	50	1	0
t	12	0	52	39
_	13	0	51	38
r	14	1	50	37
p	15	2	49	36
s	16	3	48	35
=	17	4	47	34
inputfile	19	6	45	32
result	20	7	44	31
=	21	8	43	30
p	23	10	41	28
r	24	11	40	27
s	25	12	39	26
if	26	13	38	25
result	27	14	37	24
is	28	15	36	23
none	29	16	35	22
o	30	17	34	21
=	31	18	33	20
impossible	32	19	32	19
else	33	20	31	18
o	34	21	30	17
=	35	22	29	16
result	36	23	28	15
=	38	25	26	13
case	39	26	25	12
#	40	27	24	11
+	41	28	23	10
str	42	29	22	9
t	43	30	21	8
+	44	31	20	7
1	45	32	19	6
+	46	33	18	5
:	47	34	17	4
+	48	35	16	3
o	49	36	15	2
if	50	37	14	1
t	51	38	13	0
<	52	39	12	0
t	53	40	11	0
-	54	41	10	0
1	55	42	9	0
+=	57	44	7	0
write	60	47	4	0
print	62	49	2	0

35 36:
gcdlist	1	0	6	4
reduce	4	2	3	1


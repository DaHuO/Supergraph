53 57:
run_test	11	8	4	1
main	1	0	14	11
t	2	0	13	10
=	3	0	12	9
int	4	1	11	8
input	5	2	10	7
for	6	3	9	6
t	7	4	8	5
in	8	5	7	4
range	9	6	6	3
t	10	7	5	2
t	12	9	3	0
+	13	10	2	0
1	14	11	1	0

15 22:
children	7	1	22	16
node	11	5	18	12
expand_chars	12	6	17	11
children	24	18	5	0
self	4	0	25	19
val	5	0	24	18
self	6	0	23	17
=	8	2	21	15
list	9	3	20	14
map	10	4	19	13
self	13	7	16	10
val	14	8	15	9
self	15	9	14	8
val	16	10	13	7
=	17	11	12	6
none	18	12	11	5
else	19	13	10	4
for	20	14	9	3
c	21	15	8	2
in	22	16	7	1
self	23	17	6	0
c	25	19	4	0
expand	26	20	3	0
return	27	21	2	0
self	28	22	1	0

49 51:
run_test	1	0	17	13
nums	3	0	15	11
compute_rps	15	11	3	0
nums	17	13	1	0

12 13:
def	0	0	8	6
__init__	1	0	7	5
self	2	0	6	4
val	3	1	5	3
self	4	2	4	2
val	5	3	3	1
=	6	4	2	0
val	7	5	1	0

24 27:
children	18	13	4	0
sort	1	0	21	16
self	2	0	20	15
if	3	0	19	14
not	4	0	18	13
self	5	0	17	12
val	6	1	16	11
self	7	2	15	10
val	8	3	14	9
=	9	4	13	8
join	10	5	12	7
sorted	11	6	11	6
c	12	7	10	5
sort	13	8	9	4
for	14	9	8	3
c	15	10	7	2
in	16	11	6	1
self	17	12	5	0
return	19	14	3	0
self	20	15	2	0
val	21	16	1	0

3 9:
expand_chars	1	0	20	15
c	2	0	19	14
if	3	0	18	13
c	4	0	17	12
==	5	0	16	11
r	6	1	15	10
return	7	2	14	9
rs	8	3	13	8
elif	9	4	12	7
c	10	5	11	6
==	11	6	10	5
p	12	7	9	4
return	13	8	8	3
pr	14	9	7	2
elif	15	10	6	1
c	16	11	5	0
==	17	12	4	0
s	18	13	3	0
return	19	14	2	0
ps	20	15	1	0

59 63:
extensive	1	0	17	13
random	3	0	15	11
100000	8	4	10	6
compute_insomnia	9	5	9	5

43 47:
compute_rps	1	0	21	16
compute_rps_tree	8	3	14	9
r	3	0	19	14
p	4	0	18	13
s	5	0	17	12
res	6	1	16	11
=	7	2	15	10
n	9	4	13	8
r	10	5	12	7
p	11	6	11	6
s	12	7	10	5
if	13	8	9	4
res	14	9	8	3
==	15	10	7	2
none	16	11	6	1
return	17	12	5	0
impossible	18	13	4	0
return	19	14	3	0
res	20	15	2	0
sort	21	16	1	0

30 41:
compute_rps_tree	1	0	74	59
node	11	0	64	49
compute_rps_tree	63	48	12	0
p	4	0	71	56
s	5	0	70	55
if	6	0	69	54
n	7	0	68	53
==	8	0	67	52
0	9	0	66	51
return	10	0	65	50
r	12	0	63	48
*	13	0	62	47
r	14	0	61	46
+	15	0	60	45
p	16	1	59	44
*	17	2	58	43
p	18	3	57	42
+	19	4	56	41
s	20	5	55	40
*	21	6	54	39
s	22	7	53	38
a	23	8	52	37
b	24	9	51	36
c	25	10	50	35
=	26	11	49	34
sorted	27	12	48	33
r	28	13	47	32
p	29	14	46	31
s	30	15	45	30
if	31	16	44	29
a	32	17	43	28
+	33	18	42	27
b	34	19	41	26
<	35	20	40	25
c	36	21	39	24
return	37	22	38	23
none	38	23	37	22
left	39	24	36	21
=	40	25	35	20
r	41	26	34	19
+	42	27	33	18
p	43	28	32	17
-	44	29	31	16
s	45	30	30	15
rp	46	31	29	14
=	47	32	28	13
left	48	33	27	12
//	49	34	26	11
2	50	35	25	10
rs	51	36	24	9
=	52	37	23	8
r	53	38	22	7
-	54	39	21	6
rp	55	40	20	5
sp	56	41	19	4
=	57	42	18	3
p	58	43	17	2
-	59	44	16	1
rp	60	45	15	0
res	61	46	14	0
=	62	47	13	0
n	64	49	11	0
-	65	50	10	0
1	66	51	9	0
rs	67	52	8	0
rp	68	53	7	0
sp	69	54	6	0
return	70	55	5	0
res	71	56	4	0
and	72	57	3	0
res	73	58	2	0
expand	74	59	1	0


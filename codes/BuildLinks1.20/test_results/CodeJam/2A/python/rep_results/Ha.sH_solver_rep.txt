121 141:
input_f	29	11	59	41
mapping	30	12	58	40
multiprocess_imap	32	14	56	38
parse_file	39	21	49	31
input_f	40	22	48	30
generator	43	25	45	27
mapping	46	28	42	24
open_output_file	62	44	26	8
output_f	65	47	23	5
timing_message	66	48	22	4
execution	68	50	20	2
timeit	75	57	13	0
timing_message	76	58	12	0
generator	82	64	6	0
print_result	83	65	5	0
output_f	86	68	2	0
multiprocessing	16	0	72	54
=	17	0	71	53
true	18	0	70	52
timing	19	1	69	51
=	20	2	68	50
true	21	3	67	49
display	22	4	66	48
=	23	5	65	47
true	24	6	64	46
with	25	7	63	45
open	26	8	62	44
input_file	27	9	61	43
as	28	10	60	42
=	31	13	57	39
if	33	15	55	37
multiprocessing	34	16	54	36
else	35	17	53	35
map	36	18	52	34
parser	37	19	51	33
=	38	20	50	32
lines_per_case	41	23	47	29
header	42	24	46	28
=	44	26	44	26
enumerate	45	27	43	25
solver	47	29	41	23
parser	48	30	40	22
start	49	31	39	21
if	50	32	38	20
output_file	51	33	37	19
is	52	34	36	18
true	53	35	35	17
output_file	54	36	34	16
=	55	37	33	15
input_file	56	38	32	14
rstrip	57	39	31	13
.in	58	40	30	12
+	59	41	29	11
.out	60	42	28	10
with	61	43	27	9
output_file	63	45	25	7
as	64	46	24	6
=	67	49	21	3
time	69	51	19	1
for	70	52	18	0
{}	71	53	17	0
format	72	54	16	0
input_file	73	55	15	0
with	74	56	14	0
timing	77	59	11	0
for	78	60	10	0
case	79	61	9	0
result	80	62	8	0
in	81	63	7	0
case	84	66	4	0
result	85	67	3	0
display	87	69	1	0

69 77:
check_function	1	0	29	23
module	3	0	27	21
modules	6	0	24	18
__module__	8	2	22	16
getattr	10	4	20	14
module	11	5	19	13

196 205:
get_command_line_kwargs	11	6	10	5
from_cli	1	0	20	15
args	2	0	19	14
=	3	0	18	13
none	4	0	17	12
name	5	0	16	11
=	6	1	15	10
func	7	2	14	9
__name__	8	3	13	8
kwargs	9	4	12	7
=	10	5	11	6
name	12	7	9	4
args	13	8	8	3
=	14	9	7	2
args	15	10	6	1
return	16	11	5	0
func	17	12	4	0
solve	18	13	3	0
**	19	14	2	0
kwargs	20	15	1	0

112 118:
print_result	1	0	28	22
case	2	0	27	21
result	3	0	26	20
output	4	0	25	19
=	5	0	24	18
none	6	0	23	17
display	7	1	22	16
=	8	2	21	15
true	9	3	20	14
line	10	4	19	13
=	11	5	18	12
case	12	6	17	11
#{}:	13	7	16	10
{}	14	8	15	9
format	15	9	14	8
case	16	10	13	7
result	17	11	12	6
if	18	12	11	5
display	19	13	10	4
print	20	14	9	3
line	21	15	8	2
if	22	16	7	1
output	23	17	6	0
output	24	18	5	0
write	25	19	4	0
line	26	20	3	0
+	27	21	2	0
\n	28	22	1	0

49 56:
contextmanager	0	0	24	19
timeit	2	0	22	17
message	3	0	21	16
{}:	16	11	8	3
{:.3f}	17	12	7	2

88 109:
parse_file	1	0	82	65
expression	9	0	74	57
isinstance	11	0	72	55
expression	26	9	57	40
expression	28	11	55	38
lower	29	12	54	37
dynamic	31	14	52	35
expression	41	24	42	25
variables	46	29	37	20
eval	60	43	23	6
expression	61	44	22	5
variables	62	45	21	4
lines_per_case	15	0	68	51
for	16	0	67	50
_	17	0	66	49
in	18	1	65	48
range	19	2	64	47
header	20	3	63	46
next	21	4	62	45
f	22	5	61	44
while	23	6	60	43
true	24	7	59	42
if	25	8	58	41
and	27	10	56	39
==	30	13	53	36
lines	32	15	51	34
=	33	16	50	33
lines_per_case	34	17	49	32
=	35	18	48	31
int	36	19	47	30
next	37	20	46	29
f	38	21	45	28
strip	39	22	44	27
elif	40	23	43	26
lines	42	25	41	24
=	43	26	40	23
next	44	27	39	22
f	45	28	38	21
=	47	30	36	19
lines	48	31	35	18
lines	49	32	34	17
line	50	33	33	16
lines	51	34	32	15
0	52	35	31	14
args	53	36	30	13
lines	54	37	29	12
0	55	38	28	11
split	56	39	27	10
lines_per_case	57	40	26	9
=	58	41	25	8
int	59	42	24	7
else	63	46	20	3
lines	64	47	19	2
=	65	48	18	1
lines	66	49	17	0
+=	67	50	16	0
tuple	68	51	15	0
next	69	52	14	0
f	70	53	13	0
strip	71	54	12	0
for	72	55	11	0
_	73	56	10	0
in	74	57	9	0
range	75	58	8	0
lines_per_case	76	59	7	0
if	77	60	6	0
not	78	61	5	0
lines	79	62	4	0
return	80	63	3	0
yield	81	64	2	0
lines	82	65	1	0

168 210:
decorator	1	0	78	62
solve_func	3	0	76	60
solve_func	22	6	57	41
get_command_line_kwargs	57	41	22	6
check_function	75	59	4	0
solve	7	0	72	56
input_file	8	0	71	55
output_file	9	0	70	54
=	10	0	69	53
true	11	0	68	52
multiprocessing	12	0	67	51
=	13	0	66	50
true	14	0	65	49
timing	15	0	64	48
=	16	0	63	47
true	17	1	62	46
display	18	2	61	45
=	19	3	60	44
true	20	4	59	43
return	21	5	58	42
func	23	7	56	40
input_file	24	8	55	39
output_file	25	9	54	38
=	26	10	53	37
output_file	27	11	52	36
lines_per_case	28	12	51	35
=	29	13	50	34
lines_per_case	30	14	49	33
header	31	15	48	32
=	32	16	47	31
header	33	17	46	30
start	34	18	45	29
=	35	19	44	28
start	36	20	43	27
multiprocessing	37	21	42	26
=	38	22	41	25
multiprocessing	39	23	40	24
timing	40	24	39	23
=	41	25	38	22
timing	42	26	37	21
display	43	27	36	20
=	44	28	35	19
display	45	29	34	18
def	46	30	33	17
from_cli	47	31	32	16
args	48	32	31	15
=	49	33	30	14
none	50	34	29	13
name	51	35	28	12
=	52	36	27	11
func	53	37	26	10
__name__	54	38	25	9
kwargs	55	39	24	8
=	56	40	23	7
name	58	42	21	5
args	59	43	20	4
=	60	44	19	3
args	61	45	18	2
return	62	46	17	1
func	63	47	16	0
solve	64	48	15	0
**	65	49	14	0
kwargs	66	50	13	0
func	67	51	12	0
solve	68	52	11	0
=	69	53	10	0
solve	70	54	9	0
func	71	55	8	0
from_cli	72	56	7	0
=	73	57	6	0
from_cli	74	58	5	0
func	76	60	3	0
return	77	61	2	0
func	78	62	1	0

219 222:
square	2	0	8	6
def	1	0	9	7
lines	3	1	7	5
return	4	2	6	4
int	5	3	5	3
lines	6	4	4	2
0	7	5	3	1
**	8	6	2	0
2	9	7	1	0

144 214:
decorator	15	0	87	66
solve_func	17	0	85	64
solve_func	36	15	66	45
get_command_line_kwargs	71	50	31	10
check_function	89	68	13	0
decorator	98	77	4	0
decorator	100	79	2	0
1	7	0	95	74
header	8	0	94	73
=	9	0	93	72
true	10	0	92	71
start	11	0	91	70
=	12	0	90	69
1	13	0	89	68
def	14	0	88	67
func	16	0	86	65
=	18	0	84	63
solve	19	0	83	62
def	20	0	82	61
solve	21	0	81	60
input_file	22	1	80	59
output_file	23	2	79	58
=	24	3	78	57
true	25	4	77	56
multiprocessing	26	5	76	55
=	27	6	75	54
true	28	7	74	53
timing	29	8	73	52
=	30	9	72	51
true	31	10	71	50
display	32	11	70	49
=	33	12	69	48
true	34	13	68	47
return	35	14	67	46
func	37	16	65	44
input_file	38	17	64	43
output_file	39	18	63	42
=	40	19	62	41
output_file	41	20	61	40
lines_per_case	42	21	60	39
=	43	22	59	38
lines_per_case	44	23	58	37
header	45	24	57	36
=	46	25	56	35
header	47	26	55	34
start	48	27	54	33
=	49	28	53	32
start	50	29	52	31
multiprocessing	51	30	51	30
=	52	31	50	29
multiprocessing	53	32	49	28
timing	54	33	48	27
=	55	34	47	26
timing	56	35	46	25
display	57	36	45	24
=	58	37	44	23
display	59	38	43	22
def	60	39	42	21
from_cli	61	40	41	20
args	62	41	40	19
=	63	42	39	18
none	64	43	38	17
name	65	44	37	16
=	66	45	36	15
func	67	46	35	14
__name__	68	47	34	13
kwargs	69	48	33	12
=	70	49	32	11
name	72	51	30	9
args	73	52	29	8
=	74	53	28	7
args	75	54	27	6
return	76	55	26	5
func	77	56	25	4
solve	78	57	24	3
**	79	58	23	2
kwargs	80	59	22	1
func	81	60	21	0
solve	82	61	20	0
=	83	62	19	0
solve	84	63	18	0
func	85	64	17	0
from_cli	86	65	16	0
=	87	66	15	0
from_cli	88	67	14	0
func	90	69	12	0
return	91	70	11	0
func	92	71	10	0
if	93	72	9	0
func	94	73	8	0
is	95	74	7	0
none	96	75	6	0
return	97	76	5	0
return	99	78	3	0
func	101	80	1	0

80 85:
multiprocess_imap	1	0	19	15
iterator	3	0	17	13
imap	11	7	9	5
iterator	13	9	7	3

59 66:
contextmanager	0	0	17	13
open_output_file	2	0	15	11
if	4	0	13	9
not	5	1	12	8
output_filename	6	2	11	7
yield	7	3	10	6
return	8	4	9	5
with	9	5	8	4
open	10	6	7	3
output_filename	11	7	6	2
w	12	8	5	1
as	13	9	4	0
output_file	14	10	3	0
yield	15	11	2	0
output_file	16	12	1	0

17 46:
get_command_line_kwargs	1	0	151	120
desc	6	0	146	115
the	9	0	143	112
problem	11	0	141	110
using	12	0	140	109
given	14	0	138	107
file.	16	0	136	105
default.	21	0	131	100
argparse	24	0	128	97
argumentparser	25	0	127	96
prog	26	0	126	95
description	29	0	123	92
desc	31	0	121	90
metavar	37	6	115	84
help	43	12	109	78
to	46	15	106	75
--output	50	19	102	71
-o	51	20	101	70
metavar	52	21	100	69
dest	58	27	94	63
default	61	30	91	60
help	64	33	88	57
specific	68	37	84	53
--no-result	72	41	80	49
-nr	73	42	79	48
dest	74	43	78	47
store_false	79	48	73	42
default	80	49	72	41
help	83	52	69	38
do	85	54	67	36
the	88	57	64	33

170 188:
solve_func	16	12	1	0
solve	1	0	16	12
input_file	2	0	15	11
output_file	3	0	14	10
=	4	0	13	9
true	5	1	12	8
multiprocessing	6	2	11	7
=	7	3	10	6
true	8	4	9	5
timing	9	5	8	4
=	10	6	7	3
true	11	7	6	2
display	12	8	5	1
=	13	9	4	0
true	14	10	3	0
return	15	11	2	0


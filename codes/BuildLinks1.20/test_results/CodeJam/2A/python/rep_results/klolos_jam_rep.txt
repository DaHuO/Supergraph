70 71:
splitline	1	0	7	5
f	2	0	6	4
return	3	1	5	3
map	4	2	4	2
f	5	3	3	1
readline	6	4	2	0
split	7	5	1	0

15 20:
is_allowed	1	0	20	15
allowed	8	3	13	8
v2	3	0	18	13
v3	4	0	17	12
for	5	0	16	11
a	6	1	15	10
in	7	2	14	9
if	9	4	12	7
set	10	5	11	6
v1	11	6	10	5
v2	12	7	9	4
v3	13	8	8	3
==	14	9	7	2
set	15	10	6	1
a	16	11	5	0
return	17	12	4	0
true	18	13	3	0
return	19	14	2	0
false	20	15	1	0

25 51:
prps	44	0	214	162
prrs	50	0	208	156
psrs	53	1	205	153
v2	3	0	255	203
v3	4	0	254	202
if	5	0	253	201
v1	6	0	252	200
+	7	0	251	199
v2	8	0	250	198
+	9	0	249	197
v3	10	0	248	196
==	11	0	247	195
2	12	0	246	194
if	13	0	245	193
v1	14	0	244	192
==	15	0	243	191
0	16	0	242	190
return	17	0	241	189
rs	18	0	240	188
elif	19	0	239	187
v2	20	0	238	186
==	21	0	237	185
0	22	0	236	184
return	23	0	235	183
ps	24	0	234	182
elif	25	0	233	181
v3	26	0	232	180
==	27	0	231	179
0	28	0	230	178
return	29	0	229	177
pr	30	0	228	176
elif	31	0	227	175
v1	32	0	226	174
+	33	0	225	173
v2	34	0	224	172
+	35	0	223	171
v3	36	0	222	170
==	37	0	221	169
4	38	0	220	168
if	39	0	219	167
v1	40	0	218	166
==	41	0	217	165
2	42	0	216	164
return	43	0	215	163
elif	45	0	213	161
v2	46	0	212	160
==	47	0	211	159
2	48	0	210	158
return	49	0	209	157
else	51	0	207	155
return	52	0	206	154
elif	54	2	204	152
v1	55	3	203	151
>	56	4	202	150
v2	57	5	201	149
and	58	6	200	148
v1	59	7	199	147
>	60	8	198	146
v3	61	9	197	145
return	62	10	196	144
blocks	63	11	195	143
v1	64	12	194	142
/	65	13	193	141
2	66	14	192	140
v2	67	15	191	139
/	68	16	190	138
2	69	17	189	137
+	70	18	188	136
1	71	19	187	135
v3	72	20	186	134
/	73	21	185	133
2	74	22	184	132
+	75	23	183	131
blocks	76	24	182	130
v1	77	25	181	129
/	78	26	180	128
2	79	27	179	127
v2	80	28	178	126
/	81	29	177	125
2	82	30	176	124
v3	83	31	175	123
/	84	32	174	122
2	85	33	173	121
+	86	34	172	120
1	87	35	171	119
elif	88	36	170	118
v2	89	37	169	117
>	90	38	168	116
v1	91	39	167	115
and	92	40	166	114
v2	93	41	165	113
>	94	42	164	112
v3	95	43	163	111
return	96	44	162	110
blocks	97	45	161	109
v1	98	46	160	108
/	99	47	159	107
2	100	48	158	106
+	101	49	157	105
1	102	50	156	104
v2	103	51	155	103
/	104	52	154	102
2	105	53	153	101
v3	106	54	152	100
/	107	55	151	99
2	108	56	150	98
+	109	57	149	97
blocks	110	58	148	96
v1	111	59	147	95
/	112	60	146	94
2	113	61	145	93
v2	114	62	144	92
/	115	63	143	91
2	116	64	142	90
v3	117	65	141	89
/	118	66	140	88
2	119	67	139	87
+	120	68	138	86
1	121	69	137	85
elif	122	70	136	84
v3	123	71	135	83
>	124	72	134	82
v1	125	73	133	81
and	126	74	132	80
v3	127	75	131	79
>	128	76	130	78
v2	129	77	129	77
return	130	78	128	76
blocks	131	79	127	75
v1	132	80	126	74
/	133	81	125	73
2	134	82	124	72
+	135	83	123	71
1	136	84	122	70
v2	137	85	121	69
/	138	86	120	68
2	139	87	119	67
v3	140	88	118	66
/	141	89	117	65
2	142	90	116	64
+	143	91	115	63
blocks	144	92	114	62
v1	145	93	113	61
/	146	94	112	60
2	147	95	111	59
v2	148	96	110	58
/	149	97	109	57
2	150	98	108	56
+	151	99	107	55
1	152	100	106	54
v3	153	101	105	53
/	154	102	104	52
2	155	103	103	51
elif	156	104	102	50
v3	157	105	101	49
<	158	106	100	48
v1	159	107	99	47
and	160	108	98	46
v3	161	109	97	45
<	162	110	96	44
v2	163	111	95	43
return	164	112	94	42
blocks	165	113	93	41
v1	166	114	92	40
/	167	115	91	39
2	168	116	90	38
+	169	117	89	37
1	170	118	88	36
v2	171	119	87	35
/	172	120	86	34
2	173	121	85	33
v3	174	122	84	32
/	175	123	83	31
2	176	124	82	30
+	177	125	81	29
blocks	178	126	80	28
v1	179	127	79	27
/	180	128	78	26
2	181	129	77	25
v2	182	130	76	24
/	183	131	75	23
2	184	132	74	22
+	185	133	73	21
1	186	134	72	20
v3	187	135	71	19
/	188	136	70	18
2	189	137	69	17
elif	190	138	68	16
v2	191	139	67	15
<	192	140	66	14
v1	193	141	65	13
and	194	142	64	12
v2	195	143	63	11
<	196	144	62	10
v3	197	145	61	9
return	198	146	60	8
blocks	199	147	59	7
v1	200	148	58	6
/	201	149	57	5
2	202	150	56	4
+	203	151	55	3
1	204	152	54	2
v2	205	153	53	1
/	206	154	52	0
2	207	155	51	0
v3	208	156	50	0
/	209	157	49	0
2	210	158	48	0
+	211	159	47	0
blocks	212	160	46	0
v1	213	161	45	0
/	214	162	44	0
2	215	163	43	0
v2	216	164	42	0
/	217	165	41	0
2	218	166	40	0
v3	219	167	39	0
/	220	168	38	0
2	221	169	37	0
+	222	170	36	0
1	223	171	35	0
elif	224	172	34	0
v1	225	173	33	0
<	226	174	32	0
v2	227	175	31	0
and	228	176	30	0
v1	229	177	29	0
<	230	178	28	0
v3	231	179	27	0
return	232	180	26	0
blocks	233	181	25	0
v1	234	182	24	0
/	235	183	23	0
2	236	184	22	0
v2	237	185	21	0
/	238	186	20	0
2	239	187	19	0
+	240	188	18	0
1	241	189	17	0
v3	242	190	16	0
/	243	191	15	0
2	244	192	14	0
+	245	193	13	0
blocks	246	194	12	0
v1	247	195	11	0
/	248	196	10	0
2	249	197	9	0
v2	250	198	8	0
/	251	199	7	0
2	252	200	6	0
v3	253	201	5	0
/	254	202	4	0
2	255	203	3	0
+	256	204	2	0
1	257	205	1	0

74 76:
print_result	8	5	5	2
main	1	0	12	9
for	2	0	11	8
i	3	0	10	7
in	4	1	9	6
range	5	2	8	5
int	6	3	7	4
readline	7	4	6	3
solve	9	6	4	1
i	10	7	3	0
+	11	8	2	0
1	12	9	1	0

54 59:
splitline	7	2	15	10
is_allowed	11	6	11	6
_	2	0	20	15
v2	3	0	19	14
v1	4	0	18	13
v3	5	0	17	12
=	6	1	16	11
int	8	3	14	9
if	9	4	13	8
not	10	5	12	7
v1	12	7	10	5
v2	13	8	9	4
v3	14	9	8	3
return	15	10	7	2
impossible	16	11	6	1
return	17	12	5	0
blocks	18	13	4	0
v1	19	14	3	0
v2	20	15	2	0
v3	21	16	1	0

62 63:
print_result	1	0	12	9
#%s:	8	5	5	2
i	3	0	10	7
sys	4	1	9	6
stdout	5	2	8	5
write	6	3	7	4
case	7	4	6	3
%s\n	9	6	4	1
%	10	7	3	0
i	11	8	2	0
result	12	9	1	0

66 67:
def	0	0	8	6
readline	1	0	7	5
return	2	0	6	4
sys	3	1	5	3
stdin	4	2	4	2
readline	5	3	3	1
rstrip	6	4	2	0
\n	7	5	1	0

6 12:
allowed	1	0	31	24
a	2	0	30	23
=	3	0	29	22
1	4	0	28	21
1	5	0	27	20
0	6	0	26	19
for	7	0	25	18
i	8	1	24	17
in	9	2	23	16
range	10	3	22	15
12	11	4	21	14
v1	12	5	20	13
v2	13	6	19	12
v3	14	7	18	11
=	15	8	17	10
a	16	9	16	9
-	17	10	15	8
1	18	11	14	7
a	19	12	13	6
append	20	13	12	5
v1	21	14	11	4
+	22	15	10	3
v2	23	16	9	2
v1	24	17	8	1
+	25	18	7	0
v3	26	19	6	0
v2	27	20	5	0
+	28	21	4	0
v3	29	22	3	0
return	30	23	2	0
a	31	24	1	0


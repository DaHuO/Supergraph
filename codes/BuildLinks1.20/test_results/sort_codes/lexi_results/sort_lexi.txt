def lsort_on_data size with open lrandom.json as ip data = json load ip arr = data str size dicts = ts = insertion arr dicts random = ts with open ldatasetssorted_list.json as ip1 data_ss = json load ip1 arr_sl = data_ss str size tss = insertion arr_sl dicts sorted = tss with open lreverse_list.json as ip2 data_rs = json load ip2 arr_rs = data_rs str size trs = insertion arr_rs dicts reverse = trs with open lnearly_sorted.json as ip3 data_ns = json load ip3 arr_ns = data_ns str size tns = insertion arr_ns dicts nearly_sorted = tns with open lfewunique.json as ip4 data_fw = json load ip4 arr_fw = data_fw str size tfw = insertion arr_fw dicts fewunique = tfw return dicts 		58 91
def sort_on_data size with open random.json as ip data = json load ip arr = data str size dicts = ts = insertion arr dicts random = ts with open datasetssorted_list.json as ip1 data_ss = json load ip1 arr_sl = data_ss str size tss = insertion arr_sl dicts sorted = tss with open reverse_list.json as ip2 data_rs = json load ip2 arr_rs = data_rs str size trs = insertion arr_rs dicts reverse = trs with open nearly_sorted.json as ip3 data_ns = json load ip3 arr_ns = data_ns str size tns = insertion arr_ns dicts nearly_sorted = tns with open fewunique.json as ip4 data_fw = json load ip4 arr_fw = data_fw str size tfw = insertion arr_fw dicts fewunique = tfw return dicts 		23 56
def insertion arr start = time clock for i in range 1 len arr j = i - 1 key = arr i while j >= 0 and key < arr j arr j + 1 = arr j j = j - 1 arr j + 1 = key return str round time clock - start * 1000 5 		10 20
def main print content-type: text/html print form = cgi fieldstorage if form has_key param1 if form param1 value == 1000000 or form param1 value == 2000000 sys setrecursionlimit 2000009 print lsort_on_data form param1 value else print sort_on_data form param1 value 		93 104

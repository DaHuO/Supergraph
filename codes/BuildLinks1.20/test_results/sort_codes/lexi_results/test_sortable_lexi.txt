def test_all self seqs = range self n list reversed range self n l = range self n l 0 l - 1 = l - 1 l 0 seqs append l for i in range 5 l = range self n random shuffle l seqs append l for seq in seqs for k v in algos algorithms items l = sortable tracklist seq v l if not x i for x in l == range self n print l raise assertionerror %s failed to sort. % k 		26 47
def test_simple self l = 1 2 3 t = sortable tracklist l assert t 0 path == 0 t 0 t 1 = t 1 t 0 t log assert t 1 path == 0 1 		8 14
def test_read_paths self s = cstringio stringio 3\n 3\n r = sortable read_paths s for i in r if i i == 1 assert i path == 0 1 elif i i == 2 assert i path == 1 0 elif i i == 3 assert i path == 2 2 		51 63
def test_bitonicsort self algos bitonicsort bitonicsort sortable tracklist range 2 ** 1 algos bitonicsort bitonicsort sortable tracklist range 2 ** 3 libpry raises assertionerror algos bitonicsort bitonicsort range 3 libpry raises assertionerror algos bitonicsort bitonicsort range 9 		20 24

def test_all list_of_functions test_sequence prompt = count = 100 print prompt for sort in list_of_functions test sort test_sequence count print 		42 47
def perform_swaps sequence n for _ in range n length = len sequence i = random randrange length j = i + 1 % length sequence i sequence j = sequence j sequence i return sequence 		19 26
def test sort sequence count = 100 builtin = sorted sequence copy = sequence testrun = sort copy recieved = testrun if testrun else copy template = {} sort worked incorrectly. \nrecieved: {} \nexpected: {} error_message = template format sort __name__ recieved builtin assert testrun == builtin or copy == builtin error_message time = timeit lambda sort sequence number = count / count print {:>7.5f} : {} format time sort __name__ 		29 39
def main my_list = random randint 0 100 for _ in range 100 almost_sorted = perform_swaps my_list 5 already_sorted = sorted my_list all_same = 1 for _ in range 100 sorts = sorted pysort bubble bubble_naive pysort bubble bubble_optimized pysort bubble bubble_optimized_with_flag pysort bubble bubble_final_position pysort insertion insertion pysort insertion insertion_optimized pysort insertion insertion_optimized_alt pysort quick quick_random pysort quick quick_median pysort quick quick_inplace_random pysort quick quick_inplace_median pysort quick quick_inplace_repeat pysort merge merge_sort pysort heap heap_sort test_all sorts my_list with a random shuffled list: 10 test_all sorts almost_sorted with a list that is almost sorted: 10 test_all sorts already_sorted with a list that is already sorted: 10 test_all sorts all_same with a list containing all the same item: 10 		50 74

def solve_wrapper args case_no _args = args print Solving case #%s % case_no return case_no solve * _args 		30 33
def run pool = None inp = sys argv 1 outp = %s.out % inp split . 0 with open inp r as _file open outp w as out _cases = int _file readline arguments = for _case in range _cases N R P S = tuple int x for x in _file readline split  arguments append _case + 1 N R P S if pool == None results = list map solve_wrapper arguments else results = sorted list pool imap_unordered solve_wrapper arguments key = lambda r r 0 assert len results == _cases for _case result in results out write Case #%s: %s\n % _case result 		8 28
def solve N R P S pl = order lineup N P rl = order lineup N R sl = order lineup N S for l in sorted pl rl sl if count_ok P R S l return l return IMPOSSIBLE 		61 67
def count_ok P R S ln if ln count P != P return False if ln count R != R return False if ln count S != S return False return True 		55 59
def order ln l = len ln // 2 if l == 0 return ln else a = order ln l b = order ln l if a < b return a + b else return b + a 		45 53
def lineup N top if N == 0 return top prev = P PR R RS S PS top return lineup N - 1 prev 0 + lineup N - 1 prev 1 		36 43

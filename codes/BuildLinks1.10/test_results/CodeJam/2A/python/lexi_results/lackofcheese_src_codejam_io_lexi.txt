def close self for f in self _files if f != sys stdout f close 		23 27
def write self data for f in self _files f write data if f == sys stdout f flush 		29 35
def make_archive module_path paths = set target = os path join os path split module_path 0 src.zip paths add os path realpath module_path for module_name in sys modules try path = inspect getsourcefile sys modules module_name if path startswith os environ GOOGLE_DRIVE paths add path except TypeError AttributeError pass print file = sys stderr try os remove target print Deleted {} - remaking format target file = sys stderr except OSError pass archive = zipfile ZipFile target w for path in paths filename = os path basename path archive write path filename print Added {} format filename file = sys stderr archive close 		90 113
def process_input pfun p0 = lambda f int f readline None module_path = None argv = None if not argv argv = sys argv 1 options = set for arg in argv if arg startswith - argv remove arg options update arg 1 filename = argv 0 if argv else test.in targets = if d in options root ext = os path splitext filename if ext == .out root += .out targets append open root + .out w if not targets or c in options targets append sys stdout if n in options module_path = None f_out = MultiOutput targets with open filename as f_in num_cases other_data = p0 f_in for case_no in range 1 num_cases + 1 pfun f_in f_out case_no other_data f_out close if module_path is not None make_archive module_path 		37 88
def __init__ self files self _files = list files 		19 21

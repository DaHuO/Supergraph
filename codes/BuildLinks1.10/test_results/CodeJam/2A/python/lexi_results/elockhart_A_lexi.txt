def solve_case n r p s if not okay r p s return IMPOSSIBLE return build r p s 		49 51
def readint return int fi readline 		22 23
def okay s if len s == 1 return True t = for I in range len s // 2 if s 2 * I == s 2 * I + 1 return False t = t + winner s 2 * I s 2 * I + 1 return okay t 		53 59
def read_case return readints 		28 29
def print_solution case val = solve_case * case 1 msg = Case #{}: {} format case 0 val print msg return msg 		72 76
def readints return int X for X in fi readline split 		25 26
def winner a b return w min a b max a b 		62 63
def okay r p s if r + p + s <= 2 return max r p s < 2 return p <= r + s and r <= s + p and s <= p + r 		31 34
def solve_case n r p s sss = R * r + P * p + S * s poss = sorted join X for X in itertools permutations sss for P in poss if okay P return P return IMPOSSIBLE 		65 70
def build r p s print r p s if r + p + s == 1 return for R P S sss rR rP rS in zip pairs spair outcome if R <= r and S <= s and P <= p if okay r - R + rR s - S + rS p - P + rP continue return sss + build r - R + rR p - P + rP s - S + rS return ??? 		40 47

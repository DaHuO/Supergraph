def select_sort self arr = copy copy self array sort_track = copy copy arr 0 for i in reversed xrange len arr largest = 0 for j in xrange 1 i + 1 if arr largest < arr j largest = j temp = arr largest arr largest = arr i arr i = temp sort_track append copy copy arr largest return sort_track 		42 63
def insert_sort self arr = copy copy self array sort_track = copy copy arr 0 self _insert_sort_interval 1 len arr - 1 arr sort_track 1 return sort_track 		65 85
def _merge_sort_iter_1 self arr path_track mid = int len arr / 2 path_track append copy copy arr mid if len arr <= 1 return arr return self _merge self _merge_sort_iter arr mid path_track 		181 186
def __init__ self size self size = size self array = 		6 8
def quick_sort self arr = copy copy self array path_track = arr 0 self _quick_sort_iter arr path_track 0 len arr - 1 return path_track 		117 128
def _merge self list1 list2 final = while list1 and list2 final append list1 0 <= list2 0 and list1 pop 0 or list2 pop 0 final_list = final + list1 + list2 return final_list 		189 198
def _partion self arr lowindex highindex temp = arr lowindex arr lowindex = arr highindex + lowindex / 2 arr lowindex + highindex / 2 = temp pivot = arr lowindex lastsmall = lowindex for i in xrange lowindex + 1 highindex + 1 if arr i < pivot lastsmall += 1 temp = arr i arr i = arr lastsmall arr lastsmall = temp temp = arr lastsmall arr lastsmall = arr lowindex arr lowindex = temp return lastsmall 		141 164
def merge_sort_1 self arr = copy copy self array print arr path_track = copy copy arr 0 path_track append 0 sort_arr = self _merge_sort_iter arr path_track print sort_arr return path_track 		166 179
def _quick_sort_iter self arr path_track lowindex highindex pivotindex = 0 if lowindex < highindex pivotindex = self _partion arr lowindex highindex path_track append copy copy arr pivotindex self _quick_sort_iter arr path_track lowindex pivotindex - 1 self _quick_sort_iter arr path_track pivotindex + 1 highindex 		130 139
def _merge_sort self arr low high path_track if high - low < 1 return mid = low + high // 2 self _merge_sort arr low mid path_track self _merge_sort arr mid + 1 high path_track first = low middle = mid while first <= middle and middle + 1 <= high if arr first >= arr middle + 1 self _insert_before arr middle + 1 first middle += 1 path_track append copy copy arr middle first += 1 		212 230
def bubble_sort self arr = copy copy self array sort_track = copy copy arr 0 for i in xrange len arr for j in xrange len arr if arr i < arr j temp = arr i arr i = arr j arr j = temp cur_arr = copy copy arr sort_track append cur_arr j print arr return sort_track 		22 40
def _insert_sort_interval self low high arr sort_track increment for unsort_pos in xrange low high + 1 if arr unsort_pos < arr unsort_pos - increment pos = unsort_pos cur = arr unsort_pos while pos > 0 and arr pos - increment > cur arr pos = arr pos - increment pos -= increment arr pos = cur sort_track append copy copy arr pos 		87 97
def _insert_before self arr from_index to_index value = copy copy arr from_index copy_arr = copy copy arr if from_index == to_index return for i in xrange to_index from_index arr i + 1 = copy_arr i arr to_index = value if to_index < from_index from_index += 1 		232 251
def merge_sort self arr = copy copy self array path_track = copy copy arr 0 self _merge_sort arr 0 len arr - 1 path_track return path_track 		200 210
def shell_sort self arr = copy copy self array sort_track = copy copy arr 0 increment = len arr while increment > 1 increment = increment / 3 + 1 for i in xrange 0 increment self _insert_sort_interval i len arr - 1 arr sort_track increment return sort_track 		99 115
def generate_random_array self self array = while len self array < self size rand_int = random randint 1 self size if rand_int in self array continue else self array append rand_int 		10 20

def parse inp n = int x for x in inp readline split topics = for i in xrange n topic = inp readline split assert len topic == 2 topics append topic return topics 		10 17
def solve topicWords topics = topicWords matches = pairedWith topics pairedWith w2 w1 for w1 w2 in topics maxDoubleIntro = 0 for intro in subsets topics if len set topic 0 for topic in intro != len intro continue if len set topic 1 for topic in intro != len intro continue maxDoubleIntro = max maxDoubleIntro len intro return len topics - len matches 0 - len matches 1 + maxDoubleIntro 		64 84
def subsets sequence sequence = tuple sequence size = len sequence def rec s i if i == size yield tuple s else s append sequence i for sub in rec s i + 1 yield sub del s - 1 for sub in rec s i + 1 yield sub return rec 0 		19 36
def rec s i if i == size yield tuple s else s append sequence i for sub in rec s i + 1 yield sub del s - 1 for sub in rec s i + 1 yield sub 		26 35
def main import sys sys setrecursionlimit RECURSION_LIMIT import resource soft hard = resource getrlimit resource RLIMIT_AS resource setrlimit resource RLIMIT_AS MEM_LIMIT_GB * 1024 ** 3 hard with open FILE_NAME_BASE + .in r as inp numCases = int inp readline inputs = parse inp for _ in xrange numCases if NUM_PROCESSES == 0 runners = lambda inp = inp apply solve inp for inp in inputs else from multiprocessing import Pool from signal import SIGINT SIG_IGN signal pool = Pool NUM_PROCESSES signal SIGINT SIG_IGN runners = pool apply_async solve inp get for inp in inputs pool close caseFmt = % + str len str numCases + d progressFmt = [%s/%s] %%s\n % caseFmt caseFmt with open FILE_NAME_BASE + .out w as out for case runner in enumerate runners 1 result = runner out write Case #%d: %s\n % case result out flush sys stderr write progressFmt % case numCases result 		86 114
def wordsToIndices words known = for word in words idx = known get word if idx is None idx = len known known word = idx yield idx 		38 45
def pairedWith pairs paired = defaultdict list for word1 word2 in pairs paired word1 append word2 return dict paired 		47 51

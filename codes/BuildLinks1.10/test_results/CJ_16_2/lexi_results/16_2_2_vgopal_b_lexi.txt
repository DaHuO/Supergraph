def answer_2 C J best_c best_j = None None for c in xrange 1000 for j in xrange 1000 if not match str c C or not match str j J continue if best_c is None or abs c - j < abs best_c - best_j best_c best_j = c j elif abs c - j == abs best_c - best_j and c < best_c or c == best_c and j < best_j best_c best_j = c j return fmt str best_c len J fmt str best_j len J 		105 116
def fmt num length num = str num return 0 * length - len num + num 		14 16
def answer C J c_first j_first = C find ? J find ? try minimum = min x for x in c_first j_first if x != - 1 except minimum = None if minimum is not None if C minimum > J minimum return minimize C maximize J elif C minimum < J minimum return maximize C minimize J if C find ? in len C - 1 - 1 and J find ? in len C - 1 - 1 if len C == len J == 1 if C 0 == ? and J 0 == ? return 0 0 if C 0 == ? return J J elif J 0 == ? return C C else return C J if C - 1 == J - 1 == ? if C - 2 > J - 2 return replace C len C - 1 0 replace J len J - 1 9 elif C - 2 < J - 2 return replace C len C - 1 9 replace J len J - 1 0 else return replace C len C - 1 0 replace J len J - 1 0 elif C - 1 == ? if C - 2 > J - 2 return replace C len C - 1 0 J elif C - 2 < J - 2 return replace C len C - 1 9 J else return replace C len C - 1 J - 1 J elif J - 1 == ? if C - 2 > J - 2 return C replace J len J - 1 9 elif C - 2 < J - 2 return C replace J len J - 1 0 else return C replace J len J - 1 C - 1 else return C J i = minimum poss = if C i == ? and J i == ? if C i + 1 == ? and J i + 1 == ? return answer replace C i 0 replace J i 0 poss append replace C i 0 replace J i 0 poss append replace C i 0 replace J i 1 poss append replace C i 1 replace J i 0 elif C i == ? j = J i numbers = x for x in int j int j + 1 int j - 1 if x >= 0 and x <= 9 poss = replace C i x J for x in numbers elif J i == ? c = C i numbers = x for x in int c int c + 1 int c - 1 if x >= 0 and x <= 9 poss = C replace J i x for x in numbers best_c best_j = None None for poss_c poss_j in poss c j = int x for x in answer poss_c poss_j if best_c is None or abs c - j < abs best_c - best_j best_c best_j = c j elif abs c - j == abs best_c - best_j and c < best_c or c == best_c and j < best_j best_c best_j = c j return fmt best_c len C fmt best_j len J 		24 103
def minimize X return X replace ? 0 		21 22
def replace string index num assert string index == ? return string index + str num + string index + 1 		10 12
def match x X x = 0 * len X - len x + x for l1 l2 in zip x X if l2 != ? and l1 != l2 return False return True 		3 8
def maximize X return X replace ? 9 		18 19

def __bfs self layers = layer = set for vertex in self _left if vertex not in self _matching layer add vertex layers append layer visited = set while True layer = layers - 1 new_layer = set for vertex in layer if vertex in self _left visited add vertex for neighbour in self _graph vertex if neighbour not in visited and vertex not in self _matching or neighbour != self _matching vertex new_layer add neighbour else visited add vertex for neighbour in self _graph vertex if neighbour not in visited and vertex in self _matching and neighbour == self _matching vertex new_layer add neighbour layers append new_layer if len new_layer == 0 return layers if any vertex in self _right and vertex not in self _matching for vertex in new_layer return layers 		42 75
def solver file graph = allLefts = set allRights = set total = 0 numlines = int file readline total = numlines for x in range numlines words = file readline lower strip split num = words 1 + XXX if words 0 in graph graph words 0 add num else graph words 0 = num allLefts add words 0 allRights add num hk = HopcroftKarp graph max_matching = hk maximum_matching caught = 0 caught += len max_matching keys // 2 caught += len x for x in allLefts if x not in max_matching caught += len x for x in allRights if x not in max_matching print caught print max_matching return total - caught 		186 218
def p ** kwargs printstr = for key var in kwargs items printstr += %s=%s\t % key var return printstr 		159 164
def maximum_matching self while True layers = self __bfs if len layers - 1 == 0 break free_vertex = set vertex for vertex in layers - 1 if vertex not in self _matching del self _dfs_paths self _dfs_parent clear for vertex in free_vertex self _dfs_parent vertex = vertex self __dfs vertex len layers - 1 layers if len self _dfs_paths == 0 break for path in self _dfs_paths for i in range len path if i % 2 == 0 self _matching path i = path i + 1 self _matching path i + 1 = path i return self _matching 		110 141
def doSolve filename solver log = False with open filename as infile with open filename + .out w as outfile numCases = int infile readline for i in range numCases result = solver infile if log print inputs print result print  outfile write Case #%d: %s\n % i + 1 str result 		167 179
def __dfs self v index layers if index == 0 path = v while self _dfs_parent v != v path append self _dfs_parent v v = self _dfs_parent v self _dfs_paths append path return True for neighbour in self _graph v if neighbour in layers index - 1 if neighbour in self _dfs_parent continue if neighbour in self _left and v not in self _matching or neighbour != self _matching v or neighbour in self _right and v in self _matching and neighbour == self _matching v self _dfs_parent neighbour = v if self __dfs neighbour index - 1 layers return True return False 		83 108
def __init__ self graph self _matching = self _dfs_paths = self _dfs_parent = self _left = set graph keys self _right = set for value in graph values self _right update value for vertex in self _left for neighbour in graph vertex if neighbour not in graph graph neighbour = vertex else graph neighbour add vertex self _graph = graph 		18 40

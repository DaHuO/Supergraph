def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return 1 return 0 		58 69
def main t = int sys stdin readline for case in range 1 t + 1 n = int sys stdin readline d = defaultdict set left = set right = set for i in range n a b = sys stdin readline split left add a right add b d a add b m _ _ = bipartiteMatch d matched_left = set m values matched_right = set m keys legit = len m + len left - matched_left + len right - matched_right print Case #{}: {} format case n - legit 		77 93
def bipartiteMatch graph matching = for u in graph for v in graph u if v not in matching matching v = u break while 1 preds = unmatched = pred = dict u unmatched for u in graph for v in matching del pred matching v layer = list pred while layer and not unmatched newLayer = for u in layer for v in graph u if v not in preds newLayer setdefault v append u layer = for v in newLayer preds v = newLayer v if v in matching layer append matching v pred matching v = v else unmatched append v if not unmatched unlayered = for u in graph for v in graph u if v not in preds unlayered v = None return matching list pred list unlayered def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return 1 return 0 for v in unmatched recurse v 		1 71

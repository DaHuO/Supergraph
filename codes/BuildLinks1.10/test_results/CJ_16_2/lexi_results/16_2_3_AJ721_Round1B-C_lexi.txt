def bipartiteMatch graph matching = for u in graph for v in graph u if v not in matching matching v = u break while 1 preds = unmatched = pred = dict u unmatched for u in graph for v in matching del pred matching v layer = list pred while layer and not unmatched newLayer = for u in layer for v in graph u if v not in preds newLayer setdefault v append u layer = for v in newLayer preds v = newLayer v if v in matching layer append matching v pred matching v = v else unmatched append v if not unmatched unlayered = for u in graph for v in graph u if v not in preds unlayered v = None return matching list pred list unlayered def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return 1 return 0 for v in unmatched recurse v 		40 110
def do_case N lines unique = set lines U = set V = set nodes = dict for word in unique words = word split  if words 0 in nodes nodes words 0 append words 1 else nodes words 0 = words 1 U add words 0 V add words 1 M A B = bipartiteMatch nodes real_count = 0 unmatchedU = set list U unmatchedV = set list V for v in V if v in M real_count += 1 unmatchedV remove v u = M v unmatchedU remove u real_count += len unmatchedU + len unmatchedV return N - real_count 		3 34
def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return 1 return 0 		97 108

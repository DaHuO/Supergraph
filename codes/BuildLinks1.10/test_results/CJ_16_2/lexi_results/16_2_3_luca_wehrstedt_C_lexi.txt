def bipartiteMatch graph matching = for u in graph for v in graph u if v not in matching matching v = u break while 1 preds = unmatched = pred = dict u unmatched for u in graph for v in matching del pred matching v layer = list pred while layer and not unmatched newLayer = for u in layer for v in graph u if v not in preds newLayer setdefault v append u layer = for v in newLayer preds v = newLayer v if v in matching layer append matching v pred matching v = v else unmatched append v if not unmatched unlayered = for u in graph for v in graph u if v not in preds unlayered v = None return matching list pred list unlayered def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return 1 return 0 for v in unmatched recurse v 		6 76
def run w = int input strip pairs = list words1 = dict words2 = dict for i in range w s1 _ s2 = input strip partition  pairs append s1 s2 words1 s1 = words1 get s1 0 + 1 words2 s2 = words2 get s2 0 + 1 d = dict k for k in words1 for s1 s2 in pairs d s1 append s2 res = bipartiteMatch d size = len res 0 return w - len words1 + len words2 - size 		80 101
def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return 1 return 0 		63 74

def can_match ints strs s = str ints zfill len strs for i in xrange len strs if strs i != ? and strs i != s i return False return True 		7 12
def zeroOr9 bigger current if bigger == current return 0 else return 9 		1 5
def do_case C J N = len C foundDifference = None outC = outJ = for i in xrange N if foundDifference is None if C i == J i if C i == ? outC += 0 outJ += 0 else outC += C i outJ += J i elif C i == ? outC += J i outJ += J i elif J i == ? outC += C i outJ += C i elif int C i > int J i foundDifference = C outC += C i outJ += J i else foundDifference = J outC += C i outJ += J i else if C i == ? outC += zeroOr9 foundDifference C else outC += C i if J i == ? outJ += zeroOr9 foundDifference J else outJ += J i return outC outJ 		93 130
def do_dynamic C J N start goal if start == N return cached = cache get start goal None if cached is not None return cached if goal == maxC if C start == ? c = 9 else c = C start if J start == ? j = 0 else j = J start cs js = do_dynamic C J N start + 1 goal return c + cs j + js elif goal == maxJ if C start == ? c = 0 else c = C start if J start == ? j = 9 else j = J start cs js = do_dynamic C J N start + 1 goal cache start goal = c + cs j + js return c + cs j + js else rngi = xrange 0 10 if C start != ? rngi = int C start rngj = xrange 0 10 if J start != ? rngj = int J start bestAbs = None bestC = None bestJ = None for c in rngi for j in rngj if len rngi > 1 or len rngj > 1 and abs c - j > 1 continue if c > j cs js = do_dynamic C J N start + 1 maxJ elif c < j cs js = do_dynamic C J N start + 1 maxC else cs js = do_dynamic C J N start + 1 equal ccs = str c + cs jjs = str j + js absx = abs int ccs - int jjs if bestAbs is None or absx < bestAbs bestAbs = absx bestC = ccs bestJ = jjs cache start goal = bestC bestJ return bestC bestJ 		18 76
def do_brute C J bestC = None bestJ = None bestAbs = None for c in xrange 0 10 ** len C for j in xrange 0 10 ** len J if can_match c C and can_match j J absx = abs c - j if bestAbs is None or absx < bestAbs or absx == bestAbs and c < bestC or absx == bestAbs and c == bestC and j < bestJ bestAbs = absx bestC = c bestJ = j if bestAbs == 0 return str bestC str bestJ return str bestC zfill len c str bestJ zfill len j 		77 91

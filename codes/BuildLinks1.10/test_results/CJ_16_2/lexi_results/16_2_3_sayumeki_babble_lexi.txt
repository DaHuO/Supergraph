def doCase stuff longestSet = 0 best = None binaries = generateAllBinaryStringsOfLength len stuff for binary in binaries fakeCount = binary count 1 fakes = notFakes = index = 0 for char in binary if char == 1 fakes append stuff index if char == 0 notFakes append stuff index index += 1 valid = True for fake in fakes frontFound = False backFound = False for other in notFakes if fake 0 == other 0 frontFound = True if fake 1 == other 1 backFound = True if frontFound == False or backFound == False valid = False if valid and longestSet < fakeCount longestSet = fakeCount return str longestSet 		120 156
def getCaseOutput case val = doCase case return str val 		56 58
def setIsLegit theSet setWithout = theSet foundTest = False if SCHEDULING EQUILIBRIA in theSet foundTest = True for entry in theSet frontFound = False backFound = False for other in setWithout if entry 0 == other 0 and entry 1 == other 1 continue if entry 0 == other 0 frontFound = True if entry 1 == other 1 backFound = True if frontFound and backFound return False return True 		94 118
def runSolution inFile lines = open inFile mode = r readlines ln = 0 cases = int lines ln ln += 1 for i in range 0 cases caseInput = linesInCase = int lines ln ln += 1 for j in range 0 linesInCase caseInput append lines ln strip ln += 1 case = formatCaseInput caseInput output = getCaseOutput case print Case # + str i + 1 + : + output outFile write Case # + str i + 1 + : + output + \n outFile close 		23 46
def formatCaseInput caseInput case = for thing in caseInput case append thing split  return case 		49 54
def generateAllBinaryStringsOfLength count strs = 0 1 loops = 1 while loops < count newStrs = for thing in strs newStrs append thing + 0 newStrs append thing + 1 strs = newStrs loops += 1 return strs 		82 92

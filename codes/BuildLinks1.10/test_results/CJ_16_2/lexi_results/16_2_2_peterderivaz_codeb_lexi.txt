def bf C J n = len C def make_choices C Cs = for c in range 10 ** n c_s = str c zfill n for x y in zip c_s C if y == ? continue if x != y break else Cs append c_s return Cs Cs = make_choices C Js = make_choices J A = for c in Cs for j in Js c_val = int join c j_val = int join j A append abs c_val - j_val c_val j_val join c join j _ _ _ c j = min A return c +  + j 		5 28
def go C J n = len C assert len J == n A = for num_match in range n + 1 c = * n j = * n for i in range num_match if C i == ? if J i == ? c i = 0 j i = 0 else c i = J i j i = J i else c i = C i j i = C i if J i != ? and J i != C i break else if num_match == n A append 0 0 0 join c join j break if C num_match == ? Cs = 0123456789 else Cs = C num_match if J num_match == ? Js = 0123456789 else Js = J num_match for xc in Cs for xj in Js c num_match = xc j num_match = xj c_val = int join c j_val = int join j for i in range num_match + 1 n if C i == ? c i = 9 if c_val < j_val else 0 else c i = C i if J i == ? j i = 9 if j_val < c_val else 0 else j i = J i c_val = int join c j_val = int join j A append abs c_val - j_val c_val j_val join c join j _ _ _ c j = min A v = c +  + j return v 		30 87
def make_choices C Cs = for c in range 10 ** n c_s = str c zfill n for x y in zip c_s C if y == ? continue if x != y break else Cs append c_s return Cs 		7 18

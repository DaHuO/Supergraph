def matching graph matching = for u in graph for v in graph u if v not in matching matching v = u break while True preds = unmatched = pred = u unmatched for u in graph for v in matching del pred matching v layer = list pred while layer and not unmatched newLayer = for u in layer for v in graph u if v not in preds newLayer setdefault v append u layer = for v in newLayer preds v = newLayer v if v in matching layer append matching v pred matching v = v else unmatched append v if not unmatched unlayered = for u in graph for v in graph u if v not in preds unlayered v = None return matching list pred list unlayered def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return True return False for v in unmatched recurse v 		25 98
def main T = read for testCase in range T N = read left right = set set graph = defaultdict set for i in range N first second = read str graph first add second left add first right add second M A B = matching graph res = N - len left + len right - len M print Case #{}: {} format testCase + 1 res 		7 22
def recurse v if v in preds L = preds v del preds v for u in L if u in pred pu = pred u del pred u if pu is unmatched or recurse pu matching v = u return True return False 		84 95

def Solve_Problem big_string verbose = False extracted_digits = big_str_signature = dict Counter big_string if Z in big_str_signature times = big_str_signature Z subtract_digs big_str_signature 0 times extracted_digits += 0 * times if W in big_str_signature times = big_str_signature W subtract_digs big_str_signature 2 times extracted_digits += 2 * times if X in big_str_signature times = big_str_signature X subtract_digs big_str_signature 6 times extracted_digits += 6 * times if S in big_str_signature times = big_str_signature S if times > 0 subtract_digs big_str_signature 7 times extracted_digits += 7 * times if V in big_str_signature times = big_str_signature V if times > 0 subtract_digs big_str_signature 5 times extracted_digits += 5 * times if F in big_str_signature times = big_str_signature F if times > 0 subtract_digs big_str_signature 4 times extracted_digits += 4 * times if O in big_str_signature times = big_str_signature O if times > 0 subtract_digs big_str_signature 1 times extracted_digits += 1 * times if G in big_str_signature times = big_str_signature G if times > 0 subtract_digs big_str_signature 8 times extracted_digits += 8 * times if R in big_str_signature times = big_str_signature R if times > 0 subtract_digs big_str_signature 3 times extracted_digits += 3 * times if I in big_str_signature times = big_str_signature I if times > 0 subtract_digs big_str_signature 9 times extracted_digits += 9 * times assert sum big_str_signature values == 0 return join map str sorted extracted_digits 		41 93
def subtract_digs big_str_signature digit times for let count in digs_signatures digit iteritems big_str_signature let -= count * times 		30 34

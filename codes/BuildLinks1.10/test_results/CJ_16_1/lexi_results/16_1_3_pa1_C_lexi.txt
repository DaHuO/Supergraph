def dfs cur_node bffs group if group cur_node == - 1 group cur_node = 0 return dfs bffs cur_node bffs group else target_node = cur_node start_node = bffs cur_node cycle_len = 1 while not start_node == target_node cycle_len += 1 start_node = bffs start_node return cycle_len target_node 		4 15
def main t = int raw_input for t in range 1 t + 1 n = raw_input l = raw_input strip split bffs_list = int fr for fr in l bffs = for i in range len bffs_list bffs i + 1 = bffs_list i print case #{0}: {1} format t f bffs 		48 58
def get_path_len source_node dest_node bffs if source_node == dest_node return 0 return 1 + get_path_len bffs source_node dest_node bffs 		17 20
def f bffs n = len bffs max_pure_cycle_len = 0 two_cycle_end_lengths = for node in range 1 n + 1 two_cycle_end_lengths node = 0 for unvisited_node in range 1 n + 1 group = for i in range 1 n + 1 group i = - 1 cycle_len cycle_node = dfs unvisited_node bffs group if cycle_len > 2 max_pure_cycle_len = max max_pure_cycle_len cycle_len elif cycle_len == 2 two_cycle_end_lengths cycle_node = max two_cycle_end_lengths cycle_node get_path_len unvisited_node cycle_node bffs pure_two_cycles = 0 max_two_cycle_len = 0 for node in range 1 n + 1 if bffs bffs node == node max_two_cycle_len += two_cycle_end_lengths node + two_cycle_end_lengths bffs node + 2 return max max_pure_cycle_len max_two_cycle_len / 2 		22 46

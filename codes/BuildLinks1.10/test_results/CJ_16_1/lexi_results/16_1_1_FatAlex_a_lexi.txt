def gen_word s path fmt = {:0 + str len s + b} path = fmt format path r = for c p in zip s path if p == 0 r = r + c else r = c + r return r 		29 38
def solve_bf case s = case mw = s for p in xrange 2 ** len s w = gen_word s p if w > mw mw = w return mw 		39 46
def solve case s = case return maximize s 		62 64
def read_line f while true s = f readline strip if s return s 		4 8
def process path_in path_out = none if path_out == none path_out = path_in rsplit . 1 0 + .out cases = load_cases path_in outcomes = solve c for c in cases save_outcomes path_out outcomes 		79 84
def load_cases path with open path as f n = int f readline cases = for _ in xrange n cases append load_single_case f return cases 		18 24
def maximize s if len s < 2 return s mp = max_right s return s mp + maximize s mp + s mp + 1 		56 60
def test_solutions path_in until_first_fail = true cases = load_cases path_in for cn c in enumerate cases o = solve c if not verify_outcome c o print wrong outcome! print case #{0}: format cn print c print outcome: print o if until_first_fail return c else print \n\n 		97 110
def verify_outcome case outcome return outcome == solve_bf case 		94 95
def read_list f return int x for x in read_line f split 		9 10
def test_solutions_gen until_first_fail = true cases = gen_cases for cn c in enumerate cases o = solve c if not verify_outcome c o print wrong outcome! print case #{0}: format cn print c print outcome: print o if until_first_fail return c else print \n\n 		116 129
def load_single_case f return read_line f 		14 15
def save_outcomes path outcomes with open path w as f for n o in enumerate outcomes f write case #{0}: {1}\n format n + 1 outcome_string o 		75 78
def max_right s mp = 0 for i in xrange len s if s i >= s mp mp = i return mp 		49 54
def read_tuple f return tuple read_list f 		11 12
def gen_cases return 		112 114
def outcome_string outcome return {} format outcome 		71 72

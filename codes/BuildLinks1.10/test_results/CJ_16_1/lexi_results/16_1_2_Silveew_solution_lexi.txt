def read_pair_list return int pair split , 0 int pair split , 1 for pair in raw_input split 		5 5
def read_int_list return int x for x in raw_input split 		6 6
def read_int return int raw_input 		4 4
def read_pair return int x for x in raw_input strip split , 		7 7
def try_solve_rev_rec res rows iter_first cur_iter cur_iter_pos_values = rows cur_iter max_value = max cur_iter_pos_values cur_rows = row for row in rows if row cur_iter == max_value other_rows = np array row for row in rows if row cur_iter != max_value assert len cur_rows in 1 2 if len cur_rows == 2 row_1 row_2 = cur_rows res_row = res cur_iter res_col = res cur_iter if row_1 iter_first == res_row iter_first all and row_1 cur_iter + 1 == res_row cur_iter + 1 all and row_2 iter_first == res_col iter_first all and row_2 cur_iter + 1 == res_col cur_iter + 1 all res cur_iter iter_first cur_iter + 1 = row_1 iter_first cur_iter + 1 res iter_first cur_iter + 1 cur_iter = row_2 iter_first cur_iter + 1 try_1 = try_solve_rev_rec res other_rows iter_first cur_iter - 1 if try_1 return try_1 row_2 row_1 = row_1 row_2 if not row_1 == row_2 all and row_1 iter_first == res_row iter_first all and row_1 cur_iter + 1 == res_row cur_iter + 1 all and row_2 iter_first == res_col iter_first all and row_2 cur_iter + 1 == res_col cur_iter + 1 all res cur_iter iter_first cur_iter + 1 = row_1 iter_first cur_iter + 1 res iter_first cur_iter + 1 cur_iter = row_2 iter_first cur_iter + 1 try_2 = try_solve_rev_rec res other_rows iter_first cur_iter - 1 if try_2 return try_2 return none else assert cur_iter == iter_first cur_row = cur_rows 0 res cur_iter cur_iter = cur_row cur_iter opt1 = res cur_iter opt2 = res cur_iter if not opt1 == cur_row all or opt2 == cur_row all return none if opt1 == cur_row all return list opt2 else assert not opt1 == cur_row all return list opt1 		54 101
def read_string return raw_input strip 		8 8
def solve_case args n rows = args res = np zeros n n astype int rows = np array rows return try_solve_rec res rows 0 		103 107
def parse_input t = read_int cases = for _ in xrange t n = read_int rows = read_int_list for _ in xrange n + n - 1 cases append n rows return cases 		11 18
def try_solve_rec res rows cur_iter cur_iter_pos_values = rows cur_iter min_value = min cur_iter_pos_values cur_rows = row for row in rows if row cur_iter == min_value other_rows = np array row for row in rows if row cur_iter != min_value assert len cur_rows in 1 2 if len cur_rows == 2 row_1 row_2 = cur_rows if row_1 cur_iter == res cur_iter cur_iter all and row_2 cur_iter == res cur_iter cur_iter all res cur_iter cur_iter = row_1 cur_iter res cur_iter cur_iter = row_2 cur_iter try_1 = try_solve_rec res other_rows cur_iter + 1 if try_1 return try_1 row_2 row_1 = row_1 row_2 if not row_1 == row_2 all and row_1 cur_iter == res cur_iter cur_iter all and row_2 cur_iter == res cur_iter cur_iter all res cur_iter cur_iter = row_1 cur_iter res cur_iter cur_iter = row_2 cur_iter try_2 = try_solve_rec res other_rows cur_iter + 1 if try_2 return try_2 return none else return try_solve_rev_rec res rows cur_iter len res - 1 return none 		21 51

def find_tail_rec n ids inverse_bffs = i + 1 for i in xrange len ids if ids i == n and i + 1 != ids n - 1 max_tail = max_length = 0 for n1 in inverse_bffs tail = find_tail_rec n1 ids if max_length < len tail max_tail = tail max_length = len max_tail max_tail append n return max_tail 		10 23
def solve_test index test_case print case: [{0}] format test_case n = int test_case 0 ids = map int test_case 1 split  circles = visited = for i in xrange 1 n + 1 if i not in visited currenc_route = current_node = i while current_node not in visited currenc_route append current_node visited append current_node current_node = ids current_node - 1 if current_node in currenc_route current_circle = currenc_route currenc_route index current_node print current circle: {0} format current_circle circles append current_circle print circles {0} format circles visited sort print visited {0} format visited solution1 = max len c for c in circles two_length_circles = c for c in circles if len c == 2 solution2 = 0 for c in two_length_circles tail_len1 = find_tail c 0 ids tail_len2 = find_tail c 1 ids solution2 += tail_len1 + tail_len2 finish index max solution1 solution2 		32 70
def find_tail n ids max_tail = find_tail_rec n ids print max tail of {0}: {1} format n max_tail return len max_tail 		25 30
def finish index solution print solution file_out write case #{0}: {1}\n format index + 1 solution 		4 8

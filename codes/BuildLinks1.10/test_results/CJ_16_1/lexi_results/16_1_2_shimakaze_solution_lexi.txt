def solve input_file f = open input_file r output_file = input_file split . 0 + .out o = open output_file w num_tests = int f readline for nt in range num_tests n = int f readline strip papers = for i in range 2 * n - 1 papers append map int f readline split  print doing case %d \n % nt + 1 sorted_arrays = for i in range n f1 = get_min papers i papers remove f1 f2 = get_min papers i if f2 and f2 i == f1 i papers remove f2 sorted_arrays append f1 f2 else sorted_arrays append f1 if papers != raise exception grid = for i in range n grid append 0 * n missingindex = - 1 for i in range len sorted_arrays arrays = sorted_arrays i if len arrays == 1 missingindex = i break ans = for i in range n if i == missingindex ans append sorted_arrays missingindex 0 missingindex continue num1 = sorted_arrays i 0 missingindex num2 = sorted_arrays i 1 missingindex num3 = sorted_arrays missingindex 0 i if num3 == num1 ans append num2 else ans append num1 ans =  join map str ans o write case #%d: %s\n % nt + 1 ans 		1 66
def is_equal a1 a2 for i in range len a1 if a1 i != a2 i return false return true 		103 107
def check_validity grid line is_row index if is_row for i in range len line if grid index i == 0 break elif grid index i != line i return false for i in range len line if grid index - 1 i >= line i return false else for i in range len line if grid i index == 0 break elif grid i index != line i return false for i in range len line if grid i index - 1 >= line i return false return true 		74 93
def place_in_grid grid line is_row index if is_row for i in range len line grid index i = line i else for i in range len line grid i index = line i 		95 101
def get_min papers index if papers == return none minimum = min papers key = lambda x x index return minimum 		68 72

def lcm a b return a * b // gcd a b 		28 29
def getresults group name results = with open name r as f k = 0 lines = for line in f if k > 0 n = line if n - 1 == \n n = n - 1 lines append n if len lines == group print *********** results append getanswer lines print answer : + str results - 1 lines = print done if str in line break k += 1 return results 		91 111
def probeone group name lines = with open name r as f k = 0 for line in f if k > 0 n = line if n - 1 == \n n = n - 1 lines append n if len lines == group break k += 1 return lines 		76 89
def getanswermush lines n = int i for i in lines 1 split  count = int lines 0 s = 0 for i in range count - 1 s += max n i - n i + 1 0 r = 0 for i in range count - 1 if max n i - n i + 1 0 > r r = max n i - n i + 1 0 sr = 0 for i in range count - 1 sr += min n i r return str s +  + str sr 		5 19
def lcm * numbers def lcm a b return a * b // gcd a b return reduce lcm numbers 1 		26 30
def writeresults results name with open name wb as f for i in range len results f write case # + str i + 1 + : f write str results i f write \n 		113 118
def getanswerpast lines n rank = int i for i in lines 0 split  minutes = int i for i in lines 1 split  m = lcm * minutes unit = 0 for i in minutes unit += m / i print rank : + str rank rank = rank % unit print reduced to : + str rank print has + str n + workers with lcm + str m if rank <= n print fast if rank == 0 return str np argmin minutes + 1 return str rank used = for i in range 1 n + 1 used append i minutes i - 1 minutes i - 1 nextclient = n + 1 while nextclient != rank + 1 for i in range n used i 1 -= 1 if used i 1 == 0 used i 1 = used i 2 used i 0 = nextclient if nextclient == rank return str i + 1 nextclient += 1 		32 63
def getanswer lines r = for i in lines 0 if len r == 0 or i < r 0 print i + last r += i else print i + first r = i + r return r 		65 74
def gcd * numbers from fractions import gcd return reduce gcd numbers 		21 24

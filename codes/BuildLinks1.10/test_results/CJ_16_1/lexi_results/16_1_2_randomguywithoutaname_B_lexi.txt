def fillgridrow grid vec ind if grid == none return grid for i in range 0 len grid if grid i ind == vec ind for j in range 0 len grid if grid i j != 0 and vec j != grid i j return none grid i j = vec j return grid return none 		5 14
def fillgridcol grid vec ind if grid == none return grid for i in range 0 len grid if grid ind i == vec ind for j in range 0 len grid if grid j i != 0 and vec j != grid j i return none grid j i = vec j return grid return none 		16 25
def probb n lines revlines grid = * n for i in range 0 n grid i = 0 * n lines sort revlines sort revlines reverse matches = collections defaultdict list revmatches = collections defaultdict list pos = collections counter rpos = collections counter if lines 0 0 == lines 1 0 grid 0 = lines 0 for i in range 0 n grid i 0 = lines 1 i pos update lines 0 pos update lines 1 for i in range 2 len lines matches lines i 0 append lines i revmatches lines i n - 1 append lines i else for i in range 0 len revlines revlines i reverse grid - 1 = revlines 0 for i in range 0 n grid i - 1 = revlines 1 i rpos update revlines 0 rpos update revlines 1 for i in range 2 len revlines matches revlines i 0 append revlines i revmatches revlines i n - 1 append revlines i torem = for m in matches if len matches m == 1 and pos m == 1 res = fillgridrow grid matches m 0 0 if res == none res = fillgridcol grid matches m 0 0 if res != none grid = res torem append m for v in torem del matches v torem = for m in revmatches if len revmatches m == 1 and rpos m == 1 res = fillgridrow grid revmatches m 0 n - 1 if res == none res = fillgridcol grid revmatches m 0 n - 1 if res != none grid = res torem append m for v in torem del revmatches v res = recsolve grid matches revmatches matches keys revmatches keys lns = list for i in range 0 n lns append %d * n % tuple res i for i in range 0 n lns append %d * n % tuple x i for x in res lns = collections counter lns for x in lines tmp = %d * n % tuple x lns tmp = lns tmp - 1 if lns tmp == 0 del lns tmp return lns keys 0 		87 163
def recsolve grid m rm mlist rlist if grid == none return grid n = len grid if len mlist > 0 choice = mlist 0 gr = dc grid gr = fillgridrow gr m choice 0 0 if len m choice > 1 gr = fillgridcol gr m choice 1 0 if gr == none res = none else res = recsolve gr m rm mlist 1 rlist if res != none return res gr = dc grid gr = fillgridcol gr m choice 0 0 if len m choice > 1 gr = fillgridrow gr m choice 1 0 if gr == none res = none else res = recsolve gr m rm mlist 1 rlist if res != none return res if len rlist > 0 choice = rlist 0 gr = dc grid gr = fillgridrow gr rm choice 0 n - 1 if len rm choice > 1 gr = fillgridcol gr rm choice 1 n - 1 if gr == none res = none else res = recsolve gr m rm mlist rlist 1 if res != none return res gr = dc grid gr = fillgridcol gr rm choice 0 n - 1 if len rm choice > 1 gr = fillgridrow gr rm choice 1 n - 1 if gr == none res = none else res = recsolve gr m rm mlist rlist 1 if res != none return res if len mlist == 0 and len rlist == 0 return grid return none 		27 85

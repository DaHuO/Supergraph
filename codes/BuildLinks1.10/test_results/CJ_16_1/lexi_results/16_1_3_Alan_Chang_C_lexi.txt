def compute n = int input f = list map lambda x int x - 1 input split ty = u * n le = 0 * n we = 0 * n for i in range 0 n if f f i == i ty i = m le i = 2 we i = f i maxcyclelength = 0 for i in range 0 n if ty i != u continue curr = i chain = chain append curr completed = false while not completed curr = f curr if ty curr == c for j in chain ty j = i completed = true elif ty curr == w or ty curr == m l = len chain wall_length = le curr wall_end = we curr for j in range 0 l ty chain j = w le chain j = wall_length + l - j we chain j = wall_end completed = true elif ty curr == i for j in chain ty j = i completed = true elif curr in chain currindex = chain index curr l = len chain cyclelength = l - currindex if maxcyclelength < cyclelength maxcyclelength = cyclelength for j in range currindex l ty chain j = c le chain j = cyclelength for j in range 0 currindex ty chain j = i completed = true else chain append curr maxwalllength = 0 * n for i in range 0 n if ty i == w or ty i == m wall_end = we i if maxwalllength wall_end < le i maxwalllength wall_end = le i combinedwalls = 0 for i in range 0 n if ty i == m combinedwalls += maxwalllength i + maxwalllength f i - 2 combinedwalls //= 2 ans = max combinedwalls maxcyclelength return str ans 		8 90

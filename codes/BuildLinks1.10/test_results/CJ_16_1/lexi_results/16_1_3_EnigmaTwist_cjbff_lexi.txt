def findmutuals bffdict n mutuallist = for i in range 1 n + 1 if i == bffdict bffdict i and i < bffdict i mutuallist append i bffdict i return mutuallist 		7 12
def longestbackchain btkdict currk prevk currlen longestlen = 0 otherkids = set btkdict currk - set prevk for nextk in otherkids newlen = longestbackchain btkdict nextk currk currlen + 1 if newlen > longestlen longestlen = int newlen return currlen + longestlen 		42 51
def biggestloopsize bffdict n fullseenset = set maxloopsize = 0 for k in range 1 n + 1 if k in fullseenset continue seenlist = int k newk = 0 getoutnow = false while true newk = bffdict int k if newk in fullseenset getoutnow = true break if newk in seenlist break seenlist append int newk k = int newk if getoutnow fullseenset |= set seenlist continue loopsize = len seenlist - seenlist index newk if loopsize > maxloopsize maxloopsize = int loopsize fullseenset |= set seenlist return maxloopsize 		14 39
def main with open sys argv 1 as f flines = x strip for x in f readlines if len flines - 1 == 0 flines = flines - 1 outf = open sys argv 2 w casenum = 0 for fl in flines 2 2 casenum += 1 linelist = int x for x in fl split numkids = len linelist kidtobff = for i in range numkids kidtobff i + 1 = linelist i bfftokids = defaultdict list for k in range 1 len kidtobff + 1 bfftokids kidtobff k append k mutlist = findmutuals kidtobff numkids bls = biggestloopsize kidtobff numkids mutscore = len mutlist * 2 if mutscore > bls bls = int mutscore if len mutlist == 0 outf write case #{}: {}\n format str casenum str bls else bestscore = bls thisscore = 0 for mpair in mutlist alen = longestbackchain bfftokids mpair 0 mpair 1 1 blen = longestbackchain bfftokids mpair 1 mpair 0 1 alenfixed = 8 * alen + 1 ** .5 - 1 / 2 blenfixed = 8 * blen + 1 ** .5 - 1 / 2 score = alenfixed + blenfixed thisscore += int score if thisscore > bestscore bestscore = int thisscore outf write case #{}: {}\n format str casenum str bestscore outf close sys exit 0 		54 111

def parse inp n = int x for x in inp readline split bff = tuple int x - 1 for x in inp readline split assert len bff == n return n bff 		10 14
def solve n bff maxlen = 0 for included in xrange 1 << n children = tuple i for i in xrange n if included >> i & 1 length = len children if length <= maxlen continue for circle in permutations children if all circle i - 1 % length == bff c or circle i + 1 % length == bff c for i c in enumerate circle maxlen = length break return maxlen 		16 32
def main import sys sys setrecursionlimit recursion_limit import resource soft hard = resource getrlimit resource rlimit_as resource setrlimit resource rlimit_as mem_limit_gb * 1024 ** 3 hard with open file_name_base + .in r as inp numcases = int inp readline inputs = parse inp for _ in xrange numcases if num_processes == 0 runners = lambda inp = inp apply solve inp for inp in inputs else from multiprocessing import pool from signal import sigint sig_ign signal pool = pool num_processes signal sigint sig_ign runners = pool apply_async solve inp get for inp in inputs pool close casefmt = % + str len str numcases + d progressfmt = [%s/%s] %%s\n % casefmt casefmt with open file_name_base + .out w as out for case runner in enumerate runners 1 result = runner out write case #%d: %s\n % case result out flush sys stderr write progressfmt % case numcases result 		34 62

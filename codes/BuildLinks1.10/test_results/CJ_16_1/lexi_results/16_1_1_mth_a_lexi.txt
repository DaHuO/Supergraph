def main import sys sys setrecursionlimit recursion_limit import resource soft hard = resource getrlimit resource rlimit_as resource setrlimit resource rlimit_as mem_limit_gb * 1024 ** 3 hard with open file_name_base + .in r as inp numcases = int inp readline inputs = parse inp for _ in xrange numcases if num_processes == 0 runners = lambda inp = inp apply solve inp for inp in inputs else from multiprocessing import pool from signal import sigint sig_ign signal pool = pool num_processes signal sigint sig_ign runners = pool apply_async solve inp get for inp in inputs pool close casefmt = % + str len str numcases + d progressfmt = [%s/%s] %%s\n % casefmt casefmt with open file_name_base + .out w as out for case runner in enumerate runners 1 result = runner out write case #%d: %s\n % case result out flush sys stderr write progressfmt % case numcases result 		24 52
def parse inp s = inp readline strip return s 		8 10
def solve s r = for c in s if not r r = c elif c >= r 0 r = c + r else r = r + c return r 		12 22

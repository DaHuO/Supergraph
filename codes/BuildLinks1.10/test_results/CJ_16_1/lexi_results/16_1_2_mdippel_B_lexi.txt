def writeoutput results for result in results print result return 		22 25
def algorithm test_case n lists = test_case abs_min = min map min lists firsts = filter lambda l l 0 == abs_min lists abs_max = max map max lists lasts = filter lambda l l - 1 == abs_max lists if len firsts == 2 rows = none * n cols = none * n rows 0 = firsts 0 cols 0 = firsts 1 remaining = filter lambda l l not in firsts lists assert len remaining == len lists - 2 fin = brute_force 0 n rows cols remaining return  join map str fin else rows = none * n cols = none * n rows - 1 = lasts 0 cols - 1 = lasts 1 remaining = filter lambda l l not in lasts lists fin = brute_force n - 1 n rows cols remaining return  join map str fin 		68 92
def basic_test n = 7 lists = 23 25 27 29 30 33 34 		100 102
def runalgorithm results = for test_case in processinput results append algorithm test_case for i in range len results results i = case # + str i + 1 + : + results i + \n writeoutput results 		117 125
def brute_force types n rows cols lists if len lists == 0 missing = none none for i in range n if rows i == none missing = r i continue for j in range n if cols j == none missing = c j continue if rows i j != cols j i return none if missing 0 == r row = map lambda l l missing 1 cols return row else col = map lambda l l missing 1 rows return col else l = lists 0 for i in range n if cols types i == l types and rows i is none rows i = l fin = brute_force types n rows cols lists 1 if fin is not none return fin rows i = none if rows types i == l types and cols i is none cols i = l fin = brute_force types n rows cols lists 1 if fin is not none return fin cols i = none return none 		29 64
def processinput t = int raw_input for i in range t n = int raw_input lists = for _ in range 2 * n - 1 curr_list = map int raw_input split assert len curr_list == n lists append curr_list yield n lists return 		8 19

def sol1 n lists def putcol i mat col for k in range i if mat k i and mat k i != col k return false for k in range n if i if mat k i - 1 >= col k return false mat k i = col k return true def putrow i mat row for k in range i if mat i k and mat i k != row k return false for k in range n if i if mat i - 1 k >= row k return false mat i k = row k return true def helper i mat missing_row missing_col if i == n if missing_row is not none return mat missing_row assert missing_col is not none return mat missing_col k for k in range n colbase = mat 0 i colcands = idx for idx l in enumerate lists if l 0 == colbase assert colcands backup = deepcopy mat for k idx in enumerate colcands if putcol i mat lists idx if missing_col != 0 rowbase = mat i 0 if rowbase == colbase if len colcands == 1 if missing_row is not none or missing_col is not none return none if putrow i mat lists colcands 1 - k res = helper i + 1 mat missing_row missing_col rowcands = idx for idx l in enumerate lists if l 0 == rowbase res = helper if len colcands >= 2 mat = deepcopy backup def helper_col i mat missing_row missing_col used if i == n if missing_row is not none return mat missing_row assert missing_col is not none return mat k missing_col for k in range n colbase = mat 0 i colcands = idx for idx l in enumerate lists if l 0 == colbase and idx not in used assert len colcands <= 2 backup = deepcopy mat for idx in colcands if putcol i mat lists idx res = helper_row i mat missing_row missing_col used | idx if res is not none return res mat = deepcopy backup if missing_row is not none or missing_col is not none return none else return helper_row i mat none i used def helper_row i mat missing_row missing_col used if missing_col == 0 rowbase = mat i 1 rowcands = idx for idx l in enumerate lists if l 1 == rowbase and idx not in used else rowbase = mat i 0 rowcands = idx for idx l in enumerate lists if l 0 == rowbase and idx not in used assert len rowcands <= 2 backup = deepcopy mat for idx in rowcands if putrow i mat lists idx res = helper_col i + 1 mat missing_row missing_col used | idx if res is not none return res mat = deepcopy backup if missing_row is not none or missing_col is not none return none else return helper_col i + 1 mat i none used mini = min l 0 for l in lists cands = idx for idx l in enumerate lists if l 0 == mini mat = 0 * n for _ in range n putrow 0 mat lists cands 0 if len cands == 1 res = helper_col 1 mat none 0 cands 0 else assert len cands == 2 putcol 0 mat lists cands 1 res = helper_col 1 mat none none set cands return  join map str res 		19 125
def putcol i mat col for k in range i if mat k i and mat k i != col k return false for k in range n if i if mat k i - 1 >= col k return false mat k i = col k return true 		21 30
def helper_row i mat missing_row missing_col used if missing_col == 0 rowbase = mat i 1 rowcands = idx for idx l in enumerate lists if l 1 == rowbase and idx not in used else rowbase = mat i 0 rowcands = idx for idx l in enumerate lists if l 0 == rowbase and idx not in used assert len rowcands <= 2 backup = deepcopy mat for idx in rowcands if putrow i mat lists idx res = helper_col i + 1 mat missing_row missing_col used | idx if res is not none return res mat = deepcopy backup if missing_row is not none or missing_col is not none return none else return helper_col i + 1 mat i none used 		92 111
def helper i mat missing_row missing_col if i == n if missing_row is not none return mat missing_row assert missing_col is not none return mat missing_col k for k in range n colbase = mat 0 i colcands = idx for idx l in enumerate lists if l 0 == colbase assert colcands backup = deepcopy mat for k idx in enumerate colcands if putcol i mat lists idx if missing_col != 0 rowbase = mat i 0 if rowbase == colbase if len colcands == 1 if missing_row is not none or missing_col is not none return none if putrow i mat lists colcands 1 - k res = helper i + 1 mat missing_row missing_col rowcands = idx for idx l in enumerate lists if l 0 == rowbase res = helper if len colcands >= 2 mat = deepcopy backup 		44 68
def putrow i mat row for k in range i if mat i k and mat i k != row k return false for k in range n if i if mat i - 1 k >= row k return false mat i k = row k return true 		32 41
def helper_col i mat missing_row missing_col used if i == n if missing_row is not none return mat missing_row assert missing_col is not none return mat k missing_col for k in range n colbase = mat 0 i colcands = idx for idx l in enumerate lists if l 0 == colbase and idx not in used assert len colcands <= 2 backup = deepcopy mat for idx in colcands if putcol i mat lists idx res = helper_row i mat missing_row missing_col used | idx if res is not none return res mat = deepcopy backup if missing_row is not none or missing_col is not none return none else return helper_row i mat none i used 		70 90
def read_ints inp = sys stdin return list map int next inp strip split 		15 16

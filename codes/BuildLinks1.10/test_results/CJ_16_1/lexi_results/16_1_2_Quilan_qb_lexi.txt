def rec rem grid possible if rem == 0 yield grid for index cur in enumerate possible ngrid = grid + cur npossible = possible index + possible index + 1 if len grid == 0 for ret in rec rem - 1 ngrid npossible yield ret continue prev = grid - 1 bad = false for c in xrange len cur if prev c >= cur c bad = true break if bad continue for ret in rec rem - 1 ngrid npossible yield ret return 		46 65
def solveproblem rnd n x x = sorted x x = map tuple x for v in x print \t**%s % v origset = set x origcount = v 0 for v in x for v in x origcount v += 1 for grid in rec n x count = v origcount v for v in x for v in grid print \t%s % list v rows = v for v in grid cols = tuple grid r c for r in xrange n for c in xrange n found = set rows found |= set cols for v in rows if v not in origset count v = 0 count v -= 1 for v in cols if tuple v not in origset count v = 0 count v -= 1 bad = false for v in origset if v not in found print \tnever scanned %s % v bad = true if bad continue for v in rows print \t\trow %s\t%s % v origcount v if v in origset else - 123 for v in cols print \t\tcol %s\t%s % v origcount v if v in origset else - 123 for v ct in count items print \t\t** %s\t%s % v count v ret = 0 for v ct in count items if ct != 0 return v print bad exit 0 return 		67 122
def getinput if curtype == example return examplestring filename = %s- % curproblem if curtype == large filename = %s-large.in % curproblem if curtype == small filename = %s-small-attempt%d.in % curproblem curattempt if curtype == practice filename = %s-small-practice.in % curproblem with open filename rt as f buf = f readlines return join buf 		19 30
def parseinput buf buf = buf split \n buf = filter len buf t = int buf 0 buf = buf 1 outbuf = for _ in xrange 1 t + 1 n = parse buf 0 i buf = buf 1 w = parse buf i i * n for i in xrange 2 * n - 1 buf = buf len w outbuf append n w pass return outbuf 		32 44

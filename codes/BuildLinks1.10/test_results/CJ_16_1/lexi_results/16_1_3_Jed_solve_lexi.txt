def solve bnext bnext = i - 1 for i in bnext circ = find_circ_len bnext vtx2type = none * len bnext def get_type src if not vtx2type src vtx2type src = do_get_type src return vtx2type src def do_get_type src if circ src == 2 return tgroup src 0 if not circ src t = get_type bnext src if type t is tgroup return tgroup t id t size + 1 assert type t is tcircle return t assert circ src > 2 return tcircle circ src grp_size = 0 * len bnext max_circ = 0 for i in range len bnext t = get_type i if type t is tgroup grp_size t id = max grp_size t id t size else max_circ = max max_circ t size grp_base = 0 for i in circ if i == 2 grp_base += 1 return max max_circ sum grp_size + grp_base 		53 90
def __init__ self id s self size = s self id = id 		45 47
def do_get_type src if circ src == 2 return tgroup src 0 if not circ src t = get_type bnext src if type t is tgroup return tgroup t id t size + 1 assert type t is tcircle return t assert circ src > 2 return tcircle circ src 		64 75
def __init__ self s self size = s 		50 51
def get_type src if not vtx2type src vtx2type src = do_get_type src return vtx2type src 		59 62
def main nr_case = int input for case in range nr_case n = int input bmap = list map int input split assert len bmap == n print case #{}: {} format case + 1 solve bmap 		93 99
def find_circ_len bnext circ = 0 * len bnext visited = 0 * len bnext vis_id = 0 for i in range len bnext if visited i continue j = i vis_id += 1 while true j = bnext j if visited j break visited j = vis_id if visited j != vis_id continue clen = 0 src = j t = src while true t = bnext t clen += 1 if t == src break t = src while true circ t = clen t = bnext t if t == src break return circ 		7 41

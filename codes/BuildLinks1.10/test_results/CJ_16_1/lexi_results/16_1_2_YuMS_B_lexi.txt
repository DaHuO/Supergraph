def main global ans t = input for i in xrange 1 t + 1 n = input l = for _ in range 2 * n - 1 l = map int raw_input strip split l append l ans = none print case #{0}: {1} format i solve l n 		59 69
def solve l n global ans def search following k rows columns missed global ans if k == n ans = l x missed for x in rows return n21 = 2 * n - 1 valid_search = if k == 0 possibles = range n21 else possibles = following rows - 1 for possible in possibles if len following possible >= n - k - 1 valid_search append possible for picked in valid_search new_missed = missed filtered_columns = ok = true for j in range n filtered_column = filter lambda x l x k == l picked j and x != picked columns j if not len filtered_column if new_missed != - 1 and new_missed != j ok = false break else new_missed = j filtered_columns append filtered_column if ok search following k + 1 rows + picked filtered_columns new_missed if ans return n21 = 2 * n - 1 following = for _ in range n21 for i in range n21 for j in range n21 if i == j continue ok = true for k in range n if l j k <= l i k ok = false break if ok following i append j columns = range n21 for _ in range n21 search following 0 columns - 1 return  join map str ans 		2 57
def search following k rows columns missed global ans if k == n ans = l x missed for x in rows return n21 = 2 * n - 1 valid_search = if k == 0 possibles = range n21 else possibles = following rows - 1 for possible in possibles if len following possible >= n - k - 1 valid_search append possible for picked in valid_search new_missed = missed filtered_columns = ok = true for j in range n filtered_column = filter lambda x l x k == l picked j and x != picked columns j if not len filtered_column if new_missed != - 1 and new_missed != j ok = false break else new_missed = j filtered_columns append filtered_column if ok search following k + 1 rows + picked filtered_columns new_missed if ans return 		4 40

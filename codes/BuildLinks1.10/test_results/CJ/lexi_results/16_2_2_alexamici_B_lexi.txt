def case_reader tc infile t = next infile split del infile return locals 		18 21
def common_setup pass 		14 15
def case_solver tc n = none p = none i = none t = none s = none ** kwargs import itertools as it def partial res_c res_j t0 t1 if len t0 == 0 return res_c res_j c = t0 0 j = t1 0 t0 = t0 1 t1 = t1 1 if c != ? nc = c else nc = list 0123456789 if j != ? nj = j else nj = list 0123456789 mm = 9999 9999 9999 for nnc nnj in it product nc nj rc rj = partial res_c + nnc res_j + nnj t0 t1 if abs int rc - int rj < mm 0 or abs int rc - int rj == mm 0 and rc < mm 1 or abs int rc - int rj == mm 0 and rc == mm 1 and rj < mm 2 mm = abs int rc - int rj rc rj return mm 1 mm 2 res_c res_j = partial 0 0 t 0 t 1 return case #{:d}: {} {} format tc res_c 1 res_j 1 		24 55
def partial res_c res_j t0 t1 if len t0 == 0 return res_c res_j c = t0 0 j = t1 0 t0 = t0 1 t1 = t1 1 if c != ? nc = c else nc = list 0123456789 if j != ? nj = j else nj = list 0123456789 mm = 9999 9999 9999 for nnc nnj in it product nc nj rc rj = partial res_c + nnc res_j + nnj t0 t1 if abs int rc - int rj < mm 0 or abs int rc - int rj == mm 0 and rc < mm 1 or abs int rc - int rj == mm 0 and rc == mm 1 and rj < mm 2 mm = abs int rc - int rj rc rj return mm 1 mm 2 		27 53

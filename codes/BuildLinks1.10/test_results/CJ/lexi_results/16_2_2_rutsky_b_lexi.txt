def solve_impl c j if not c return 0 for i in range len c if c i == ? or j i == ? break else return abs int c - int j c j c1 = int c i or 0 j1 = int j i or 0 if c1 != j1 if c1 < j1 cc = c replace ? 9 jj = j replace ? 0 else cc = c replace ? 0 jj = j replace ? 9 return abs int cc - int jj cc jj if c i != ? assert j i == ? res1 = solve_impl c i c i + j i + 1 res2 = solve_impl c i str int c i + 1 % 10 + j i + 1 res3 = solve_impl c i str int c i + 9 % 10 + j i + 1 diff cc jj = sorted res1 res2 res3 0 return diff c i + cc j i + jj elif j i != ? assert c i == ? res1 = solve_impl j i + c i + 1 j i res2 = solve_impl str int j i + 1 % 10 + c i + 1 j i res3 = solve_impl str int j i + 9 % 10 + c i + 1 j i diff cc jj = sorted res1 res2 res3 0 return diff c i + cc j i + jj else assert c i == ? and j i == ? res1 = solve_impl 0 + c i + 1 0 + j i + 1 res2 = solve_impl 0 + c i + 1 1 + j i + 1 res3 = solve_impl 1 + c i + 1 0 + j i + 1 diff cc jj = sorted res1 res2 res3 0 return diff c i + cc j i + jj 		12 60
def solve c j return solve_impl c j 1 		63 64

def trywithfill c j k nowc nowj fillc fillj tempc = nowc * 10 ** len c - k - 1 + 0 if k >= len c - 1 else int c k + 1 replace ? fillc tempj = nowj * 10 ** len c - k - 1 + 0 if k >= len c - 1 else int j k + 1 replace ? fillj update tempc tempj 		19 25
def clear global ans ans = 10e19 		5 7
def main t = input for i in xrange 1 t + 1 c j = raw_input split clear print case #{0}: {1} format i solve c j 		72 77
def update nowc nowj global ans global bestc global bestj now = abs nowc - nowj if now < ans or now == ans and nowc < bestc or nowj < bestj ans = abs nowc - nowj bestc = nowc bestj = nowj 		9 17
def solve c j global bestc global bestj possibles = now = 0 normal = true for i in range len c if c i == ? and j i == ? now *= 10 trywithfill c j i now now + 1 9 0 trywithfill c j i now + 1 now 0 9 elif c i == ? now *= 10 num = int j i if num > 0 trywithfill c j i now + num - 1 now + num 9 0 if num < 9 trywithfill c j i now + num + 1 now + num 0 9 now += num elif j i == ? now *= 10 num = int c i if num > 0 trywithfill c j i now + num now + num - 1 0 9 if num < 9 trywithfill c j i now + num now + num + 1 9 0 now += num else now *= 10 if int c i == int j i now += int c i continue else if int c i < int j i trywithfill c j i now + int c i now + int j i 9 0 else trywithfill c j i now + int c i now + int j i 0 9 normal = false break if normal trywithfill c j len c - 1 now now 0 0 return str bestc zfill len c +  + str bestj zfill len c 		27 70

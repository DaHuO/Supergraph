def best answers return min answers key = lambda csum jsum abs csum - jsum csum jsum 		13 14
def main t = int sys stdin readline strip for i in xrange t c j = sys stdin readline strip split c j = solve c j print case #%s: %s %s % i + 1 c j 		128 134
def solve c j len = len c assert len c == len j equal = 1 first_bigger = 2 last_bigger = 3 decs = 10 ** len - i - 1 for i in xrange len def best answers return min answers key = lambda csum jsum abs csum - jsum csum jsum def solve2 i csum jsum mode if i == len return csum jsum if c i != ? and j i != ? x = int c i y = int j i if mode == equal and x > y new_mode = last_bigger elif mode == equal and x < y new_mode = first_bigger else new_mode = mode return solve2 i + 1 csum + x * decs i jsum + y * decs i new_mode elif c i == ? and j i == ? if mode == equal ans1 = solve2 i + 1 csum jsum equal ans2 = solve2 i + 1 csum jsum + decs i first_bigger ans3 = solve2 i + 1 csum + decs i jsum last_bigger return best ans1 ans2 ans3 elif mode == first_bigger return solve2 i + 1 csum + 9 * decs i jsum first_bigger elif mode == last_bigger return solve2 i + 1 csum jsum + 9 * decs i last_bigger elif c i != ? x = int c i if mode == equal answers = ans1 = solve2 i + 1 csum + x * decs i jsum + x * decs i equal answers append ans1 if x < 9 ans2 = solve2 i + 1 csum + x * decs i jsum + x + 1 * decs i first_bigger answers append ans2 if x > 0 ans3 = solve2 i + 1 csum + x * decs i jsum + x - 1 * decs i last_bigger answers append ans3 return best answers elif mode == first_bigger return solve2 i + 1 csum + x * decs i jsum first_bigger elif mode == last_bigger return solve2 i + 1 csum + x * decs i jsum + 9 * decs i last_bigger else y = int j i if mode == equal answers = ans1 = solve2 i + 1 csum + y * decs i jsum + y * decs i equal answers append ans1 if y < 9 ans2 = solve2 i + 1 csum + y + 1 * decs i jsum + y * decs i last_bigger answers append ans2 if y > 0 ans3 = solve2 i + 1 csum + y - 1 * decs i jsum + y * decs i first_bigger answers append ans3 return best answers elif mode == first_bigger return solve2 i + 1 csum + 9 * decs i jsum + y * decs i first_bigger elif mode == last_bigger return solve2 i + 1 csum jsum + y * decs i last_bigger ans = solve2 0 0 0 equal return str ans 0 rjust len 0 str ans 1 rjust len 0 		3 122
def solve2 i csum jsum mode if i == len return csum jsum if c i != ? and j i != ? x = int c i y = int j i if mode == equal and x > y new_mode = last_bigger elif mode == equal and x < y new_mode = first_bigger else new_mode = mode return solve2 i + 1 csum + x * decs i jsum + y * decs i new_mode elif c i == ? and j i == ? if mode == equal ans1 = solve2 i + 1 csum jsum equal ans2 = solve2 i + 1 csum jsum + decs i first_bigger ans3 = solve2 i + 1 csum + decs i jsum last_bigger return best ans1 ans2 ans3 elif mode == first_bigger return solve2 i + 1 csum + 9 * decs i jsum first_bigger elif mode == last_bigger return solve2 i + 1 csum jsum + 9 * decs i last_bigger elif c i != ? x = int c i if mode == equal answers = ans1 = solve2 i + 1 csum + x * decs i jsum + x * decs i equal answers append ans1 if x < 9 ans2 = solve2 i + 1 csum + x * decs i jsum + x + 1 * decs i first_bigger answers append ans2 if x > 0 ans3 = solve2 i + 1 csum + x * decs i jsum + x - 1 * decs i last_bigger answers append ans3 return best answers elif mode == first_bigger return solve2 i + 1 csum + x * decs i jsum first_bigger elif mode == last_bigger return solve2 i + 1 csum + x * decs i jsum + 9 * decs i last_bigger else y = int j i if mode == equal answers = ans1 = solve2 i + 1 csum + y * decs i jsum + y * decs i equal answers append ans1 if y < 9 ans2 = solve2 i + 1 csum + y + 1 * decs i jsum + y * decs i last_bigger answers append ans2 if y > 0 ans3 = solve2 i + 1 csum + y - 1 * decs i jsum + y * decs i first_bigger answers append ans3 return best answers elif mode == first_bigger return solve2 i + 1 csum + 9 * decs i jsum + y * decs i first_bigger elif mode == last_bigger return solve2 i + 1 csum jsum + y * decs i last_bigger 		16 76

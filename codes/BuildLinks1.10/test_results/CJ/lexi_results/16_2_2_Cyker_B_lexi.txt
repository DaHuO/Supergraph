def solve_gt1 c j i n = len c c j = list c list j cp jp = solve_trivial c i j i c i j i = cp jp c i j i = fill c i 0 fill j i 9 return c j 		84 90
def solve_lt c j i def solve_lt1 c j i n = len c c j = list c list j cp jp = solve_trivial c i j i c i j i = cp jp c i j i = fill c i 9 fill j i 0 return c j def solve_lt2 c j i n = len c c j = list c list j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 1 0 ok = true break elif c k == ? and j k != ? if j k != 9 c k = str int j k + 1 ok = true break elif c k != ? and j k == ? if c k != 0 j k = str int c k - 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 0 fill j k 9 return c j else return none return better solve_lt1 c j i solve_lt2 c j i 		46 81
def solve_lt2 c j i n = len c c j = list c list j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 1 0 ok = true break elif c k == ? and j k != ? if j k != 9 c k = str int j k + 1 ok = true break elif c k != ? and j k == ? if c k != 0 j k = str int c k - 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 0 fill j k 9 return c j else return none 		55 80
def solve_trivial c j n = len c ans = list c for i in range n if ans i == ? ans i = j i if j i != ? else 0 return ans ans 		5 11
def fill s c s = list s for i in range len s if s i == ? s i = c return s 		39 44
def solve_lt1 c j i n = len c c j = list c list j cp jp = solve_trivial c i j i c i j i = cp jp c i j i = fill c i 9 fill j i 0 return c j 		47 53
def solve_gt c j i def solve_gt1 c j i n = len c c j = list c list j cp jp = solve_trivial c i j i c i j i = cp jp c i j i = fill c i 0 fill j i 9 return c j def solve_gt2 c j i n = len c c j = list c list j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 0 1 ok = true break elif c k == ? and j k != ? if j k != 0 c k = str int j k - 1 ok = true break elif c k != ? and j k == ? if c k != 9 j k = str int c k + 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j else return none def solve_gt3 c j i n = len c c j = list c list j for k in range i - 1 - 1 - 1 if j k != ? and j k != 0 c k = str int j k - 1 c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 0 1 ok = true break elif c k == ? and j k != ? if j k != 0 c k = str int j k - 1 ok = true break elif c k != ? and j k == ? if c k != 9 j k = str int c k + 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j else return none def solve_gt4 c j i n = len c c j = list c list j for k in range i - 1 - 1 - 1 if c k != ? and c k != 9 j k = str int c k + 1 c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 0 1 ok = true break elif c k == ? and j k != ? if j k != 0 c k = str int j k - 1 ok = true break elif c k != ? and j k == ? if c k != 9 j k = str int c k + 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j else return none sol = better solve_gt1 c j i solve_gt2 c j i sol = better sol solve_gt3 c j i sol = better sol solve_gt4 c j i return sol 		83 189
def better sol1 sol2 if sol1 is none return sol2 elif sol2 is none return sol1 c1 j1 = sol1 c2 j2 = sol2 c1 j1 = int join c1 int join j1 c2 j2 = int join c2 int join j2 if abs c1 - j1 < abs c2 - j2 return sol1 elif abs c1 - j1 > abs c2 - j2 return sol2 else if c1 < c2 return sol1 elif c1 > c2 return sol2 else if j1 < j2 return sol1 else return sol2 		13 37
def solve_gt3 c j i n = len c c j = list c list j for k in range i - 1 - 1 - 1 if j k != ? and j k != 0 c k = str int j k - 1 c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 0 1 ok = true break elif c k == ? and j k != ? if j k != 0 c k = str int j k - 1 ok = true break elif c k != ? and j k == ? if c k != 9 j k = str int c k + 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j else return none 		119 151
def solve_gt2 c j i n = len c c j = list c list j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 0 1 ok = true break elif c k == ? and j k != ? if j k != 0 c k = str int j k - 1 ok = true break elif c k != ? and j k == ? if c k != 9 j k = str int c k + 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j else return none 		92 117
def solve_eq c j i n = len c c j = list c list j c i j i = solve_trivial c i j i c i + 1 j i + 1 = solve c i + 1 j i + 1 return c j 		191 196
def solve_gt4 c j i n = len c c j = list c list j for k in range i - 1 - 1 - 1 if c k != ? and c k != 9 j k = str int c k + 1 c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j ok = false for k in range i - 1 - 1 - 1 if c k == ? and j k == ? c k j k = 0 1 ok = true break elif c k == ? and j k != ? if j k != 0 c k = str int j k - 1 ok = true break elif c k != ? and j k == ? if c k != 9 j k = str int c k + 1 ok = true break if ok c k j k = solve_trivial c k j k c k j k = fill c k 9 fill j k 0 return c j else return none 		153 185
def solve c j n = len c found = none for i in range n if c i != ? and j i != ? found = i break if found is none return solve_trivial c j elif c i < j i return solve_lt c j i elif c i > j i return solve_gt c j i else return solve_eq c j i 		198 212

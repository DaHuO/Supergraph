def trymaximize num if type num == list num = str num digits = 9 * num count ? return num replace ? 9 		102 106
def getoutput solved lines = for i solvedcase in enumerate solved lines append case #%d: %s % i + 1  join solvedcase return \n join lines 		131 135
def generateoutput filename outfile = none cases = getcases filename solvedcases = solvecase case for case in cases output = getoutput solvedcases if outfile == none outfile = filename - 2 + out with open outfile w as h h write output 		137 144
def getcases filename with open filename as h data = h read return parseinput data 		125 128
def parseinput text cases = for i line in enumerate text splitlines if i == 0 continue line = line strip num = tuple str line split  cases append num return cases 		114 122
def solvecasec nums reversesol = false lastwasq = false g1 g2 = nums onums = nums if g1 == and g2 == return g1 = list g1 g2 = list g2 n1 = n2 = nums = cases = for i d1 d2 in list enumerate zip g1 g2 if ? in d1 d2 break if g1 i != g2 i g1 = join g1 g2 = join g2 if int g1 i > int g2 i return tryminimize g1 trymaximize g2 else return trymaximize g1 tryminimize g2 if i == len g1 - 1 and ? not in d1 d2 return onums prefix = g1 i g1 = g1 i g2 = g2 i fopts = if d1 d2 == ? ? fopts = dopts = 0 9 1 dopts1 = dopts dopts2 = dopts if lastwasq is not false and len g1 > 1 and g1 1 == ? and g2 1 == ? dopts1 = lastwasq 0 dopts2 = lastwasq 1 for opt1 in dopts1 for opt2 in dopts2 curr1 = opt1 + g1 1 curr2 = opt2 + g2 1 fopts append solvecase join prefix + curr1 join prefix + curr2 lastwasq = opt1 opt2 elif d2 == ? return solvecase join prefix + g2 join prefix + g1 true elif d1 == ? d2i = int d2 fopts = opts = list set str d2i + 1 % 10 str d2i - 1 % 10 d2 0 9 for opt in opts curr = opt + g1 1 fopts append solvecase join prefix + curr join prefix + g2 res = bmatch = none float inf for num1 num2 in fopts if reversesol num2 num1 = num1 num2 d = abs int num1 - int num2 doswap = false if d == bmatch 1 oldc oldj = int bmatch 0 0 int bmatch 0 1 newc newj = int num1 int num2 if newc < oldc doswap = true elif newc == oldc if newj < oldj doswap = true if d < bmatch 1 doswap = true if doswap bmatch = num1 num2 d return bmatch 0 		14 97
def tryminimize num if type num == list num = str num digits = 0 * num count ? return num replace ? 0 		108 112
def solvecase nums reversesol = false lastwasq = false cname = tuple nums reversesol lastwasq if cname in cached return cached cname res = solvecasec nums reversesol lastwasq cached cname = res return res 		6 12
def getdigits num return list map int str num 		3 4

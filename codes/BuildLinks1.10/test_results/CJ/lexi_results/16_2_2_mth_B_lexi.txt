def validscores pattern regexp = re compile pattern replace ? . formatstr = %0 + str len pattern + d for score in xrange 10 ** len pattern if regexp match formatstr % score yield score 		15 20
def solve c j numdigits = len c best = 10 ** numdigits none none def rec i sc sj if i == numdigits best 0 = min best 0 abs sc - sj sc sj else pc = c i pj = j i if pc == ? and pj == ? if sc < sj rec i + 1 sc * 10 + 9 sj * 10 elif sc > sj rec i + 1 sc * 10 sj * 10 + 9 else rec i + 1 sc * 10 sj * 10 rec i + 1 sc * 10 sj * 10 + 1 rec i + 1 sc * 10 + 1 sj * 10 elif pc == ? dj = int pj if sc < sj rec i + 1 sc * 10 + 9 sj * 10 + dj elif sc > sj rec i + 1 sc * 10 + 0 sj * 10 + dj else if dj > 0 rec i + 1 sc * 10 + dj - 1 sj * 10 + dj rec i + 1 sc * 10 + dj sj * 10 + dj if dj < 9 rec i + 1 sc * 10 + dj + 1 sj * 10 + dj elif pj == ? dc = int pc if sc < sj rec i + 1 sc * 10 + dc sj * 10 + 0 elif sc > sj rec i + 1 sc * 10 + dc sj * 10 + 9 else if dc > 0 rec i + 1 sc * 10 + dc sj * 10 + dc - 1 rec i + 1 sc * 10 + dc sj * 10 + dc if dc < 9 rec i + 1 sc * 10 + dc sj * 10 + dc + 1 else dc = int pc dj = int pj rec i + 1 sc * 10 + dc sj * 10 + dj rec 0 0 0 formatstr = %0 + str numdigits + d return formatstr +  + formatstr % best 0 1 		22 75
def parse inp c j = x for x in inp readline split assert len c == len j return c j 		10 13
def rec i sc sj if i == numdigits best 0 = min best 0 abs sc - sj sc sj else pc = c i pj = j i if pc == ? and pj == ? if sc < sj rec i + 1 sc * 10 + 9 sj * 10 elif sc > sj rec i + 1 sc * 10 sj * 10 + 9 else rec i + 1 sc * 10 sj * 10 rec i + 1 sc * 10 sj * 10 + 1 rec i + 1 sc * 10 + 1 sj * 10 elif pc == ? dj = int pj if sc < sj rec i + 1 sc * 10 + 9 sj * 10 + dj elif sc > sj rec i + 1 sc * 10 + 0 sj * 10 + dj else if dj > 0 rec i + 1 sc * 10 + dj - 1 sj * 10 + dj rec i + 1 sc * 10 + dj sj * 10 + dj if dj < 9 rec i + 1 sc * 10 + dj + 1 sj * 10 + dj elif pj == ? dc = int pc if sc < sj rec i + 1 sc * 10 + dc sj * 10 + 0 elif sc > sj rec i + 1 sc * 10 + dc sj * 10 + 9 else if dc > 0 rec i + 1 sc * 10 + dc sj * 10 + dc - 1 rec i + 1 sc * 10 + dc sj * 10 + dc if dc < 9 rec i + 1 sc * 10 + dc sj * 10 + dc + 1 else dc = int pc dj = int pj rec i + 1 sc * 10 + dc sj * 10 + dj 		25 67
def main import sys sys setrecursionlimit recursion_limit import resource soft hard = resource getrlimit resource rlimit_as resource setrlimit resource rlimit_as mem_limit_gb * 1024 ** 3 hard with open file_name_base + .in r as inp numcases = int inp readline inputs = parse inp for _ in xrange numcases if num_processes == 0 runners = lambda inp = inp apply solve inp for inp in inputs else from multiprocessing import pool from signal import sigint sig_ign signal pool = pool num_processes signal sigint sig_ign runners = pool apply_async solve inp get for inp in inputs pool close casefmt = % + str len str numcases + d progressfmt = [%s/%s] %%s\n % casefmt casefmt with open file_name_base + .out w as out for case runner in enumerate runners 1 result = runner out write case #%d: %s\n % case result out flush sys stderr write progressfmt % case numcases result 		77 105

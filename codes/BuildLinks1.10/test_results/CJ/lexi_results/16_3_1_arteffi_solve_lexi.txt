def add_if_any_left counts count party if count != 0 heappush counts count party 		68 70
def main test_cases = parse_input input_path solutions = for i test_case in enumerate test_cases print - * 10 print test case i solution = solve test_case print test_case -> solution solutions append solution output_solutions solutions 		4 13
def solve counts counts = list zip - c for c in counts chr ord a + n for n in range 26 heapify counts solution = while counts step = one_turn counts solution append step return solution 		33 40
def one_turn counts count1 party1 = heappop counts if not counts add_if_any_left counts count1 + 1 party1 return party1 count2 party2 = heappop counts if not counts add_if_any_left counts count1 + 1 party1 add_if_any_left counts count2 + 1 party2 return party1 + party2 count3 party3 = heappop counts if not counts and count1 == count2 == count3 == - 1 heappush counts count2 party2 heappush counts count3 party3 return party1 add_if_any_left counts count1 + 1 party1 add_if_any_left counts count2 + 1 party2 heappush counts count3 party3 return party1 + party2 		43 65
def output_solutions solutions with open output w as f for i solution in enumerate solutions 1 f write case #{i}: {result}\n format i = i result =  join solution 		27 30
def parse_input path test_cases = with open path as f n = int f readline for i in range n parties = int f readline counts = int c for c in f readline split test_cases append counts return test_cases 		16 24

def can_match ints strs s = str ints zfill len strs for i in xrange len strs if strs i != ? and strs i != s i return false return true 		7 12
def zeroor9 bigger current if bigger == current return 0 else return 9 		1 5
def do_case c j n = len c founddifference = none outc = outj = for i in xrange n if founddifference is none if c i == j i if c i == ? outc += 0 outj += 0 else outc += c i outj += j i elif c i == ? outc += j i outj += j i elif j i == ? outc += c i outj += c i elif int c i > int j i founddifference = c outc += c i outj += j i else founddifference = j outc += c i outj += j i else if c i == ? outc += zeroor9 founddifference c else outc += c i if j i == ? outj += zeroor9 founddifference j else outj += j i return outc outj 		93 130
def do_dynamic c j n start goal if start == n return cached = cache get start goal none if cached is not none return cached if goal == maxc if c start == ? c = 9 else c = c start if j start == ? j = 0 else j = j start cs js = do_dynamic c j n start + 1 goal return c + cs j + js elif goal == maxj if c start == ? c = 0 else c = c start if j start == ? j = 9 else j = j start cs js = do_dynamic c j n start + 1 goal cache start goal = c + cs j + js return c + cs j + js else rngi = xrange 0 10 if c start != ? rngi = int c start rngj = xrange 0 10 if j start != ? rngj = int j start bestabs = none bestc = none bestj = none for c in rngi for j in rngj if len rngi > 1 or len rngj > 1 and abs c - j > 1 continue if c > j cs js = do_dynamic c j n start + 1 maxj elif c < j cs js = do_dynamic c j n start + 1 maxc else cs js = do_dynamic c j n start + 1 equal ccs = str c + cs jjs = str j + js absx = abs int ccs - int jjs if bestabs is none or absx < bestabs bestabs = absx bestc = ccs bestj = jjs cache start goal = bestc bestj return bestc bestj 		18 76
def do_brute c j bestc = none bestj = none bestabs = none for c in xrange 0 10 ** len c for j in xrange 0 10 ** len j if can_match c c and can_match j j absx = abs c - j if bestabs is none or absx < bestabs or absx == bestabs and c < bestc or absx == bestabs and c == bestc and j < bestj bestabs = absx bestc = c bestj = j if bestabs == 0 return str bestc str bestj return str bestc zfill len c str bestj zfill len j 		77 91

def bf c j n = len c def make_choices c cs = for c in range 10 ** n c_s = str c zfill n for x y in zip c_s c if y == ? continue if x != y break else cs append c_s return cs cs = make_choices c js = make_choices j a = for c in cs for j in js c_val = int join c j_val = int join j a append abs c_val - j_val c_val j_val join c join j _ _ _ c j = min a return c +  + j 		5 28
def go c j n = len c assert len j == n a = for num_match in range n + 1 c = * n j = * n for i in range num_match if c i == ? if j i == ? c i = 0 j i = 0 else c i = j i j i = j i else c i = c i j i = c i if j i != ? and j i != c i break else if num_match == n a append 0 0 0 join c join j break if c num_match == ? cs = 0123456789 else cs = c num_match if j num_match == ? js = 0123456789 else js = j num_match for xc in cs for xj in js c num_match = xc j num_match = xj c_val = int join c j_val = int join j for i in range num_match + 1 n if c i == ? c i = 9 if c_val < j_val else 0 else c i = c i if j i == ? j i = 9 if j_val < c_val else 0 else j i = j i c_val = int join c j_val = int join j a append abs c_val - j_val c_val j_val join c join j _ _ _ c j = min a v = c +  + j return v 		30 87
def make_choices c cs = for c in range 10 ** n c_s = str c zfill n for x y in zip c_s c if y == ? continue if x != y break else cs append c_s return cs 		7 18

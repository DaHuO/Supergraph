def resolve_common_prefix c j prefix = for i in range len c if c i == ? and j i == ? prefix append 0 elif c i == ? prefix append int j i elif j i == ? prefix append int c i elif c i == j i prefix append int c i else break return prefix 		6 19
def bruteforce c j sample = 0123456789 counts = counter c + counter j choice_size = counts get ? 0 result_c = none result_j = none min_diff = 99999999999999999999999999999999999999999999999 for choice in itertools product sample repeat = choice_size choice = list choice tmp_c = for c in c tmp_c += choice pop 0 if c == ? else c tmp_j = for c in j tmp_j += choice pop 0 if c == ? else c diff = abs int tmp_c - int tmp_j if result_c is none or diff < min_diff min_diff = diff result_c = tmp_c result_j = tmp_j elif diff == min_diff if int result_c > int tmp_c min_diff = diff result_c = tmp_c result_j = tmp_j elif int result_c == int tmp_j if int result_j > int tmp_j min_diff = diff result_c = tmp_c result_j = tmp_j return result_c result_j 		32 62
def solve t c j result_c result_j = bruteforce c j print case #{}: {} {} format t result_c result_j 		65 68
def to_suffix seq replacement result = for c in seq if c == ? result append replacement else result append int c return result 		22 29
def main n_cases = int sys stdin readline strip for case in range n_cases c j = sys stdin readline strip split  solve case + 1 c j 		71 75

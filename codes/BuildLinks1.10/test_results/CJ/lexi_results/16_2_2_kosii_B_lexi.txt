def inversion_count seq if len seq < 2 return seq 0 l = len seq / 2 seq1 c1 = inversion_count seq l seq2 c2 = inversion_count seq l inv = 0 seq = while seq1 or seq2 if not seq1 seq += seq2 seq2 = elif not seq2 seq += seq1 seq1 = else e1 = seq1 0 e2 = seq2 0 if e1 > e2 inv += len seq1 seq append e2 seq2 = seq2 1 else seq append e1 seq1 = seq1 1 return seq inv + c1 + c2 		89 114
def nis input return map int input readline split 		58 59
def w output t res print result_string format t + 1 res output write result_string format t + 1 res + \n 		54 56
def sis input return input readline split 		61 62
def replace_qmark a b prod i = 0 an = 0 bn = 0 for j in a if j == ? an = 10 * an + prod i i += 1 else an = 10 * an + int j for j in b if j == ? bn = 10 * bn + prod i i += 1 else bn = 10 * bn + int j return an bn 		15 32
def main input_filename output_filename with open input_filename as input open output_filename w as output t = nis input for t in range t a b = sis input nqa nqb = counter a get ? 0 counter b get ? 0 comb = range 10 * nqa + nqb res = min c for c in product * comb key = lambda c minf a b c resa resb = replace_qmark a b res res = %0 + str len a + d %0 + str len b + d % resa resb w output t res 		38 52
def integer_sqrt i if not i return 0 if i < 0 raise valueerror cannot calculate square root of negative def n xn return xn + i / xn / 2 xn xnp xnpp = i n i n n i while xn != xnpp xn xnp xnpp = xnp xnpp n xnpp return min xnp xnp 		64 75
def __call__ self * args ** kwargs if tuple args tuple kwargs items in self memory return self memory tuple args tuple kwargs items else val = self f * args ** kwargs self memory tuple args tuple kwargs items = val return val 		81 87
def n xn return xn + i / xn / 2 		70 71
def minf a b c aa bb = replace_qmark a b c return abs aa - bb aa bb 		34 36
def __init__ self f self f = f self memory = 		78 80

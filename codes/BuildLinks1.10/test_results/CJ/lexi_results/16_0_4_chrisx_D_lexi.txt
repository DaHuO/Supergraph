def solve k c s if c * s < k return impossible sol = if k % c == 0 min_set_needed = k // c else min_set_needed = k // c + 1 assert s >= min_set_needed l = list zip_longest list range k list range c * min_set_needed fillvalue = 0 assert len l == c * min_set_needed pos = 0 for bit order_in_set in l if order_in_set != 0 pos *= k pos += bit if order_in_set == c - 1 sol append pos + 1 pos = 0 assert len set sol == len sol assert len sol <= s return sol 		17 40
def parse input_file output_file with open input_file as f t = int f readline split 0 out = open output_file w for i in range t k c s = map int f readline split sol = solve k c s sol =  join map str sol line = case # + str i + 1 + : + str sol print line out write line + \n return 		3 14

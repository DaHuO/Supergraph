def __repr__ self return self func __doc__ 		28 29
def __enter__ self print reading from {0}, outputting to {1} format self input_file_name self output_file_name self input = open self input_file_name r try self output = open self output_file_name w except self input close raise return self 		67 75
def __call__ self * args if not isinstance args collections hashable return self func * args if args in self cache return self cache args else value = self func * args self cache args = value return value 		18 26
def __get__ self obj objtype return functools partial self __call__ obj 		31 32
def _read_line self split_lines = false map_func = none return self _read_x_lines 1 split_lines map_func 0 		194 201
def solve_problem self all_needed = false if self input is none or self output is none raise assertionerror input/output file not opened. first_line = self input readline rstrip \n if not first_line raise exception first line empty in input file n_test_cases = int first_line results = for i in range 1 n_test_cases + 1 input_vars = self _read_input_for_case i result = self solve_case * input_vars if not all_needed self _write_output_for_case i result else results append result if all_needed self _change_all_results results for i in range 1 n_test_cases + 1 self _write_output_for_case i results i - 1 print solved! 		90 122
def main with problema as problem problem solve_problem all_needed = false 		285 287
def __repr__ self * args ** kwargs return impossible 		36 37
def _read_input_for_case self i number_of_parties = self _read_line map_func = int n_each_party = self _read_line split_lines = true map_func = int return number_of_parties n_each_party 		238 241
def _read_n_and_first_line self split_lines = false map_func = none n x = self _read_n_and_x_lines x = 1 split_lines = split_lines map_func = map_func return n x 0 		209 211
def __exit__ self exc_type exc_val exc_tb try try if exc_type is none data = self input read 1024 if data rstrip \n raise assertionerror there is still data not read in input file finally self input close finally self output close return false 		77 88
def _read_x_lines self x = 1 split_lines = false map_func = none lines = if split_lines split_lines =  for j in range x line = self input readline rstrip \n if split_lines line = line split split_lines if map_func is not none line = list map map_func line elif map_func is not none line = map_func line lines append line return lines 		172 192
def _read_input_for_case self i raise notimplementederror _read_input_for_case not implemented 		134 139
def __init__ self super __init__ 		235 236
def pre_compute self pass 		230 231
def __init__ self func self func = func self cache = 		14 16
def __init__ self print type self __name__ self input_file_name self output_file_name = self _find_input_and_output_files self input = none self output = none self pre_compute self _impossible = impossible 		42 48
def solve_case self number_of_parties n_each_party solution = n_each_party = list n_each_party current_n = sum n_each_party letters = string ascii_uppercase while current_n taken = 0 for i in range number_of_parties if current_n < 3 taken = n_each_party elif current_n == 3 for i x in enumerate n_each_party if x taken i += 1 break else raise assertionerror did not find one else if_one_no_more_than = current_n - 1 // 2 + 1 if_two_no_more_than = current_n - 2 // 2 + 1 current_max = max n_each_party n_parties_current_max = sum 1 for x in n_each_party if n_each_party == current_max for i x in enumerate n_each_party if x == current_max taken i += 1 if sum taken == 2 break solution append for i x in enumerate taken for j in range x solution - 1 += letters i n_each_party i -= x current_n = sum n_each_party if current_n if max n_each_party >= current_n // 2 + 1 print warning warning: {} format : join str z for z in n_each_party raise assertionerror solution not correct return  join solution 		243 282
def _multiple_n_and_repeat_x_lines self x = none split_lines = false map_func = none all_n = self _read_line split_lines = true map_func = int all_lines = for n in all_n current_x = n if x is none else x all_lines append self _read_x_lines current_x split_lines map_func return all_n all_lines 		213 219
def solve_case self * args raise notimplementederror solve_case not implemented 		124 129
def _write_output_for_case self i result to_output = case #{0}: {1} format i self _format_case_result result self output write to_output + \n print to_output 		161 170
def _read_n_and_x_lines self x = none split_lines = false map_func = none n = self _read_line map_func = int if x is none x = n return n self _read_x_lines x split_lines map_func 		203 207
def _repeat_n_and_x_lines self x = none split_lines = false map_func = none repeat = 2 all_n = all_lines = for i in range repeat n lines = self _read_n_and_x_lines x split_lines map_func all_n append n all_lines append lines return all_n all_lines 		221 228
def _format_case_result self result if result is none raise exception case answer should not be none if isinstance result codejamimpossible or result is codejamimpossible return self _impossible if isinstance result decimal if result == decimal 0 return 0.0000000 return {} format result quantize decimal 10 ** - 7 if isinstance result float return {0:.7f} format result if isinstance result list return  join self _format_case_result x for x in result return {0} format result 		141 159
def _change_all_results self results pass 		131 132
staticmethod def _find_input_and_output_files files = sorted list filter os path isfile os listdir . reverse = true patterns = ^[a-z]-large(-(attempt\d?|practice(-\d)?))?\.in$ ^[a-z]-small(-(attempt\d?|practice(-\d)?))?\.in$ ^sample\.in$ for pattern in patterns compiled_pattern = re compile pattern for file in files if compiled_pattern match file return file re sub \.in$ file + .out return input.in output.out 		50 65

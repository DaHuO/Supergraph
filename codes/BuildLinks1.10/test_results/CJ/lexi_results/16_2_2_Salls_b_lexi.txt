def solve s1 s2 bigger = none if s1 s2 bigger in memoized return memoized s1 s2 bigger out1 = out2 = if bigger is none bigger = none for n i j in enumerate zip s1 s2 if i == ? and j == ? if bigger == none option1 = 0 0 solve s1 n + 1 s2 n + 1 bigger = none option2 = 0 1 solve s1 n + 1 s2 n + 1 bigger = second option3 = 1 0 solve s1 n + 1 s2 n + 1 bigger = first best_option = choose_best option1 option2 option3 out1 = out1 + best_option 0 out2 = out2 + best_option 1 memoized s1 s2 bigger = out1 out2 return out1 out2 elif bigger == first out1 += 0 out2 += 9 elif bigger == second out1 += 9 out2 += 0 else assert false elif i == ? and j != ? if bigger == first out1 += 0 out2 += j elif bigger == second out1 += 9 out2 += j elif bigger == none option1 = j j solve s1 n + 1 s2 n + 1 bigger = none option2 = none if j != 0 option2 = chr ord j - 1 j solve s1 n + 1 s2 n + 1 bigger = second option3 = none if j != 9 option3 = chr ord j + 1 j solve s1 n + 1 s2 n + 1 bigger = first best_option = choose_best option1 option2 option3 out1 = out1 + best_option 0 out2 = out2 + best_option 1 memoized s1 s2 bigger = out1 out2 return out1 out2 else raise exception wtf elif i != ? and j == ? if bigger == first out1 += i out2 += 9 elif bigger == second out1 += i out2 += 0 elif bigger == none option1 = i i solve s1 n + 1 s2 n + 1 bigger = none option2 = none if i != 0 option2 = i chr ord i - 1 solve s1 n + 1 s2 n + 1 bigger = first option3 = none if i != 9 option3 = i chr ord i + 1 solve s1 n + 1 s2 n + 1 bigger = second best_option = choose_best option1 option2 option3 out1 = out1 + best_option 0 out2 = out2 + best_option 1 memoized s1 s2 bigger = out1 out2 return out1 out2 else raise exception wtf elif i != ? and j != ? if bigger == none if int i 10 > int j 10 bigger = first elif int i 10 < int j 10 bigger = second elif int i 10 == int j 10 bigger = none else raise exception wtf assert bigger in none first second out1 += i out2 += j else raise exception wtf memoized s1 s2 bigger = out1 out2 return out1 out2 		32 121
def choose_best options best_diff = none best_1 = none best_2 = none cbest_1 = none cbest_2 = none for op in options if op is none continue num1 = op 0 + op 2 0 num2 = op 1 + op 2 1 inum1 = int num1 10 inum2 = int num2 10 abs_diff = abs inum1 - inum2 if best_diff is none best_diff = abs_diff + 1 if abs_diff < best_diff or abs_diff == best_diff and inum1 < best_1 or abs_diff == best_diff and inum1 == best_1 and inum2 < best_2 best_diff = abs_diff best_1 = inum1 best_2 = inum2 cbest_1 = num1 cbest_2 = num2 return cbest_1 cbest_2 		6 28

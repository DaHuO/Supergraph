def bvec n ntrue if n == 1 yield ntrue == 1 return if n == ntrue yield true * n return for rec in bvec n - 1 ntrue yield false + rec if ntrue > 0 for rec in bvec n - 1 ntrue - 1 yield true + rec 		16 30
def parse_case instrm n = int instrm readline strip rows = for i in range 2 * n - 1 rows append int i for i in instrm readline strip split return rows 		8 13
def solve_case case rows = case rows sort nrows = len rows n = len rows 0 mat = np array rows twopown = int 2 ** nrows res = none for barr in bvec nrows n barr = np array barr assert len barr == nrows assert sum barr == n sum barr: {} format sum barr mat1 = mat barr mat2 = mat ~ barr mat1t = mat1 transpose for j in range n mat2plus = np row_stack mat2 j mat1t j mat2 j if mat2plus == mat1t all res = mat1t j if res is not none break assert res is not none return  join str i for i in res 		33 57

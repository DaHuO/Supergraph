def get_best_solution scores index = 0 best_sol = - 1 - 1 float inf easy_break = false if ? not in scores 0 and ? not in scores 1 print got: %s v %s % scores 0 scores 1 coders = scores 0 others = scores 1 return coders others abs int coders - int others while index < len scores 0 if scores 0 index != ? and scores 1 index != ? and scores 0 index != scores 1 index easy_break = true break if scores 0 index == ? or scores 1 index == ? break index += 1 if easy_break best00 = get_best_solution replace_all scores 0 index scores 0 index 0 replace_all scores 1 index scores 1 index 9 best01 = get_best_solution replace_all scores 0 index scores 0 index 9 replace_all scores 1 index scores 1 index 0 possibilities = best00 best01 if not easy_break if scores 0 index == ? and scores 1 index == ? best00 = get_best_solution replace scores 0 index 0 replace scores 1 index 0 best01 = get_best_solution replace_all scores 0 index 0 9 replace_all scores 1 index 1 0 best10 = get_best_solution replace_all scores 0 index 1 0 replace_all scores 1 index 0 9 best09 = get_best_solution replace_all scores 0 index 0 0 replace_all scores 1 index 9 9 best90 = get_best_solution replace_all scores 0 index 9 9 replace_all scores 1 index 0 0 possibilities = best00 best01 best10 best09 best90 elif scores 0 index == ? numfilled = scores 1 index numup = str int numfilled + 1 % 10 numdown = str int numfilled - 1 % 10 best00 = get_best_solution replace scores 0 index numfilled replace scores 1 index numfilled best01 = get_best_solution replace_all scores 0 index numup 0 replace_all scores 1 index numfilled 9 best10 = get_best_solution replace_all scores 0 index numdown 9 replace_all scores 1 index numfilled 0 possibilities = best00 best01 best10 else numfilled = scores 0 index numup = str int numfilled + 1 % 10 numdown = str int numfilled - 1 % 10 best00 = get_best_solution replace scores 0 index numfilled replace scores 1 index numfilled best01 = get_best_solution replace_all scores 0 index numfilled 0 replace_all scores 1 index numdown 9 best10 = get_best_solution replace_all scores 0 index numfilled 9 replace_all scores 1 index numup 0 possibilities = best00 best01 best10 for i in xrange len possibilities if possibilities i 2 < best_sol 2 best_sol = possibilities i elif possibilities i 2 == best_sol 2 if possibilities i 0 < best_sol 0 best_sol = possibilities i elif possibilities i 0 == best_sol 0 if possibilities i 1 < best_sol 1 best_sol = possibilities i return best_sol 		19 87
def solve input_file f = open input_file r output_file = input_file split . 0 + .out o = open output_file w num_tests = int f readline for nt in range num_tests string = f readline strip ans = print doing case %d: % nt + 1 scores = string split  best_solution = get_best_solution scores print best_solution o write case #%d: %s %s\n % nt + 1 best_solution 0 best_solution 1 		3 17
def replace string index char f = list string f index = char return join f 		89 92
def replace_all string index char subchar f = list string if f index != ? and f index != char raise exception f index = char for i in xrange index + 1 len f if f i == ? f i = subchar return join f 		94 102

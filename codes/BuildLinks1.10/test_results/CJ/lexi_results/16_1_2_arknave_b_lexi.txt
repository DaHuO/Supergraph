def print_grid grid for row in grid print  join map str row 		30 32
def insert_col grid x c for i in range len c grid i x = c i 		8 11
def main t = int input for case_num in range 1 t + 1 n = int input opts = for _ in range 2 * n - 1 opts append int x for x in input split opts sort grid = 0 for _ in range n for _ in range n used_row = false * n used_col = false * n insert_row grid 0 opts 0 used_row 0 = true skip = false cands = opts 1 x = 1 while len cands > 0 next_cands = for cand in cands score = 0 enc_i = - 1 for i in range n if not used_row i and valid_row grid i cand score += 1 enc_i = i if not used_col i and valid_col grid i cand score += 1 enc_i = - 1 * i if 0 < score <= x if enc_i > 0 insert_row grid enc_i cand used_row enc_i = true else insert_col grid - 1 * enc_i cand used_col - 1 * enc_i = true else next_cands append cand cands = next_cands x += 1 source = counter map tuple extract grid given = counter map tuple opts ans = map str list list source - given items 0 0 print case #{0}: {1} format case_num  join ans 		46 97
def extract grid out = for row in grid out append row n = len grid for j in range n col = for i in range n col append grid i j out append col return out 		34 44
def insert_row grid x r for i in range len r grid x i = r i 		3 6
def valid_row grid x r if all v == 0 for v in grid x return false for i in range len r if grid x i != 0 and grid x i != r i return false return true 		13 19
def valid_col grid x c non_zero = false for i in range len c if grid i x != 0 non_zero = true if grid i x != c i return false return non_zero 		21 28

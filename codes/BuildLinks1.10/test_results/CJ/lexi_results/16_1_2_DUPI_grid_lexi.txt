def clean ps n return rows cols for rows cols in ps if clean_valid rows and clean_valid cols and len rows <= n and len cols <= n 		17 18
def valid x y for i j in zip x y if i >= j return false return true 		5 9
def find_rows s rows = cols = s = sorted s key = lambda x tuple x for ss in s if len rows + len cols == len s + 1 break if len rows == 0 rows append ss continue if valid rows - 1 ss rows append ss else cols append ss assert len rows == len s + 1 / 2 or len cols == len s + 1 / 2 if len rows < len cols return cols rows else return rows cols 		34 52
def possibles s ps n if len s == 0 return ps if len ps == 0 ps = s 0 s 0 else ps = list rows + s 0 list cols for rows cols in ps + list rows list cols + s 0 for rows cols in ps ps = clean ps n return possibles s 1 ps n 		20 32
def geto s s = sorted s key = lambda x tuple x ps = possibles s len s + 1 / 2 for rows cols in ps v = false if len cols < len rows v = test cols rows else v = test rows cols if not v continue if len cols < len rows o = get_miss rows cols else o = get_miss cols rows print o o = str x for x in o o =  join o return o 		75 96
def test small large n = len large 0 all = x i for x in large for i in range n for x in small if x not in all return false return true 		54 61
def clean_valid l if len l <= 1 return true else return valid l - 2 l - 1 		11 15
def get_miss large small cols_first = set x 0 for x in small t = 0 for i x in enumerate large 0 if x not in cols_first t = i break o = row t for row in large return o 		64 72

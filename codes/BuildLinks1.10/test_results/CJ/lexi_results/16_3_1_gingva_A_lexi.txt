def parsescalar f c = int return c f next strip \r\n 		1 2
def solve p bins = for i c in enumerate p bins append c chr ord a + i bins sort bins reverse solution = while true bins sort reverse = true for i in range len bins - 1 - 1 - 1 if bins i 0 == 0 del bins i if len bins == 0 return solution if len bins == 1 n p = bins 0 if n % 2 solution append p solution extend p + p for i in xrange n / 2 return solution if len bins == 3 and bins 0 0 == bins 1 0 == bins 2 0 == 1 solution append bins 0 1 solution append bins 1 1 + bins 2 1 return solution if bins 0 0 > bins 1 0 + 1 solution append bins 0 1 * 2 bins 0 0 -= 2 bins sort reverse = true continue if bins 0 0 > bins 1 0 if len bins == 2 solution append bins 0 1 bins 0 0 -= 1 continue solution append bins 0 1 + bins 1 1 bins 0 0 -= 1 bins 1 0 -= 1 continue 		22 59
def parsetuple f c = int return tuple c s for s in f next strip \r\n split 		3 4
def main fn1 fn2 with open fn1 as f with open fn2 w as g ncases = parsescalar f for n in range ncases n = parsescalar f print n p = parsetuple f assert len p == n x = solve p print >> g case #%d: %s % n + 1  join c for c in x print case #%d: %s % n + 1  join c for c in x 		7 18

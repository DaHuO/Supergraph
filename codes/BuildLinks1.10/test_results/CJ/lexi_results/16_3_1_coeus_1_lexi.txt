def solve n p ps = str unichr ord a + i p for i p in enumerate p ps_max ps_max_count = get_maxes ps if len ps_max_count >= 2 bal = ps_max_count 2 return emptying ps bal else output = balance_max ps ps_max ps_max_count = get_maxes ps bal = ps_max_count 2 output += emptying ps bal return output 		41 53
def emptying ps bal output = max_pair = 0 for p in ps if p in bal max_pair = p 1 continue pairs = p 1 / 2 single = p 1 % 2 output extend %s%s % p 0 p 0 * pairs if single == 1 output append %s % p 0 max_str = join p 0 for p in bal output extend %s % max_str * max_pair return output 		3 18
def balance_max ps counts = sorted ps key = lambda dt dt 1 reverse = true if len counts > 1 max1 = counts 0 1 max2 = counts 1 1 diff = max1 - max2 for i in range len ps if ps i 0 == counts 0 0 ps i = counts 0 0 counts 1 1 if diff == 1 return counts 0 0 elif diff == 2 return %s%s % counts 0 0 counts 0 0 return 		20 33
def get_maxes ps ps_max = max p 1 for p in ps ps_max_count = p for p in ps if p 1 == ps_max return ps_max ps_max_count 		36 39

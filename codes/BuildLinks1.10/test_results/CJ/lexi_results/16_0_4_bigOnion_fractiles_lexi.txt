def readline self l = self __inputfile readline self __parsedfile write l return l 		133 137
wraps inner_func def wrapper * args ** kwds if args not in cache cache args = inner_func * args ** kwds return cache args 		18 22
def __enter__ self self __inputfile = open self __inputfilename r self __parsedfile = open self __parsedfilename w self __outputfile = open self __outputfilename w 		121 125
time_it def solveallcases iowrapper t = int iowrapper readline for testcase in range 1 t + 1 iowrapper newtestcase assert iowrapper gettestcase == testcase solveonecase iowrapper 		194 200
def solveonecase iowrapper k c s = int x for x in iowrapper readline split assert s <= k checksneeded = k // c if k % c != 0 checksneeded += 1 if checksneeded > s iowrapper write case # + str iowrapper gettestcase + : impossible\n else iowrapper write case # + str iowrapper gettestcase + : for i in range checksneeded indexdigits = list range c * i c * i + 1 for i in range c if indexdigits i >= k indexdigits i = 0 ind = converttoindex indexdigits k c + 1 iowrapper write  + str ind iowrapper write \n 		209 226
def log_it arguments = true output = true def decorating_function user_function def wrapper * args ** kwds if arguments print time ctime : function \' + user_function __qualname__ + \' arguments args= args kwds= kwds result = user_function * args ** kwds if output print time ctime : function \' + user_function __qualname__ + \' outputs result return result return update_wrapper wrapper user_function return decorating_function 		50 60
def newtestcase self self __indextestcase += 1 self __parsedfile write \n## _bigonion testcase: + str self __indextestcase + ##\n 		139 142
wraps inner_func def wrapper * args ** kwds global _call_func_counters _call_func_counters inner_func __qualname__ += 1 return inner_func * args ** kwds 		71 75
def wrapper * args ** kwds if arguments print time ctime : function \' + user_function __qualname__ + \' arguments args= args kwds= kwds result = user_function * args ** kwds if output print time ctime : function \' + user_function __qualname__ + \' outputs result return result 		52 58
time_it def main_run print directory : os getcwd filenames = x for x in os listdir l1 = os stat x st_mtime x for x in filenames if x endswith .in if not l1 raise valueerror no input file found chosen_prefix = sorted l1 - 1 1 - 3 input_filename = chosen_prefix + .in print chosen input : input_filename parsed_filename = chosen_prefix + .parsed.txt l2 = x split . 0 for x in filenames if x endswith .out and x startswith chosen_prefix l2 = int x split -run - 1 for x in l2 output_file_index = 000 + str max 0 + l2 + 1 - 3 output_filename = chosen_prefix + -run + output_file_index + .out print chosen output : output_filename print iowrapper = gcjiowrapper input_filename parsed_filename output_filename with iowrapper solveallcases iowrapper print print conclusion : print directory : os getcwd print chosen input : input_filename print chosen output : output_filename 		154 190
def converttoindex indexdigits k c assert max indexdigits < k assert len indexdigits == c n = 0 for digit in indexdigits n *= k n += digit return n 		230 237
def __exit__ self typee value tb self __inputfile close self __parsedfile close self __outputfile close 		127 131
def write self s self __outputfile write s 		144 146
def gettestcase self return self __indextestcase 		148 150
def count_it inner_func global _call_func_counters if _call_func_counters not in globals _call_func_counters = assert type _call_func_counters == dict assert inner_func __qualname__ not in _call_func_counters _call_func_counters inner_func __qualname__ = 0 wraps inner_func def wrapper * args ** kwds global _call_func_counters _call_func_counters inner_func __qualname__ += 1 return inner_func * args ** kwds return wrapper 		64 76
def reset_memoization global __memoization_registry try for cache_d in __memoization_registry cache_d clear 		26 30
time_it wraps inner_func def wrapper * args ** kwds filename = preprocess_ + inner_func __qualname__ + .pickle if not filename in os listdir print --> pre process started for function \' + inner_func __qualname__ + \' .... preprocessdata = inner_func print --> pre process ended for function \' + inner_func __qualname__ + \' print --> pickling started for function \' + inner_func __qualname__ + \' .... with open filename wb as f_pp pickle dump preprocessdata f_pp pickle highest_protocol print --> pickling ended for function \' + inner_func __qualname__ + \' print --> unpickling pre-processed data of function \' + inner_func __qualname__ + \' ... with open filename rb as f_pp data = pickle load f_pp print --> unpickling ended print return data 		86 103
def pre_process_it inner_func import inspect import pickle a = inspect getargspec inner_func if a args or a keywords or a varargs or a defaults raise valueerror a pre process function must not have arguments time_it wraps inner_func def wrapper * args ** kwds filename = preprocess_ + inner_func __qualname__ + .pickle if not filename in os listdir print --> pre process started for function \' + inner_func __qualname__ + \' .... preprocessdata = inner_func print --> pre process ended for function \' + inner_func __qualname__ + \' print --> pickling started for function \' + inner_func __qualname__ + \' .... with open filename wb as f_pp pickle dump preprocessdata f_pp pickle highest_protocol print --> pickling ended for function \' + inner_func __qualname__ + \' print --> unpickling pre-processed data of function \' + inner_func __qualname__ + \' ... with open filename rb as f_pp data = pickle load f_pp print --> unpickling ended print return data return wrapper 		79 105
def memoize_it inner_func global __memoization_registry try __memoization_registry except nameerror __memoization_registry = cache = __memoization_registry append cache wraps inner_func def wrapper * args ** kwds if args not in cache cache args = inner_func * args ** kwds return cache args return wrapper 		10 23
def time_it inner_func wraps inner_func def wrapper * args ** kwds print --> start function \' + inner_func __qualname__ + \' : time ctime starttime = time time res = inner_func * args ** kwds endtime = time time print --> end  function \' + inner_func __qualname__ + \' : time ctime print --> elapsed time \' + inner_func __qualname__ + \' : endtime - starttime print return res return wrapper 		35 46
def decorating_function user_function def wrapper * args ** kwds if arguments print time ctime : function \' + user_function __qualname__ + \' arguments args= args kwds= kwds result = user_function * args ** kwds if output print time ctime : function \' + user_function __qualname__ + \' outputs result return result return update_wrapper wrapper user_function 		51 59
wraps inner_func def wrapper * args ** kwds print --> start function \' + inner_func __qualname__ + \' : time ctime starttime = time time res = inner_func * args ** kwds endtime = time time print --> end  function \' + inner_func __qualname__ + \' : time ctime print --> elapsed time \' + inner_func __qualname__ + \' : endtime - starttime print return res 		36 45
def __init__ self inputfilename parsedfilename outputfilename self __inputfilename = inputfilename self __parsedfilename = parsedfilename self __outputfilename = outputfilename self __indextestcase = 0 		115 119

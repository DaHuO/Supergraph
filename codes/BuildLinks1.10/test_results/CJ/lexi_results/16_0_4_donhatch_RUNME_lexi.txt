def numeraltonumber numeral base answer = 0 for digit in numeral answer = answer * base + digit return answer 		101 106
def smart0 k c s assert k >= 1 assert c >= 1 assert s >= 1 s = div_rounding_up k c if s > s return none firstpartsize = k - s - 1 * c assert firstpartsize >= 1 assert firstpartsize <= c parts = for i in xrange s if i == 0 part = range firstpartsize else part = range firstpartsize + i - 1 * c firstpartsize + i * c parts append part assert sum parts == range k answer = for part in parts numeral = part column = numeraltonumber numeral k answer append column return answer 		108 142
def generate generator c gs = g * len generator answer = l for i in xrange c answer = join gs if c == g else generator for c in answer return answer 		6 11
def div_rounding_up a b return a + b - 1 // b 		98 99
def test maxmax for maxkcs in xrange maxmax + 1 for k in xrange 1 maxkcs + 1 for c in xrange 1 maxkcs + 1 for s in xrange 1 maxkcs + 1 if max k c s != maxkcs continue answersmart0 = smart0 k c s answernaive0 = naive0 k c s print k=%s c=%s s=%s -> smart0=%s naive0=%s % k c s answertostring answersmart0 answertostring answernaive0 assert answernaive0 == answersmart0 		144 154
def naive0 k c s verboselevel = 0 if verboselevel >= 1 print   k=%s c=%s s=%s % k c s k_to_power_c = k ** c for s in xrange s + 1 if verboselevel >= 1 print     s=%s % s for positions in itertools combinations range k_to_power_c s if verboselevel >= 1 print       positions= + ` positions ` positions_are_good_for_all_generators_so_far = true for generator in itertools product l g repeat = k if g not in generator continue generator = join generator if verboselevel >= 1 print         generator= + ` generator ` generated = generate generator c if verboselevel >= 1 print         generated= + ` generated ` positions_are_good_for_this_generator = false for i in xrange s if generated positions i == g if verboselevel >= 1 print           these positions are good for this generator positions_are_good_for_this_generator = true break if not positions_are_good_for_this_generator if verboselevel >= 1 print         these positions are bad for this generator positions_are_good_for_all_generators_so_far = false break if positions_are_good_for_all_generators_so_far if verboselevel >= 1 print       these positions are good for all generators! return list positions return none 		17 46
def answertostring answer if answer is none return impossible return  join ` x + 1 ` for x in answer 		48 50

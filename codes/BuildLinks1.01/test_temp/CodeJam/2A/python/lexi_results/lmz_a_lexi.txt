import sys 		1
import itertools 		2
sys . setrecursionlimit ( 10000 ) 		3
tc = int ( sys . stdin . readline ( ) . strip ( ) ) 		5
for tmp_tc in xrange ( tc ) : 		7
[ N , R , P , S ] = map ( lambda x : int ( x ) , sys . stdin . readline ( ) . strip ( ) . split ( ' ' ) ) 		8
cache = { } 		10
def walk ( P , R , S ) : 		11
N = P + R + S 		12
nn = N 		13
while nn % 2 == 0 : nn /= 2 		14
if nn != 1 : return None 		15
m = N / 3 		16
if not ( ( P == m or P == m + 1 ) and ( R == m or R == m + 1 ) and ( S == m or S == m + 1 ) ) : 		17
return None 		18
if N == 1 : 		19
if P == 1 : return 'P' 		20
if R == 1 : return 'R' 		21
if S == 1 : return 'S' 		22
raise "ARG" 		23
if N == 2 : 		24
if P == 0 : return 'RS' 		25
if R == 0 : return 'PS' 		26
if S == 0 : return 'PR' 		27
key = P , R , S 		28
if key in cache : return cache [ key ] 		29
res = None 		30
for p , r , s in itertools . product ( [ P / 2 , P - P / 2 ] , [ R / 2 , R - R / 2 ] , [ S / 2 , S - S / 2 ] ) : 		31
w1 = walk ( p , r , s ) 		32
w2 = walk ( P - p , R - r , S - s ) 		33
if w1 is not None and w2 is not None : 		34
w = w1 + w2 		35
if res is None or w < res : res = w 		36
cache [ key ] = res 		37
return res 		38
res = walk ( P , R , S ) 		40
res = res if res is not None else "IMPOSSIBLE" 		41
print "Case #%d: %s" % ( 1 + tmp_tc , res ) 		43

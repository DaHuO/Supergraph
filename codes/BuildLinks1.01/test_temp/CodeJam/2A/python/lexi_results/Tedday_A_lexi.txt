level = __file__ . split ( "\\" ) [ - 1 ] [ 0 ] 		1
file_is_small = 1 		2
attempt = 0 		3
name = level + "-small-attempt" + str ( attempt ) if file_is_small else level + "-large" 		4
input_file = file ( name + ".in" , "r" ) 		5
output_file = file ( name + "-output.txt" , "w" ) 		6
letters = "PRS" 		8
def reduce_lineup ( lineup ) : 		9
reduce_map = { 'RP' : 'P' , 'PR' : 'P' , 'SP' : 'S' , 'PS' : 'S' , 'SR' : 'R' , 'RS' : 'R' } 		10
return "" . join ( [ reduce_map [ lineup [ i : i + 2 ] ] if lineup [ i : i + 2 ] in reduce_map else '0' for i in xrange ( 0 , len ( lineup ) , 2 ) ] ) 		11
def test_case ( ) : 		14
[ N , R , P , S ] = [ int ( i ) for i in input_file . readline ( ) . split ( ) ] 		15
num = 2 ** N 		16
for i in xrange ( 3 ** num ) : 		17
s = "" 		18
for j in xrange ( num ) : 		19
s = letters [ i % 3 ] + s 		20
i /= 3 		21
t = s + "" 		22
if ( s . count ( "R" ) == R and s . count ( "S" ) == S and s . count ( "P" ) == P ) : 		23
while ( len ( s ) > 1 and not '0' in s ) : 		24
s = reduce_lineup ( s ) 		25
if ( len ( s ) == 1 and s != "0" ) : 		26
return t 		27
return "IMPOSSIBLE" 		28
T = int ( input_file . readline ( ) ) 		31
for test in xrange ( T ) : 		32
out = "Case #{0}: {1}" . format ( test + 1 , test_case ( ) ) 		33
output_file . write ( out + "\n" ) 		35
input_file . close ( ) 		36
output_file . close ( ) 		37

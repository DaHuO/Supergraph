import sys 		16
import random 		17
if sys . version_info [ 0 ] < 3 : 		20
range = xrange 		21
class Bubble ( object ) : 		24
@ staticmethod 		31
def bubble_naive ( array ) : 		32
length = len ( array ) - 1 		40
for _ in range ( length ) : 		41
for i in range ( length ) : 		42
if array [ i ] > array [ i + 1 ] : 		43
array [ i ] , array [ i + 1 ] = array [ i + 1 ] , array [ i ] 		44
@ staticmethod 		46
def bubble_optimized ( array ) : 		47
for passes in range ( len ( array ) - 1 , 0 , - 1 ) : 		56
for i in range ( passes ) : 		57
if array [ i ] > array [ i + 1 ] : 		58
array [ i ] , array [ i + 1 ] = array [ i + 1 ] , array [ i ] 		59
@ staticmethod 		61
def bubble_optimized_with_flag ( array ) : 		62
for passes in range ( len ( array ) - 1 , 0 , - 1 ) : 		70
changed = False 		71
for i in range ( passes ) : 		72
if array [ i ] > array [ i + 1 ] : 		73
array [ i ] , array [ i + 1 ] = array [ i + 1 ] , array [ i ] 		74
changed = True 		75
if not changed : 		76
break 		77
@ staticmethod 		79
def bubble_final_position ( array ) : 		80
swap_point = len ( array ) 		91
while swap_point : 		92
new_swap = 0 		93
for i in range ( 1 , swap_point ) : 		94
if array [ i - 1 ] > array [ i ] : 		95
array [ i - 1 ] , array [ i ] = array [ i ] , array [ i - 1 ] 		96
new_swap = i 		97
swap_point = new_swap 		98
class Insertion ( object ) : 		101
@ staticmethod 		108
def insertion ( array ) : 		109
for i in range ( 1 , len ( array ) ) : 		117
while i > 0 and array [ i ] < array [ i - 1 ] : 		118
array [ i ] , array [ i - 1 ] = array [ i - 1 ] , array [ i ] 		119
i -= 1 		120
@ staticmethod 		122
def insertion_optimized ( array ) : 		123
for i , val in enumerate ( array ) : 		130
while i > 0 and val < array [ i - 1 ] : 		131
array [ i ] = array [ i - 1 ] 		132
i -= 1 		133
array [ i ] = val 		134
@ staticmethod 		136
def insertion_optimized_alt ( array ) : 		137
j = 0 		145
for i , val in enumerate ( array ) : 		146
for j in range ( i , - 1 , - 1 ) : 		147
if j > 0 and val < array [ j - 1 ] : 		148
array [ j ] = array [ j - 1 ] 		149
else : 		150
break 		151
array [ j ] = val 		152
class Quick ( object ) : 		155
@ staticmethod 		162
def quick_random ( array ) : 		163
length = len ( array ) 		172
if length < 2 : 		173
return array 		174
pivot = array . pop ( random . randrange ( length ) ) 		175
above = [ ] 		176
below = [ ] 		177
for item in array : 		178
if item > pivot : 		179
above . append ( item ) 		180
else : 		181
below . append ( item ) 		182
return Quick . quick_random ( below ) + [ pivot ] + Quick . quick_random ( above ) 		183
@ staticmethod 		185
def quick_median ( array ) : 		186
length = len ( array ) 		194
if length < 2 : 		195
return array 		196
pivot_index = Quick . median_of_three ( array , 0 , length - 1 ) 		197
pivot = array . pop ( pivot_index ) 		198
above = [ ] 		199
below = [ ] 		200
for item in array : 		201
if item > pivot : 		202
above . append ( item ) 		203
else : 		204
below . append ( item ) 		205
return Quick . quick_median ( below ) + [ pivot ] + Quick . quick_median ( above ) 		206
@ staticmethod 		208
def quick_inplace_random ( array , left = 0 , right = None ) : 		209
if right is None : 		218
right = len ( array ) - 1 		219
if left < right : 		220
pivot_ind = random . randint ( left , right ) 		221
pivot_new_ind = Quick . partition ( array , left , right , pivot_ind ) 		222
Quick . quick_inplace_random ( array , left , pivot_new_ind - 1 ) 		223
Quick . quick_inplace_random ( array , pivot_new_ind + 1 , right ) 		224
@ staticmethod 		226
def quick_inplace_median ( array , left = 0 , right = None ) : 		227
if right is None : 		236
right = len ( array ) - 1 		237
if left < right : 		238
pivot_ind = Quick . median_of_three ( array , left , right ) 		239
pivot_new_ind = Quick . partition ( array , left , right , pivot_ind ) 		240
Quick . quick_inplace_median ( array , left , pivot_new_ind - 1 ) 		241
Quick . quick_inplace_median ( array , pivot_new_ind + 1 , right ) 		242
@ staticmethod 		244
def quick_inplace_repeat ( array , low = 0 , high = None ) : 		245
if high is None : 		258
high = len ( array ) - 1 		259
if low < high : 		260
pivot_ind = Quick . median_of_three ( array , low , high ) 		261
left , right = Quick . partition_repeat ( array , low , high , pivot_ind ) 		262
Quick . quick_inplace_repeat ( array , low , left ) 		263
Quick . quick_inplace_repeat ( array , right , high ) 		264
@ staticmethod 		266
def partition ( array , left , right , pivot_ind ) : 		267
pivot = array [ pivot_ind ] 		273
array [ pivot_ind ] , array [ right ] = array [ right ] , array [ pivot_ind ] 		274
index = left 		275
for i in range ( left , right ) : 		276
if array [ i ] <= pivot : 		277
array [ i ] , array [ index ] = array [ index ] , array [ i ] 		278
index += 1 		279
array [ index ] , array [ right ] = array [ right ] , array [ index ] 		280
return index 		281
@ staticmethod 		283
def partition_repeat ( array , left , right , pivot_ind ) : 		284
pivot = array [ pivot_ind ] 		291
index = left 		292
for i in range ( left , right + 1 ) : 		293
if array [ i ] < pivot : 		294
array [ i ] , array [ index ] = array [ index ] , array [ i ] 		295
index += 1 		296
left = index 		297
for i in range ( left , right + 1 ) : 		298
if array [ i ] == pivot : 		299
array [ i ] , array [ index ] = array [ index ] , array [ i ] 		300
index += 1 		301
return left , index 		302
@ staticmethod 		304
def median_of_three ( array , left , right ) : 		305
mid = ( left + right ) // 2 		313
if array [ left ] > array [ mid ] : 		314
if array [ mid ] > array [ right ] : 		315
return mid 		316
elif array [ left ] > array [ right ] : 		317
return right 		318
return left 		319
elif array [ left ] > array [ right ] : 		320
return left 		321
elif array [ mid ] > array [ right ] : 		322
return right 		323
return mid 		324
class Merge ( object ) : 		327
@ staticmethod 		334
def merge_sort ( array ) : 		335
length = len ( array ) 		346
if length < 2 : 		347
return array 		348
middle = length // 2 		349
left = Merge . merge_sort ( array [ : middle ] ) 		350
right = Merge . merge_sort ( array [ middle : ] ) 		351
return Merge . merge ( left , right ) 		352
@ staticmethod 		354
def merge ( left , right ) : 		355
new = [ ] 		357
left_index , right_index = 0 , 0 		358
len_left , len_right = len ( left ) , len ( right ) 		359
while left_index < len_left and right_index < len_right : 		360
if left [ left_index ] <= right [ right_index ] : 		361
new . append ( left [ left_index ] ) 		362
left_index += 1 		363
else : 		364
new . append ( right [ right_index ] ) 		365
right_index += 1 		366
new += left [ left_index : ] 		367
new += right [ right_index : ] 		368
return new 		369
class Heap ( object ) : 		372
@ staticmethod 		379
def heap_sort ( array ) : 		380
highest_index = len ( array ) - 1 		390
Heap . heapify ( array , highest_index ) 		391
for end in range ( highest_index , 0 , - 1 ) : 		392
array [ end ] , array [ 0 ] = array [ 0 ] , array [ end ] 		393
Heap . sift_down ( array , 0 , end - 1 ) 		394
@ staticmethod 		396
def heapify ( array , highest_index ) : 		397
first = ( highest_index - 1 ) // 2 		404
for start in range ( first , - 1 , - 1 ) : 		405
Heap . sift_down ( array , start , highest_index ) 		406
@ staticmethod 		408
def sift_down ( array , start , end ) : 		409
root = start 		415
while root * 2 + 1 <= end : 		416
child = root * 2 + 1 		417
swap = root 		418
if array [ swap ] < array [ child ] : 		419
swap = child 		420
if child + 1 <= end and array [ swap ] < array [ child + 1 ] : 		421
swap = child + 1 		422
if swap != root : 		423
array [ root ] , array [ swap ] = array [ swap ] , array [ root ] 		424
root = swap 		425
else : 		426
break 		427
class Other ( object ) : 		430
@ staticmethod 		437
def bogo ( array ) : 		438
while any ( array [ i ] > array [ i + 1 ] for i in range ( len ( array ) - 1 ) ) : 		449
random . shuffle ( array ) 		450

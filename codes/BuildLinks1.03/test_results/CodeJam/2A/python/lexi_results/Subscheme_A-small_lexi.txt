from sys import setrecursionlimit as slr 		1
from collections import Counter 		2
slr 10 ** 9 		3
def memo f 		5
cache = dict 		6
def wrap * args 		7
if args not in cache cache args = f * args 		8
return cache args 		9
return wrap 		10
getl = lambda raw_input strip split 		12
get = lambda map int getl 		13
def put caseNumber result 		15
print Case #%d: %s % caseNumber result 		16
def gen p r s 		18
if p + r + s == 0 		19
yield  		20
elif p + r + s == 1 		21
yield P if p else R if r else S 		22
else 		23
if p > 0 		24
for seq in gen p - 1 r s 		25
yield P + seq 		26
if r > 0 		27
for seq in gen p r - 1 s 		28
yield R + seq 		29
if s > 0 		30
for seq in gen p r s - 1 		31
yield S + seq 		32
def winner a b 		34
if a == b 		35
raise ValueError 		36
if a > b 		37
a b = b a 		38
if a == P 		39
if b == R 		40
return P 		41
if b == S 		42
return S 		43
assert False 		44
assert a == R and b == S 		45
return R 		46
def compete seq 		49
return  join winner a b for a b in zip seq 2 seq 1 2 		50
memo 		52
def works seq 		53
if len seq <= 1 		54
return True 		55
try 		56
return works compete seq 		57
except ValueError 		58
return False 		59
def solve n r p s 		61
for seq in gen p r s 		62
if works seq 		63
return seq 		64
return IMPOSSIBLE 		65
T = get 		67
for caseNumber in range 1 T + 1 		68
put caseNumber solve * get 		69

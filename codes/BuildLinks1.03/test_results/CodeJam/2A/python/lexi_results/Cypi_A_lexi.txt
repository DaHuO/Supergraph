def invalid n r p s 		1
N = 1 << n 		2
if max r p s > N + 2 / 3 return True 		3
if min r p s < N / 3 return True 		4
return False 		5
def build n r p s 		7
assert not invalid n r p s 		8
if n == 1 		9
if p > 0 and r > 0 return PR 		10
if p > 0 and s > 0 return PS 		11
return RS 		12
if p == r > s 		14
pl rl sl = p + 1 / 2 r / 2 s / 2 		15
elif p == s > r 		16
pl rl sl = p + 1 / 2 r / 2 s / 2 		17
elif p > r == s 		18
pl rl sl = p / 2 r + 1 / 2 s / 2 		19
elif r == s > p 		20
pl rl sl = p / 2 r + 1 / 2 s / 2 		21
elif r > s == p 		22
pl rl sl = p + 1 / 2 r / 2 s / 2 		23
elif s > r == p 		24
pl rl sl = p + 1 / 2 r / 2 s / 2 		25
else 		26
assert False 		27
return build n - 1 rl pl sl + build n - 1 r - rl p - pl s - sl 		28
_T = int raw_input 		30
for _t in range 1 _T + 1 		31
n R P S = map int raw_input split 		33
if invalid n R P S 		35
res = IMPOSSIBLE 		36
else 		37
res = build n R P S 		38
print Case #{}: {} format _t res 		41

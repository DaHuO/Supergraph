import sys 		1
_in = open sys argv 1 		3
def raw return _in readline rstrip \n 		4
def ints return map int raw split 		5
raw_input = raw 		6
class memoize 		8
def __init__ self function 		9
self fn = function 		10
self memory = 		11
def __call__ self * args 		12
if args not in self memory 		13
self memory args = self fn * args 		14
return self memory args 		15
memoize 		17
def rec winner R P S k 		18
assert R + P + S == 2 ** k 		20
L = R P S 		21
if k == 1 		22
if 2 in L 		23
return False 		24
a = L index 1 		25
b = 2 - L - 1 index 1 		26
r = a - b % 3 		27
if r == 1 		28
win = a 		29
else 		30
assert r == 2 		31
win = b 		32
return winner == win 		33
loser = winner - 1 % 3 		34
best_pair = Z None 		35
for p in range P - 1 - 1 		36
for r in range R - 1 - 1 		37
s = 2 ** k - 1 - r - p 		38
if s < 0 or s > S 		39
continue 		40
left = winner r p s k - 1 		41
right = loser R - r P - p S - s k - 1 		42
if rec * left and rec * right 		43
sol = solution * left + solution * right 		44
best_pair = min best_pair sol left right 		45
left = loser r p s k - 1 		46
right = winner R - r P - p S - s k - 1 		47
if rec * left and rec * right 		48
sol = solution * left + solution * right 		49
best_pair = min best_pair sol left right 		50
if best_pair 0 != Z 		51
return best_pair 1 		52
return None 		53
def solution winner R P S k 		55
if k == 1 		56
return P * P + R * R + S * S 		57
left right = rec winner R P S k 		58
return solution * left + solution * right 		59
def solve N R P S 		61
for i in range 3 		62
if rec i R P S N 		63
return solution i R P S N 		64
return IMPOSSIBLE 		65
if __name__ == __main__ 		67
num_cases = ints 		68
for case_num in xrange 1 num_cases + 1 		69
N R P S = ints 		70
print Case #{}: {} format case_num solve N R P S 		71

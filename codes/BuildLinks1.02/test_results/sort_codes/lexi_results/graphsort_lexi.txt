import random 		1
from Tkinter import * 		2
import time 		3
class numbers ( object ) : 		5
def __init__ ( self ) : 		7
self . genNumbers ( 50 ) 		8
def genNumbers ( self , num ) : 		12
self . numberList = [ ] 		13
for i in range ( num ) : 		14
self . numberList . append ( random . randint ( 1 , 290 ) ) 		15
appWindow . drawGraph ( self . numberList ) 		16
def bubbleSort ( self ) : 		19
for i in range ( len ( self . numberList ) ) : 		20
for j in range ( len ( self . numberList ) ) : 		21
if self . numberList [ j ] > self . numberList [ i ] : 		22
self . numberList [ j ] , self . numberList [ i ] = self . numberList [ i ] , self . numberList [ j ] 		24
time . sleep ( 0.1 ) 		26
appWindow . drawGraph ( self . numberList ) 		27
root . update_idletasks ( ) 		28
def selectionSort ( self ) : 		30
for i in range ( len ( self . numberList ) - 1 , 0 , - 1 ) : 		31
positionOfMax = 0 		32
for j in range ( 1 , i + 1 ) : 		33
if self . numberList [ j ] > self . numberList [ positionOfMax ] : 		34
positionOfMax = j 		35
temp = self . numberList [ i ] 		37
self . numberList [ i ] = self . numberList [ positionOfMax ] 		38
self . numberList [ positionOfMax ] = temp 		39
time . sleep ( 0.1 ) 		42
appWindow . drawGraph ( self . numberList ) 		44
root . update_idletasks ( ) 		45
class controller ( object ) : 		47
def __init__ ( self , num ) : 		49
self . bubble = Button ( frame , text = "Bubble Sort" , command = num . bubbleSort ) 		50
self . bubble . pack ( side = BOTTOM ) 		51
self . selection = Button ( frame , text = "Selection Sort" , command = num . selectionSort ) 		53
self . selection . pack ( side = BOTTOM ) 		54
self . genButton = Button ( frame , text = "New Numbers" , command = self . genButtonEvent ) 		56
self . genButton . pack ( side = BOTTOM ) 		57
self . entry = Entry ( frame , width = 20 ) 		59
self . entry . pack ( side = BOTTOM ) 		60
def genButtonEvent ( self ) : 		62
if self . entry . get ( ) . strip ( ) == "" : 		63
num . genNumbers ( 50 ) 		64
else : 		65
num . genNumbers ( int ( self . entry . get ( ) ) ) 		66
class view ( object ) : 		70
def __init__ ( self ) : 		71
self . canvas = Canvas ( frame , height = 400 , width = 600 , relief = RAISED , bg = 'white' ) 		72
self . canvas . pack ( side = TOP ) 		73
self . leftRect = self . canvas . create_rectangle ( 10 , 10 , 580 , 300 , fill = "white" , outline = "black" ) 		74
def drawGraph ( self , numList ) : 		78
self . canvas . delete ( ALL ) 		79
self . leftRect = self . canvas . create_rectangle ( 10 , 10 , 580 , 300 , fill = "white" , outline = "black" ) 		80
x = 10 		81
spacing = 550 / len ( numList ) 		82
for i in range ( len ( numList ) ) : 		83
x += spacing 		84
self . canvas . create_rectangle ( x , 300 - numList [ i ] , x + 5 , 300 , fill = "red" ) 		85
root = Tk ( ) 		89
frame = Frame ( root ) 		90
frame . pack ( ) 		91
appWindow = view ( ) 		92
num = numbers ( ) 		93
c = controller ( num ) 		94
root . mainloop ( ) 		95
root . destroy ( ) 		96

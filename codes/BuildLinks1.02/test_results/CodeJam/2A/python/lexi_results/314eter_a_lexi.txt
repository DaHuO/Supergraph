newline = False 		2
def read_problem ( ) : 		5
return map ( int , input ( ) . split ( ) ) 		6
def sort1 ( tree ) : 		9
try : 		10
left , right = tree 		11
except TypeError : 		12
return [ tree ] 		13
leftlist = sort ( left ) 		14
rightlist = sort ( right ) 		15
if leftlist > rightlist : 		16
tree [ 0 ] , tree [ 1 ] = right , left 		17
return rightlist + leftlist 		18
else : 		19
return leftlist + rightlist 		20
def sort ( tree ) : 		23
try : 		25
left , right = tree 		26
except TypeError : 		27
return ( int ( tree == 0 ) , int ( tree == 1 ) , int ( tree == 2 ) , 3 , tree ) 		28
sortleft = sort ( left ) 		29
sortright = sort ( right ) 		30
p = sortleft [ 0 ] + sortright [ 0 ] 		31
r = sortleft [ 1 ] + sortright [ 1 ] 		32
s = sortleft [ 2 ] + sortright [ 2 ] 		33
factor = sortleft [ 3 ] 		34
if sortleft [ 4 ] > sortright [ 4 ] : 		35
tree [ 0 ] , tree [ 1 ] = right , left 		36
value = sortright [ 4 ] * factor + sortleft [ 4 ] 		37
else : 		38
value = sortleft [ 4 ] * factor + sortright [ 4 ] 		39
return ( p , r , s , factor * factor , value ) 		40
def build_tree ( root , n ) : 		43
if n == 0 : 		44
return root 		45
elif root == 0 : 		46
return [ build_tree ( 0 , n - 1 ) , build_tree ( 1 , n - 1 ) ] 		47
elif root == 1 : 		48
return [ build_tree ( 1 , n - 1 ) , build_tree ( 2 , n - 1 ) ] 		49
else : 		50
return [ build_tree ( 0 , n - 1 ) , build_tree ( 2 , n - 1 ) ] 		51
def counts ( l ) : 		54
c = [ 0 ] * 3 		55
for i in l : 		56
c [ i ] += 1 		57
return c 		58
def treelist ( tree ) : 		61
try : 		62
left , right = tree 		63
except TypeError : 		64
return [ tree ] 		65
return treelist ( left ) + treelist ( right ) 		66
def solve ( problem ) : 		69
n , r , p , s = problem 		70
ptree = build_tree ( 0 , n ) 		71
psort = sort ( ptree ) 		72
if psort [ : 3 ] == ( p , r , s ) : 		73
return treelist ( ptree ) 		74
rtree = build_tree ( 1 , n ) 		75
rsort = sort ( rtree ) 		76
if rsort [ : 3 ] == ( p , r , s ) : 		77
return treelist ( rtree ) 		78
stree = build_tree ( 2 , n ) 		79
ssort = sort ( stree ) 		80
if ssort [ : 3 ] == ( p , r , s ) : 		81
return treelist ( stree ) 		82
return None 		83
def print_solution ( solution ) : 		86
if solution is None : 		87
print ( "IMPOSSIBLE" ) 		88
else : 		89
print ( '' . join ( "PRS" [ i ] for i in solution ) ) 		90
cases = int ( input ( ) ) 		93
for n in range ( 1 , cases + 1 ) : 		94
problem = read_problem ( ) 		95
solution = solve ( problem ) 		96
print ( "Case #{0}:" . format ( n ) , end = '\n' if newline else ' ' ) 		97
print_solution ( solution ) 		98

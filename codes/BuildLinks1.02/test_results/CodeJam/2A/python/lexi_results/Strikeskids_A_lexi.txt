def expand_chars ( c ) : 		3
if c == 'R' : 		4
return 'RS' 		5
elif c == 'P' : 		6
return 'PR' 		7
elif c == 'S' : 		8
return 'PS' 		9
class Node : 		11
def __init__ ( self , val ) : 		12
self . val = val 		13
def expand ( self ) : 		15
if self . val : 		16
self . children = list ( map ( Node , expand_chars ( self . val ) ) ) 		17
self . val = None 		18
else : 		19
for c in self . children : 		20
c . expand ( ) 		21
return self 		22
def sort ( self ) : 		24
if not self . val : 		25
self . val = '' . join ( sorted ( c . sort ( ) for c in self . children ) ) 		26
return self . val 		27
def compute_rps_tree ( n , R , P , S ) : 		30
if n == 0 : 		31
return Node ( 'R' * R + 'P' * P + 'S' * S ) 		32
a , b , c = sorted ( [ R , P , S ] ) 		33
if a + b < c : 		34
return None 		35
left = R + P - S 		36
rp = left // 2 		37
rs = R - rp 		38
sp = P - rp 		39
res = compute_rps_tree ( n - 1 , rs , rp , sp ) 		40
return res and res . expand ( ) 		41
def compute_rps ( n , R , P , S ) : 		43
res = compute_rps_tree ( n , R , P , S ) 		44
if res == None : 		45
return 'IMPOSSIBLE' 		46
return res . sort ( ) 		47
def run_test ( i ) : 		49
nums = map ( int , input ( ) . split ( ) ) 		50
print ( 'Case #%d: %s' % ( i , compute_rps ( * nums ) ) ) 		51
def main ( ) : 		53
T = int ( input ( ) ) 		54
for t in range ( T ) : 		56
run_test ( t + 1 ) 		57
def extensive ( ) : 		59
import random 		60
for i in range ( 100000 ) : 		61
compute_insomnia ( random . randint ( 0 , 10 ** 6 ) ) 		62
exit ( 0 ) 		63
if __name__ == '__main__' : main ( ) 		65

task = 'A' 		1
type = 2 		2
if type == 0 : 		4
inp = open ( 'sample.in' , 'r' ) 		5
elif type == 1 : 		6
inp = open ( '%s-small.in' % ( task , ) ) 		7
else : 		8
inp = open ( '%s-large.in' % ( task ) , ) 		9
outp = open ( '%s.out' % ( task , ) , 'w' ) 		10
T = int ( inp . readline ( ) [ : - 1 ] ) 		12
mat = [ 'R' , 'S' , 'P' ] 		13
def build_tree ( top , h ) : 		16
if h == 1 : 		17
outp = [ mat [ top ] , 0 , 0 , 0 ] 		18
outp [ 1 + top ] += 1 		19
return outp 		20
else : 		21
k = [ top , ( top + 1 ) % 3 ] 		22
k . sort ( ) 		23
f = build_tree ( k [ 0 ] , h - 1 ) 		24
s = build_tree ( k [ 1 ] , h - 1 ) 		25
k = [ f [ 0 ] , s [ 0 ] ] 		26
k . sort ( ) 		27
return [ k [ 0 ] + k [ 1 ] , f [ 1 ] + s [ 1 ] , f [ 2 ] + s [ 2 ] , f [ 3 ] + s [ 3 ] ] 		28
for i in range ( T ) : 		31
c = inp . readline ( ) . split ( ) 		32
N , R , P , S = int ( c [ 0 ] ) , int ( c [ 1 ] ) , int ( c [ 2 ] ) , int ( c [ 3 ] ) 		33
ans = "ZIMPOSSIBLE" 		34
for j in range ( 3 ) : 		35
out = build_tree ( j , N + 1 ) 		36
if out [ 1 ] == R and out [ 2 ] == S and out [ 3 ] == P and out [ 0 ] < ans : 		37
ans = 'Z' + out [ 0 ] 		38
outp . write ( "Case #%s: %s\n" % ( i + 1 , ans [ 1 : ] ) ) 		40

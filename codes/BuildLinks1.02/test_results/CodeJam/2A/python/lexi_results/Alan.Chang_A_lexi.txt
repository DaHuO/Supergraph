from functools import lru_cache 		3
num_trials = int ( input ( ) ) 		6
lookup = [ 'P' , 'R' , 'S' ] 		8
def get_winner ( a ) : 		11
asum = sum ( a ) 		12
if asum == 1 : 		13
if a [ 0 ] == 1 : 		14
return 0 		15
if a [ 1 ] == 1 : 		16
return 1 		17
if a [ 2 ] == 1 : 		18
return 2 		19
p = [ 0 , 0 , 0 ] 		21
for i in range ( 0 , 3 ) : 		22
p [ i ] = asum // 2 - a [ ( i + 2 ) % 3 ] 		23
if any ( j < 0 for j in p ) : 		25
return - 1 		26
return get_winner ( p ) 		28
@ lru_cache ( maxsize = None ) 		30
def get_first_from_winner ( winner , rounds ) : 		31
if rounds == 0 : 		33
return lookup [ winner ] 		34
if rounds == 1 : 		36
if winner == 2 : 		37
return lookup [ 0 ] + "" + lookup [ 2 ] 		38
else : 		39
return lookup [ winner ] + "" + lookup [ winner + 1 ] 		40
p1 = winner 		42
p2 = ( winner + 1 ) % 3 		43
ans1 = get_first_from_winner ( p1 , rounds - 1 ) 		45
ans2 = get_first_from_winner ( p2 , rounds - 1 ) 		46
return min ( ans1 + ans2 , ans2 + ans1 ) 		48
for i in range ( 0 , l // 2 ) : 		50
next1 = almost_best [ 2 * i ] 		51
next2 = almost_best [ 2 * i + 1 ] 		52
if next1 == 0 : 		53
if next2 == 1 : 		54
ans = ans + "PR" 		55
else : 		56
ans = ans + "PS" 		57
else : 		58
ans = ans + "RS" 		59
return ans 		61
def compute ( ) : 		63
a = [ 0 , 0 , 0 ] 		64
N , a [ 1 ] , a [ 0 ] , a [ 2 ] = map ( int , input ( ) . split ( ) ) 		65
winner = get_winner ( a ) 		67
if winner == - 1 : 		69
return "IMPOSSIBLE" 		70
return get_first_from_winner ( winner , N ) 		72
for i in range ( 0 , num_trials ) : 		74
print ( "Case #" + str ( i + 1 ) + ": " + compute ( ) ) 		75

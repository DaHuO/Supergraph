import sys 		1
T = int ( sys . stdin . readline ( ) ) 		3
def propCounts ( counts , n ) : 		5
newcounts = { } 		6
tot = 0 		7
for i in range ( n , - 1 , - 1 ) : 		8
if i in counts : 		9
tot += counts [ i ] 		10
if tot > 0 and i > 0 : 		11
newcounts [ i - 1 ] = tot 		12
return newcounts 		13
memo = { } 		15
def getCounts ( n ) : 		17
if n in memo : 		18
return memo [ n ] 		19
cs = [ 0 , 0 , 0 ] 		20
css = [ ] 		21
cur = 0 		22
counts = { } 		25
for i in range ( n + 1 ) : 		26
assert ( i <= n ) 		27
counts [ i ] = 1 		28
while counts : 		30
cs [ cur % 3 ] += counts [ 0 ] 		31
cur += 1 		32
css . append ( counts [ 0 ] ) 		33
counts = propCounts ( counts , n ) 		34
assert ( len ( css ) == n + 1 ) 		36
assert ( len ( cs ) == 3 ) 		37
memo [ n ] = tuple ( cs ) 		38
return memo [ n ] 		39
def makeTree ( top , n ) : 		41
if ( n == 0 ) : 		42
return top 		43
else : 		44
if ( top == "P" ) : 		45
other = "R" 		46
elif ( top == "R" ) : 		47
other = "S" 		48
elif ( top == "S" ) : 		49
other = "P" 		50
else : 		51
assert False 		52
one = makeTree ( top , n - 1 ) 		53
two = makeTree ( other , n - 1 ) 		54
if ( one < two ) : 		55
return one + two 		56
else : 		57
return two + one 		58
for j in range ( 1 , 13 ) : 		61
getCounts ( j ) 		63
for i in range ( T ) : 		65
n , r , p , s = map ( int , sys . stdin . readline ( ) . strip ( ) . split ( ) ) 		66
cs = getCounts ( n ) 		67
print "Case #%d:" % ( i + 1 ) , 		68
if ( p == cs [ 0 ] and 		69
r == cs [ 1 ] and 		70
s == cs [ 2 ] ) : 		71
print makeTree ( "P" , n ) 		73
elif ( r == cs [ 0 ] and s == cs [ 1 ] and p == cs [ 2 ] ) : 		74
print makeTree ( "R" , n ) 		76
elif ( s == cs [ 0 ] and p == cs [ 1 ] and r == cs [ 2 ] ) : 		77
print makeTree ( "S" , n ) 		79
else : 		80
print "IMPOSSIBLE" 		81
